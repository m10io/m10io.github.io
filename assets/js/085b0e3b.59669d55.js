"use strict";(self.webpackChunkproduct=self.webpackChunkproduct||[]).push([[433,2384],{599:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>d,default:()=>m,frontMatter:()=>l,metadata:()=>r,toc:()=>f});const r=JSON.parse('{"id":"api/transfers","title":"Transfers","description":"Overview","source":"@site/docs/api/transfers.mdx","sourceDirName":"api","slug":"/api/transfers","permalink":"/api/transfers","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"sidebar","previous":{"title":"Role Bindings","permalink":"/api/role-bindings"},"next":{"title":"Glossary","permalink":"/glossary"}}');var s=t(4848),a=t(8453),o=t(4767),i=t(788),c=t(4753);const l={},d="Transfers",u={},f=[{value:"Overview",id:"overview",level:2},{value:"Transfer Steps",id:"transfer-steps",level:3},{value:"Transfer Hops",id:"transfer-hops",level:3},{value:"Initiate and Commit",id:"initiate-and-commit",level:3},{value:"Model",id:"model",level:2},{value:"API Requests",id:"api-requests",level:2},{value:"Create a single transfer",id:"create-a-single-transfer",level:3},{value:"Create a multi-transfer",id:"create-a-multi-transfer",level:3},{value:"Transfer with metadata",id:"transfer-with-metadata",level:3},{value:"Initiate &amp; Commit",id:"initiate--commit",level:3},{value:"List (Find)",id:"list-find",level:3},{value:"Get",id:"get",level:3},{value:"Observe",id:"observe",level:3}];function h(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"transfers",children:"Transfers"})}),"\n",(0,s.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"Transfers"})," is the method of sending funds from one account to another. Each transfer on the ",(0,s.jsx)(c.ProductName,{})," ledger consists of multiple transfer steps which contain the following fields:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"from_account"})," - the sender"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"to_account"})," - the receiver"]}),"\n",(0,s.jsx)(n.li,{children:"The amount"}),"\n",(0,s.jsx)(n.li,{children:"A metadata field for unstructured data"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Generally, these transfers are formatted as protobufs."}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Note:"})," All transfer steps are applied atomically; that is, if one step fails, all the steps fail."]}),"\n",(0,s.jsx)(n.h3,{id:"transfer-steps",children:"Transfer Steps"}),"\n",(0,s.jsx)(n.p,{children:'Since each transfer consists of multiple "steps", you can send funds to multiple accounts in one atomic action.'}),"\n",(0,s.jsxs)(n.p,{children:["An example use case is transaction fees since they are typically paid to an account different from the ",(0,s.jsx)(n.code,{children:"to_account"}),". To collect transaction fees, you would create a single transfer with two steps. One step for the main transfer (i.e., Alice's account to Bob's account), and a second transfer for the fee (i.e., Alice's account to the fee account). The entire transfer will fail if Alice lacks the funds to complete either step."]}),"\n",(0,s.jsx)(n.h3,{id:"transfer-hops",children:"Transfer Hops"}),"\n",(0,s.jsxs)(n.p,{children:["Since the ",(0,s.jsx)(c.ProductName,{})," ledger is hierarchical, transfers have unique behavior. For example, you have an account structure with two banks: Iron Bank and Tungsten Bank where Tungsten Bank has a customer named Alice, and Iron Bank has a customer named Chris."]}),"\n",(0,s.jsxs)(n.p,{children:["In banking, payments between two banks are typically settled in central bank money (reserves), reducing counterparty risk. The ",(0,s.jsx)(c.ProductName,{})," platform follows a similar model for the settlement of fund transfers. The ",(0,s.jsx)(c.ProductName,{})," ledger makes this process seamless. When Alice transfers funds to Chris,\nthe ledger performs several different ",(0,s.jsx)(n.em,{children:"hops"})," behind the scenes."]}),"\n",(0,s.jsxs)(n.admonition,{type:"note",children:[(0,s.jsxs)(n.p,{children:["A ",(0,s.jsx)(n.em,{children:"Hop"})," is an internal ledger procedure that the ",(0,s.jsx)(c.ProductName,{})," ledger uses to ensure the flow of funds between accounts."]}),(0,s.jsxs)(n.p,{children:["A ",(0,s.jsx)(n.em,{children:"Transfer step"})," bundles multiple transfers into a single operation, enhancing the ",(0,s.jsx)(c.ProductName,{})," ledger's efficiency."]}),(0,s.jsxs)(n.p,{children:["The relationship is ",(0,s.jsx)(n.code,{children:"Transfer -> Transfer Step -> Hop"}),"."]}),(0,s.jsxs)(n.p,{children:["You never create hops with the ",(0,s.jsx)(c.ProductName,{})," API. The ledger itself handles it."]})]}),"\n",(0,s.jsx)(n.p,{children:"Using the same example as above, the steps would be:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Alice's M1 money (bank deposits) is transferred to Tungsten Bank."}),"\n",(0,s.jsx)(n.li,{children:"Tungsten Bank transfers M0 money from its holdings, through the root account, to Iron Bank."}),"\n",(0,s.jsx)(n.li,{children:"Iron Bank has now been credited the funds in M0 money (reserves)."}),"\n",(0,s.jsx)(n.li,{children:"Iron Bank issues Iron Bank M1 money to Chris."}),"\n",(0,s.jsxs)(n.li,{children:["In the ",(0,s.jsx)(c.ProductName,{}),' ledger, each of these "hops" is done automatically.']}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"If any one of these hops fail, the entire transfer fails."}),"\n",(0,s.jsx)("br",{}),"\n",(0,s.jsx)("img",{src:"/img/transfer-hierarchy.svg",style:{display:"block",margin:"auto",width:"90%"}}),"\n",(0,s.jsx)("br",{}),"\n",(0,s.jsx)(n.h3,{id:"initiate-and-commit",children:"Initiate and Commit"}),"\n",(0,s.jsx)(n.admonition,{type:"caution",children:(0,s.jsxs)(n.p,{children:["To get the most out of the following section, you should first read the ",(0,s.jsx)(n.a,{href:"./roles",children:"Role"})," and ",(0,s.jsx)(n.a,{href:"./role-bindings",children:"Role Binding"})," API documentation."]})}),"\n",(0,s.jsxs)(n.p,{children:["There are situations where you want to interact with an external system to validate a transfer. For instance, a bank wants to screen a transaction for fraud before completion. ",(0,s.jsx)(c.ProductName,{})," solves such use cases through our initiate-and-commit system. Readers familiar with two-phase commit protocols will find themselves comfortable with this concept."]}),"\n",(0,s.jsx)(n.p,{children:"We have two transaction types:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"InitiateTransfer"})," - debits every hop in the transfer, ensuring no balances drop below zero."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"CommitTransfer"})," - performs the credit side of the operation."]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["The true power of this system comes when combined with the ",(0,s.jsx)(c.ProductName,{})," RBAC system. In an example where a bank wishes to enforce fees on a transfer, it would grant the user ",(0,s.jsx)(n.code,{children:"Initiate"})," permissions on the user's account. The bank would hold ",(0,s.jsx)(n.code,{children:"Commit"})," permissions on the user's account. The bank could then ",(0,s.jsx)(n.a,{href:"./actions#observations",children:"observe"})," ",(0,s.jsx)(n.code,{children:"InitiateTransfer"}),", and validate the transfer for correct fees."]}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"If the fee is"}),(0,s.jsxs)(n.th,{children:["Bank issues ",(0,s.jsx)(n.code,{children:"CommitTransfer"})," with"]}),(0,s.jsx)(n.th,{children:"Resulting action"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"incorrect"}),(0,s.jsxs)(n.td,{children:["a ",(0,s.jsx)(n.code,{children:"new_state"})," of ",(0,s.jsx)(n.code,{children:"rejected"})]}),(0,s.jsxs)(n.td,{children:["the debit done in ",(0,s.jsx)(n.code,{children:"InitiateTransfer"})," is rolled back."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"correct"}),(0,s.jsxs)(n.td,{children:["a ",(0,s.jsx)(n.code,{children:"new_state"})," of ",(0,s.jsx)(n.code,{children:"accepted"})]}),(0,s.jsx)(n.td,{children:"a credit is performed on each of the receiving accounts"})]})]})]}),"\n",(0,s.jsx)("br",{}),"\n",(0,s.jsx)("img",{src:"/img/two-phase-transfer.svg",style:{display:"block",margin:"auto",width:"90%"}}),"\n",(0,s.jsx)("br",{}),"\n",(0,s.jsx)(n.h2,{id:"model",children:"Model"}),"\n",(0,s.jsxs)(n.p,{children:["The data model for a transfer on the ",(0,s.jsx)(c.ProductName,{})," hierarchical ledger account is defined in ",(0,s.jsx)(n.code,{children:"transaction.proto"}),":"]}),"\n",(0,s.jsx)(i.A,{code:"\nmessage CreateTransfer {\n  repeated TransferStep transfer_steps = 1;\n}\n\nmessage TransferStep {\n  bytes from_account_id = 1;\n  bytes to_account_id = 2;\n  uint64 amount = 4;\n  repeated google.protobuf.Any metadata = 7;\n}\n\nmessage FinalizedTransfer {\n  uint64 tx_id = 1;\n  bytes context_id = 2;\n  repeated TransferStep transfer_steps = 3;\n  TransactionError error = 4;\n  fixed64 timestamp = 5;\n  TransferState state = 7;\n  enum TransferState {\n      ACCEPTED = 0;\n      REJECTED = 1;\n      PENDING = 2;\n      EXPIRED = 3;\n  }\n}\n",lang:"protobuf"}),"\n",(0,s.jsx)(n.h2,{id:"api-requests",children:"API Requests"}),"\n",(0,s.jsx)(n.h3,{id:"create-a-single-transfer",children:"Create a single transfer"}),"\n",(0,s.jsx)(o.Ay,{code:{rust:'\nuse m10_sdk::{TransferBuilder, StepBuilder};\nuse m10_sdk::account::AccountId;\nlet from_account = AccountId::try_from_be_slice(\n  hex::decode("07800002000000000000000000000002").unwrap().as_slice())?;\nlet to_account = AccountId::try_from_be_slice(\n  hex::decode("07800002000000000000000000000003").unwrap().as_slice())?;\nlet transfer = TransferBuilder::new()\n  .step(\n      StepBuilder::new(from_account, to_account, 1000)\n  );\nlet tx_id = client.transfer(transfer).await.unwrap();\n',ts:'\nconst transferTxId = await ledgerClient.transfer([\n  {\n      fromAccountId: aliceAccountId.bytes,\n      toAccountId: bobAccountId.bytes,\n      amount: 100 * 10 ** mybRootBankInfo.decimalPlaces,\n  },\n]);\nconsole.log("created transfer: ", transferTxId);\n',dart:"\nfinal response = await client.createTransfer(\nfromAccountId: '07800002000000000000000000000002',\ntoAccountId: '07800002000000000600000000000003',\namount: 100,\noperator: 'fis.m10.net',\n);\n",cli:"\nm10 create transfer \\\n--from-account 07800002000000000000000000000002 \\\n--to-account 07800002000000000600000000000003 \\\n--amount 1000\n"}}),"\n",(0,s.jsx)(n.h1,{id:""}),"\n",(0,s.jsx)(n.h3,{id:"create-a-multi-transfer",children:"Create a multi-transfer"}),"\n",(0,s.jsx)(o.Ay,{code:{rust:'\nlet from_account = AccountId::try_from_be_slice(\n  hex::decode("07800002000000000000000000000002").unwrap().as_slice())?;\nlet to_account1 = AccountId::try_from_be_slice(\n  hex::decode("07800002000000000000000000000003").unwrap().as_slice())?;\nlet to_account2 = AccountId::try_from_be_slice(\n  hex::decode("07800002000000000000000000000004").unwrap().as_slice())?;\nlet transfer = TransferBuilder::new()\n  .step(\n      StepBuilder::new(from_account, to_account1, 1000)\n  )\n  .step(\n      StepBuilder::new(from_account, to_account2, 50)\n  );\nlet tx_id = client.transfer(transfer).await.unwrap();\n',ts:'\nconst transfersTxId = await ledgerClient.transfer([\n  {\n      fromAccountId: aliceAccountId.bytes,\n      toAccountId: bobAccountId.bytes,\n      amount: 20 * 10 ** mybRootBankInfo.decimalPlaces,\n  },\n  {\n      fromAccountId: johnAccountId.bytes,\n      toAccountId: janeAccountId.bytes,\n      amount: 10 * 10 ** mybRootBankInfo.decimalPlaces,\n  },\n]);\nconsole.log("Transferred multiple funds in transaction: ", transfersTxId);\n',dart:"\nfinal transactionResponse = await client.transfer(\n  steps: [\n      TransferStepDoc.fromFields(\n          fromAccountId: '07800002000000000000000000000002',\n          toAccountId: '07800002000000000000000000000003',\n          amount: 1000,\n      ),\n      TransferStepDoc.fromFields(\n          fromAccountId: '07800002000000000000000000000002',\n          toAccountId: '07800001000000000000000000000002',\n          amount: 500,\n      ),\n  ],\n  operator: 'fis.m10.net',\n);\n",cli:"\nplaceholder\n"}}),"\n",(0,s.jsx)(n.h3,{id:"transfer-with-metadata",children:"Transfer with metadata"}),"\n",(0,s.jsx)(o.Ay,{code:{rust:'\nlet transfer = TransferBuilder::new()\n  .step(\n      StepBuilder::new(from_account, to_account, 1000)\n          .metadata(m10_sdk::sdk::Memo{plaintext: "Funds".to_string()}));\nlet tx_id = client.transfer(transfer).await.unwrap();\n',ts:'\nconst transferTxId = await ledgerClient.transfer([\n  {\n      fromAccountId: aliceAccountId.bytes,\n      toAccountId: bobAccountId.bytes,\n      amount: 100 * 10 ** mybRootBankInfo.decimalPlaces,\n      metadata: [convertMemoToAny({ plaintext: "funds" })],\n  },\n]);\nconsole.log("Transferred funds with metadata in transaction: ", transferTxId);\n',dart:"\nfinal response = await client.createTransfer(\nfromAccountId: '07800002000000000000000000000002',\ntoAccountId: '07800002000000000600000000000003',\namount: 100,\noperator: 'fis.m10.net',\nmemo: 'Example memo',\nattachments: [\n  Attachment()..objectId = '0c3ac98f-e937-4806-af8d-959a638e75f2',\n],\ncontextId: '1e0ba10a-83e8-4f8e-aae2-2f922dffbe76',\n);\n",cli:'m10 create transfer \\\n--from-account 07800002000000000000000000000002 \\\n--to-account 07800002000000000600000000000003 \\\n--amount 1000 \\\n--memo "Sending you 1000"\n'}}),"\n",(0,s.jsx)(n.h1,{id:"-1"}),"\n",(0,s.jsx)(n.h3,{id:"initiate--commit",children:"Initiate & Commit"}),"\n",(0,s.jsx)(o.Ay,{code:{rust:"\nlet tx_id = client.initiate_transfer(\n  TransferBuilder::new()\n  .step(\n      StepBuilder::new(from_account, to_account, 1000)\n  )\n).await?;\n\nlet transfer = client.get_transfer(tx_id).await?;\nclient.commit_transfer(tx_id, true, transfer.context_id).await?;\n//accept or reject \nclient.commit_transfer(tx_id, false, transfer.context_id).await?;\n",ts:'\nconst txId = await ledgerClient.initiateTransfer([\n  {\n      fromAccountId: accountId.bytes,\n      toAccountId: to.bytes,\n      amount: 2 * 10 ** mybRootBankInfo.decimalPlaces,\n      metadata: [convertMemoToAny(Memo.create({ plaintext: "Funds" }))],\n  },\n]);\nconsole.log(`Transfer initiated in transaction ${txId}`)\n\nconst responseTxId = await ledgerClient.commitTransfer(txId, true);\nconsole.log(`Transfer committed in transaction ${responseTxId}`)\n',dart:"\n// NOTE: Not yet available in the latest version of the Dart SDK\n",cli:"\nm10 create transfer \\\n--from-account 07800002000000000000000000000002 \\\n--to-account 07800002000000000600000000000003 \\\n--amount 1000 \\\n--memo Funds \\\n--no-commit\n\n\nm10 update transfer \\\n--id 1080030000 \\\n--state accept\n"}}),"\n",(0,s.jsx)(n.h1,{id:"-2"}),"\n",(0,s.jsx)(n.h3,{id:"list-find",children:"List (Find)"}),"\n",(0,s.jsx)(n.p,{children:"Use filters to list all transfers that match a certain criteria."}),"\n",(0,s.jsx)(o.Ay,{code:{rust:"\nlet transfers = client.list_transfers(\n  m10_sdk::TxnFilter::<m10_sdk::TransferFilter>::by_account(from_account)\n  .min_tx(tx_id)\n  .max_tx(tx_id + 10000)\n  .limit(5)).await.unwrap();\n",ts:"\nconst transfers = await ledgerClient.listTransfers({\n  filter: {\n      oneofKind: \"accountId\",\n      accountId: accountIds.bytes,\n  },\n});\nconsole.log('Transfers: ', transfers);\n",dart:"\nfinal transfers = await client.listTransfers(\naccountId: '07800002000000000600000000000003',\noperator: 'fis.m10.net',\n);\n",cli:"\nm10 find transfers \\\n--account 07800002000000000600000000000003 \\\n--limit 10\n"}}),"\n",(0,s.jsx)(n.h1,{id:"-3"}),"\n",(0,s.jsx)(n.h3,{id:"get",children:"Get"}),"\n",(0,s.jsx)(n.p,{children:"Get a specific transfer."}),"\n",(0,s.jsx)(o.Ay,{code:{rust:"\nlet transfer = client.get_transfer(tx_id).await?;\n",ts:"\nconst transfer = await ledgerClient.getTransfer(transferTxId)\nconsole.log(`Transfer ${JSON.stringify(transfer, null, 2)}`)\n",dart:"\nfinal transfer = await client.getTransfer(\n  txId: txId,\n  operator: 'fis.m10.net',\n);\n",cli:"\nm10 get transfer <ID>\n"}}),"\n",(0,s.jsx)(n.h1,{id:"-4"}),"\n",(0,s.jsx)(n.h3,{id:"observe",children:"Observe"}),"\n",(0,s.jsx)(n.p,{children:"Observe transfers on an account. Transfer data is streamed in real-time."}),"\n",(0,s.jsx)(o.Ay,{code:{rust:'\nuse futures::stream::StreamExt;\n\nlet account_ids = vec![account_id![7, 2]?];\n\nlet request = sdk::ObserveAccountsRequest {\ninvolved_accounts: account_ids.iter().map(|id| id.to_be_bytes().to_vec()).collect(),\nstarting_from: None};\n\nlet signed_request = client.signer().sign_request(request).await.unwrap();\nlet mut stream = client.client.observe_transfers(signed_request).await.unwrap();\n\nwhile let Some(message) = stream.next().await {\n  match message {\n      Ok(sdk::FinalizedTransactions { transactions }) => {\n          for tx in transactions {\n              println!("{:#?}", tx);\n          }\n      }\n      Err(err) => {\n          eprintln!("Error while receiving message: {}", err);\n          break;\n      }\n  }\n}\n',ts:'\nconst abortController = new AbortController();\n\nconst startObserve = await ledgerClient.observeTransfers(\n  {\n      involvedAccounts: [accountId.bytes],\n  },\n  {\n      abort: abortController.signal,\n  },\n);\n\nconst service = startObserve();\n\nreturn new Promise((resolve, reject) => {\n  (async ()=>{\n      service.responses.onNext((message, error) => {\n          if (error) {\n              abortController.abort();\n              reject(new Error("Error in transfer observation: " + error));\n              return;\n          }\n          if (message) {\n              console.log("Transfer observation: ", message);\n              abortController.abort();\n              resolve(true);\n          }\n      });\n\n      const to = Object.values(accountIds).find((id) => {\n          return id.hex !== accountId.hex;\n      });\n\n      if (!to) {\n          abortController.abort();\n          reject(new Error("No other account found"));\n          return;\n      }\n\n      const txId = await ledgerClient.transfer([\n          {\n              fromAccountId: accountId.bytes,\n              toAccountId: to.bytes,\n              amount: parseUnits(parseUnits(10, 2), 2),\n          },\n      ]);\n\n      console.log("Transfer sent, txId: ", txId);\n  })();\n});\n',dart:"\nfinal stream = await client.observeTransfers(\noperator: 'fis.m10.net',\naccounts: ['07800002000000000000000000000002'],\n);\nawait stream.timeout(const Duration(seconds: 10), onTimeout: (sink) {\nsink.close();\nfail('Did not observe message in time');\n}).any((transferResults) =>\n  transferResults.any((result) => result.txId == transaction.txId));\n",cli:"\nm10 observe transfers \\\n-i 07800002000000000000000000000002\n"}}),"\n",(0,s.jsx)(n.h1,{id:"-5"}),"\n",(0,s.jsx)("br",{}),"\n",(0,s.jsx)(n.admonition,{title:"HTTP/1",type:"info",children:(0,s.jsx)(n.p,{children:"To submit requests over HTTP/1 instead of HTTP/2 with the SDKs, use the http option."})})]})}function m(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}},788:(e,n,t)=>{t.d(n,{A:()=>c});t(6540);var r=t(8186),s=t(7430),a=t(4612),o=t(4767),i=t(4848);function c(e){let n=e.code.trim();return(0,i.jsx)("div",{className:"code",children:(0,i.jsxs)("div",{className:"code-inner",children:[(0,i.jsx)(r.Ay,{value:n,height:e.height||"auto",theme:s.IR,extensions:[o.gq[e.lang]],readOnly:"true"}),(0,i.jsx)(a.A,{code:n,className:"buttonGroup"})]})})}},4753:(e,n,t)=>{t.r(n),t.d(n,{ProductName:()=>l,assets:()=>c,contentTitle:()=>i,default:()=>f,frontMatter:()=>o,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"components/variables","title":"variables","description":"","source":"@site/docs/components/variables.mdx","sourceDirName":"components","slug":"/components/variables","permalink":"/components/variables","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{}}');var s=t(4848),a=t(8453);const o={},i=void 0,c={},l=()=>(0,s.jsx)("span",{children:"DRM"}),d=[];function u(e){return(0,s.jsx)(s.Fragment,{})}function f(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(u,{...e})}):u()}},8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>i});var r=t(6540);const s={},a=r.createContext(s);function o(e){const n=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),r.createElement(a.Provider,{value:n},e.children)}}}]);