"use strict";(self.webpackChunkproduct=self.webpackChunkproduct||[]).push([[148],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>g});var i=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,i,o=function(e,n){if(null==e)return{};var t,i,o={},a=Object.keys(e);for(i=0;i<a.length;i++)t=a[i],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)t=a[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var l=i.createContext({}),d=function(e){var n=i.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},c=function(e){var n=d(e.components);return i.createElement(l.Provider,{value:n},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},m=i.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=d(t),m=o,g=u["".concat(l,".").concat(m)]||u[m]||p[m]||a;return t?i.createElement(g,r(r({ref:n},c),{},{components:t})):i.createElement(g,r({ref:n},c))}));function g(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,r=new Array(a);r[0]=m;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s[u]="string"==typeof e?e:o,r[1]=s;for(var d=2;d<a;d++)r[d]=t[d];return i.createElement.apply(null,r)}return i.createElement.apply(null,t)}m.displayName="MDXCreateElement"},5624:(e,n,t)=>{t.d(n,{Z:()=>l});var i=t(7294),o=t(7685),a=t(7316),r=t(5291),s=t(3894);function l(e){let n=e.code.trim();return i.createElement("div",{className:"code"},i.createElement("div",{className:"code-inner"},i.createElement(o.ZP,{value:n,height:e.height||"auto",theme:a.CP,extensions:[s.ih[e.lang]],readOnly:"true"}),i.createElement(r.Z,{code:n,className:"buttonGroup"})))}},8480:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>g,frontMatter:()=>s,metadata:()=>d,toc:()=>u});var i=t(7462),o=(t(7294),t(3905)),a=t(5624),r=t(3894);const s={},l="Role Bindings",d={unversionedId:"api/role-bindings",id:"api/role-bindings",title:"Role Bindings",description:"Role bindings bind together roles, but what does that mean? In essence, they connect a public key to a role. If you want to grant a user permissions you first need a Role with those permissions. Then you need to grant their public-key access to those permissions using a role binding.",source:"@site/docs/api/role-bindings.mdx",sourceDirName:"api",slug:"/api/role-bindings",permalink:"/api/role-bindings",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"sidebar",previous:{title:"Banks",permalink:"/api/banks"},next:{title:"Roles",permalink:"/api/roles"}},c={},u=[{value:"Expressions",id:"expressions",level:3},{value:"Permissions on RBAC",id:"permissions-on-rbac",level:3},{value:"Model",id:"model",level:2},{value:"API Calls",id:"api-calls",level:2},{value:"Create",id:"create",level:3},{value:"Get",id:"get",level:3},{value:"List",id:"list",level:3},{value:"Update",id:"update",level:3},{value:"Delete",id:"delete",level:3}],p={toc:u},m="wrapper";function g(e){let{components:n,...t}=e;return(0,o.kt)(m,(0,i.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"role-bindings"},"Role Bindings"),(0,o.kt)("p",null,"Role bindings bind together roles, but what does that mean? In essence, they connect a public key to a role. If you want to grant a user permissions you first need a Role with those permissions. Then you need to grant their public-key access to those permissions using a role binding."),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},"Remember that all requests into the M10 API are signed with ",(0,o.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Elliptic_Curve_Digital_Signature_Algorithm"},"ECDSA")," private keys, that have a public key associated with them")),(0,o.kt)("p",null,'Each role binding has a few different fields, some fairly self-explanatory, and others not so much. Each role binding must have a unique id. We often use UUIDs as ids, though you can use any unique string of bytes. Role bindings also have names, which can be used for easy identification when querying. Finally, every role binding has a "role" field which is the id of the role you wish to bind. There are a few more fields that allow for complex behavior, each of which will have its own section.'),(0,o.kt)("h3",{id:"expressions"},"Expressions"),(0,o.kt)("p",null,"Expressions are a way of conditionally applying role bindings. If you are familiar with GCP's RBAC system then you will find these familiar. Each role binding supports a list of expressions, one for each collection the role binding operators on. Expressions are written in a small non-Turing complete language called ",(0,o.kt)("a",{parentName:"p",href:"https://docs.mql4.com/basis"},"MQL"),". MQL has a similar syntax to Rust, and will hopefully be familiar to users of most C-like languages. For more detail on MQL's syntax visit the ",(0,o.kt)("a",{parentName:"p",href:"https://docs.mql4.com/basis"},"design page on it"),". "),(0,o.kt)("p",null,"Expressions tend to be in forms like ",(0,o.kt)("inlineCode",{parentName:"p"},"request.timestamp <= 1660687573"),". This example expression could limit a role-binding so it only takes place "),(0,o.kt)("p",null,"Expressions are particularly useful when combined with ",(0,o.kt)("inlineCode",{parentName:"p"},"is_universal"),". ",(0,o.kt)("inlineCode",{parentName:"p"},"is_universal")," allows a role-binding to be used by any public key. You may have noticed that most of M10's models have a field called ",(0,o.kt)("inlineCode",{parentName:"p"},"owner"),". The owner field does not actually give any permissions. Instead, we often create role bindings with an expression like ",(0,o.kt)("inlineCode",{parentName:"p"},"document.owner == public_key"),"."),(0,o.kt)("h3",{id:"permissions-on-rbac"},"Permissions on RBAC"),(0,o.kt)("p",null,"Who watches the watcher? Or said less cryptically, how do we get permissions to create roles and role-bindings ourselves? Roles are fairly safe to allow anyone to create -- an operator may wish to restrict this functionality, but it's not necessary. Role-bindings on the other hand actually give public-keys permissions. There are two ways to grant access to creating a role-binding. The first is to simply grant the key a new role and binding with ",(0,o.kt)("inlineCode",{parentName:"p"},"create")," on the ",(0,o.kt)("inlineCode",{parentName:"p"},"role-bindings")," collection."),(0,o.kt)("p",null,"The second is a little more nuanced. M10's RBAC system allows you to create a role-binding to any role that is less permissive than a role you already have. So say you have access to your account, you can then create a new role-binding that gives someone else access to your account. This model gives users the autonomy to grant permissions to accounts they own or already have access to. For example, if a user has a new key they want to onboard to their account, they can simply create a new role-binding with that key."),(0,o.kt)("h2",{id:"model"},"Model"),(0,o.kt)(a.Z,{code:"\nmessage RoleBinding {\n  bytes id = 1;\n  string name = 2;\n  bytes role = 3;\n  repeated bytes subjects = 4;\n  repeated Expression expressions = 5;\n  bool is_universal = 6;\n  bytes owner = 7;\n}\n\nmessage Expression {\n  string collection = 1;\n  string expression = 2;\n}\n",lang:"protobuf",mdxType:"Highlight"}),(0,o.kt)("h2",{id:"api-calls"},"API Calls"),(0,o.kt)("h3",{id:"create"},"Create"),(0,o.kt)(r.ZP,{code:{rust:'\nclient.documents(\n    DocumentBuilder::default().insert(sdk::RoleBinding {\n      id: uuid::Uuid::new_v4().as_bytes().to_vec().into(),\n      name: "test-role-binding".to_string(),\n      role: uuid::Uuid::parse_str("72b79b75-5736-412d-a391-e7a190a36b15")?\n        .as_bytes()\n        .to_vec()\n        .into(), // The id of an already created role\n      subjects: vec![],\n      expressions: vec![sdk::Expression {\n          collection: "banks".to_string(),\n          expression: "document.owner == public_key".to_string() // make a role-binding that applies to owners of banks\n      }],\n      owner: client.signer().public_key().to_vec().into(),\n      is_universal: false\n    })\n).await?;\n',ts:" \nconst roleId = new sdk.DocumentId('role')\nconst roleBindingId = new sdk.DocumentId('role-binding')\nconst txId = await ledgerClient.documents(\n    new sdk.DocumentBuilder()\n        // Create a new role\n        .insert(\n            collections.Collection.Role, \n            new m10.sdk.Role({\n                id: roleId.toUint8Array(),\n                name: 'my role name',\n                owner: ledgerClient.getSigner().getPublicKey().toUint8Array()\n            })\n        )\n        // Create a role-binding for the role\n        .insert(\n            collections.Collection.RoleBinding,\n            new m10.sdk.RoleBinding({\n                id: roleBindingId.toUint8Array(),\n                name: 'my role binding name',\n                role: roleId.toUint8Array(),\n                subjects: [\n                    new sdk.PublicKey('wPf1jiymlaF6vdpTko5aBMcy1wnUc/KFvU8HlRgBqmY=').toUint8Array()\n                ],\n            }),\n        ),\n)\nconsole.log(`Created role-binding ${roleBindingId} in transaction ${txId}`)\n",dart:'\nclient.createRoleBinding(\n   name: "test-role-binding",\n   role: "72b79b755736412da391e7a190a36b15",\n   subjects: ["wPf1jiymlaF6vdpTko5aBMcy1wnUc/KFvU8HlRgBqmY="]\n   operator: "fis.m10.net",\n)\n',cli:'m10 create role-binding \\\n    --name "test-role-binding" \\\n    --role "72b79b75-5736-412d-a391-e7a190a36b15" \\\n    --owner "wPf1jiymlaF6vdpTko5aBMcy1wnUc/KFvU8HlRgBqmY=" \\\n    --subjects "wPf1jiymlaF6vdpTko5aBMcy1wnUc/KFvU8HlRgBqmY="\n'},mdxType:"Code"}),(0,o.kt)("h3",{id:"get"},"Get"),(0,o.kt)(r.ZP,{code:{rust:'\nclient.get_role_binding(uuid::Uuid::parse_str("72b79b75-5736-412d-a391-e7a190a36b15")?).await?;\n',ts:"\nconst roleBindingEntry = await ledgerClient.getRoleBindings(roleBindingId)\nconsole.log(`RoleBinding ${JSON.stringify(roleBindingEntry, null, 2)}`)\n",dart:'await client.getRoleBinding(\n  id: "72b79b75-5736-412d-a391-e7a190a36b15"\n  operator: "fis.m10.net",\n)',cli:'m10 get role-binding 72b79b75-5736-412d-a391-e7a190a36b15"'},mdxType:"Code"}),(0,o.kt)("h3",{id:"list"},"List"),(0,o.kt)(r.ZP,{code:{rust:'\nclient.list_role_bindings(\n    m10_sdk::PageBuilder::<uuid::Uuid, m10_sdk::NameFilter>::name("test-role-binding")\n).await?;\n',ts:"\nimport { RoleBinding } from \"m10-sdk/out/types\";\nconst print = (bindings: RoleBinding[]) => console.log(`RoleBindings[${bindings.length}]:\n${bindings.map(binding => JSON.stringify(binding, null, 2))}`)\n//  Filter by name\nconst roleBindingsByName = await client.listRoleBindings(\n    sdk.PageBuilder.byName('my role binding name')\n);\nprint(roleBindingsByName)\n// Using Pagination\nconst roleBindingsPaginated = await client.listRoleBindings(\n    sdk.PageBuilder.byName('my role binding name').lastId(roleBindingsByName[0].id).limit(1)\n)\nprint(roleBindingsPaginated)\n",dart:'await client.listRoleBinding(\n  name: "72b79b75-5736-412d-a391-e7a190a36b15", \n  operator: "fis.m10.net",\n)',cli:'m10 find role-binding --name "test-role-binding"'},mdxType:"Code"}),(0,o.kt)("h3",{id:"update"},"Update"),(0,o.kt)(r.ZP,{code:{rust:'\nclient.documents(DocumentBuilder::default().update(\n  m10_sdk::DocumentUpdate::new(uuid::Uuid::parse_str("72b79b75-5736-412d-a391-e7a190a36b15")?) \n  .subject(client.signer().public_key().to_vec())\n)).await?;\n',ts:"\nawait ledgerClient.documents(\n    new sdk.DocumentBuilder().update(\n        new sdk.collections.DocumentUpdate(\n            collections.Collection.RoleBinding,\n            new m10.sdk.RoleBinding({\n                id: roleBindingId.toUint8Array(),\n                name: 'new-name'\n            }),\n            // List of field changes\n            ['name']\n        )\n    )\n)\n",dart:'\nclient.updateRoleBinding(\n   id: "72b79b75-5736-412d-a391-e7a190a36b15"\n   subjects: ["wPf1jiymlaF6vdpTko5aBMcy1wnUc/KFvU8HlRgBqmY="]\n   operator: "fis.m10.net",\n)\n',cli:'m10 update role-binding "72b79b75-5736-412d-a391-e7a190a36b15" \\\n    --subjects "wPf1jiymlaF6vdpTko5aBMcy1wnUc/KFvU8HlRgBqmY="\n'},mdxType:"Code"}),(0,o.kt)("h3",{id:"delete"},"Delete"),(0,o.kt)(r.ZP,{code:{rust:'\nlet id = uuid::Uuid::parse_str("72b79b75-5736-412d-a391-e7a190a36b15")?.as_bytes().to_vec();\nclient.documents(DocumentBuilder::default().delete_custom(\n    m10_sdk::Collection::RoleBindings, id)).await?;\n',ts:"\nawait ledgerClient.documents(\n    new sdk.DocumentBuilder().delete(\n        collections.Collection.RoleBinding,\n        new m10.sdk.RoleBinding({ id: roleBindingId.toUint8Array() })\n    )\n)\n",dart:"placeholder",cli:"\nm10 delete role-binding 6aa51062-452b-482a-aff0-3e7df1a1aae9\n"},mdxType:"Code"}))}g.isMDXComponent=!0}}]);