"use strict";(self.webpackChunkproduct=self.webpackChunkproduct||[]).push([[49],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>k});var o=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function c(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=o.createContext({}),s=function(e){var n=o.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):c(c({},n),e)),t},u=function(e){var n=s(e.components);return o.createElement(l.Provider,{value:n},e.children)},d="mdxType",_={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},b=o.forwardRef((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,l=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),d=s(t),b=r,k=d["".concat(l,".").concat(b)]||d[b]||_[b]||a;return t?o.createElement(k,c(c({ref:n},u),{},{components:t})):o.createElement(k,c({ref:n},u))}));function k(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,c=new Array(a);c[0]=b;var i={};for(var l in n)hasOwnProperty.call(n,l)&&(i[l]=n[l]);i.originalType=e,i[d]="string"==typeof e?e:r,c[1]=i;for(var s=2;s<a;s++)c[s]=t[s];return o.createElement.apply(null,c)}return o.createElement.apply(null,t)}b.displayName="MDXCreateElement"},5624:(e,n,t)=>{t.d(n,{Z:()=>l});var o=t(7294),r=t(7685),a=t(7316),c=t(5291),i=t(3894);function l(e){let n=e.code.trim();return o.createElement("div",{className:"code"},o.createElement("div",{className:"code-inner"},o.createElement(r.ZP,{value:n,height:e.height||"auto",theme:a.C,extensions:[i.ih[e.lang]],readOnly:"true"}),o.createElement(c.Z,{code:n,className:"buttonGroup"})))}},4235:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>i,default:()=>_,frontMatter:()=>c,metadata:()=>l,toc:()=>u});var o=t(7462),r=(t(7294),t(3905)),a=t(3894);t(5624);const c={sidebar_position:3},i="Quickstart",l={unversionedId:"quickstart",id:"quickstart",title:"Quickstart",description:'This guide walks through how to use the M10 SDK & CLI to create a new digital currency "My Bucks", currency code MYB. We will also create two bank issuance accounts, a customer account for each bank, issue funds and transfer between them. You will be assuming the role of the each participant throughout the process to better understand how the M10 Platform serves as an API for interaction between all network members.',source:"@site/docs/quickstart.mdx",sourceDirName:".",slug:"/quickstart",permalink:"/quickstart",draft:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"sidebar",previous:{title:"Overview",permalink:"/overview"},next:{title:"API Docs",permalink:"/category/api-docs"}},s={},u=[{value:"Before we start",id:"before-we-start",level:2},{value:"Following setup will be necessary for everything to work",id:"following-setup-will-be-necessary-for-everything-to-work",level:4},{value:"As the Central Bank",id:"as-the-central-bank",level:2},{value:"Create a new digital currency",id:"create-a-new-digital-currency",level:3},{value:"Output",id:"output",level:4},{value:"Create the root account for your new digital currency associated with your central bank public key:",id:"create-the-root-account-for-your-new-digital-currency-associated-with-your-central-bank-public-key",level:4},{value:"Create the role and role-binding",id:"create-the-role-and-role-binding",level:4},{value:"Create issuance accounts for Bank One and Bank Two",id:"create-issuance-accounts-for-bank-one-and-bank-two",level:3},{value:"Bank One",id:"bank-one",level:4},{value:"Bank Two",id:"bank-two",level:4},{value:"Issue funds to Bank One",id:"issue-funds-to-bank-one",level:3},{value:"Transfer information",id:"transfer-information",level:4},{value:"Output",id:"output-1",level:4},{value:"Check the status of our new currency accounts thus far",id:"check-the-status-of-our-new-currency-accounts-thus-far",level:3},{value:"Output",id:"output-2",level:4},{value:"As the Commercial Bank",id:"as-the-commercial-bank",level:2},{value:"As Bank One, find my issuance account",id:"as-bank-one-find-my-issuance-account",level:3},{value:"Output",id:"output-3",level:4},{value:"As Bank One, create a customer account for Alice",id:"as-bank-one-create-a-customer-account-for-alice",level:3},{value:"Create role and role-binding",id:"create-role-and-role-binding",level:4},{value:"Create ledger-account for Alice in bank-one",id:"create-ledger-account-for-alice-in-bank-one",level:4},{value:"As Bank One, issue funds to Alice&#39;s customer account",id:"as-bank-one-issue-funds-to-alices-customer-account",level:3},{value:"As Bank Two, create a customer account for Bob",id:"as-bank-two-create-a-customer-account-for-bob",level:3},{value:"Roles and role-binding need to be created for bank-two just like it was done for bank-one:",id:"roles-and-role-binding-need-to-be-created-for-bank-two-just-like-it-was-done-for-bank-one",level:4},{value:"Create ledger-account for Bob in bank-two",id:"create-ledger-account-for-bob-in-bank-two",level:4},{value:"As Alice, send some of our new digital currency to Bob",id:"as-alice-send-some-of-our-new-digital-currency-to-bob",level:2},{value:"Check current balance",id:"check-current-balance",level:3},{value:"Output",id:"output-4",level:4},{value:"Transfer funds to Bob",id:"transfer-funds-to-bob",level:3},{value:"Look up recent transfers to confirm delivery",id:"look-up-recent-transfers-to-confirm-delivery",level:3},{value:"Output",id:"output-5",level:4},{value:"Check balance again to confirm debit of funds",id:"check-balance-again-to-confirm-debit-of-funds",level:3},{value:"Output",id:"output-6",level:4},{value:"As Bob, confirm receipt of funds",id:"as-bob-confirm-receipt-of-funds",level:2},{value:"Check balance to confirm credit of funds",id:"check-balance-to-confirm-credit-of-funds",level:3}],d={toc:u};function _(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,o.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"quickstart"},"Quickstart"),(0,r.kt)("p",null,'This guide walks through how to use the M10 SDK & CLI to create a new digital currency "My Bucks", currency code MYB. We will also create two bank issuance accounts, a customer account for each bank, issue funds and transfer between them. You will be assuming the role of the each participant throughout the process to better understand how the M10 Platform serves as an API for interaction between all network members. '),(0,r.kt)("p",null,"You will:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"create a new currency and onboard banks to new issuance accounts"),(0,r.kt)("li",{parentName:"ul"},"create new cutomer accounts for each bank"),(0,r.kt)("li",{parentName:"ul"},"send a transfer of funds between the two customer accounts at different banks")),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"Before getting started, you'll need root issuance account issued to you by M10 and the associated private key. You'll also need to grab the latest SDK version from ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/m10io/sdk"},"Github"),". The REPL provided throughout this guide already has these provided for your easy exploration.")),(0,r.kt)("h2",{id:"before-we-start"},"Before we start"),(0,r.kt)("h4",{id:"following-setup-will-be-necessary-for-everything-to-work"},"Following setup will be necessary for everything to work"),(0,r.kt)(a.ZP,{code:{cli:"\nexport LEDGER_ADDR=...\nexport OPERATOR_KEY_FILE=...\n",ts:'\nimport { utils, signer, helpers, client, collections } from "m10-sdk";\nimport { m10 } from  "m10-sdk/protobufs";\nconst LEDGER_URL = "...";\nconst OPERATOR_KEY = "...";\nconst ledgerClient = new client.LedgerClient(LEDGER_URL, true);\nconst operatorSigner = signer.CryptoSigner.getSignerFromPkcs8V2(OPERATOR_KEY);\n',rust:'\nuse m10_sdk::{\n    AccountBuilder, DocumentBuilder, TransferBuilder, StepBuilder,\n    Collection, Ed25519, M10Client, Signer, sdk, LedgerClient, TxnFilter, TransferFilter,\n};\nuse m10_sdk::client::Channel;\nuse m10_sdk::prost::bytes::Bytes;\nuse uuid::Uuid;\nuse std::time::Duration;\nlet ledger_addr = "...";\nlet operator_key_file = "...";\nlet operator_channel = Channel::from_shared(ledger_addr).unwrap()\n    .keep_alive_while_idle(true)\n    .http2_keep_alive_interval(Duration::from_secs(30))\n    .timeout(Duration::from_secs(30))\n    .connect_lazy()\n    .unwrap();\nlet operator_signer = Ed25519::load_key_pair(operator_key_file).unwrap();\nlet operator_client = M10Client::new(operator_signer, operator_channel);\n'},mdxType:"Code"}),(0,r.kt)("h2",{id:"as-the-central-bank"},"As the Central Bank"),(0,r.kt)("p",null,"Everything starts with the central bank using the M10 platform to create and issue a new digital currency. In this section you will create the currency,\nthe commercial bank accounts used to onboard new banks to the platform, and conduct a new issuance to them."),(0,r.kt)("img",{src:"/img/getting-started-cb-accounts.svg",style:{display:"block",margin:"auto",width:"90%"}}),(0,r.kt)("br",null),(0,r.kt)("h3",{id:"create-a-new-digital-currency"},"Create a new digital currency"),(0,r.kt)("p",null,"You'll need your central-bank key pair in the PKCS8 format. To generate a new key-pair, enter the following command"),(0,r.kt)(a.ZP,{code:{cli:'\nexport CB_KEY_FILE="central-bank.pkcs8"\nexport CB_PUBLIC_KEY=$(m10 create key-pair $CB_KEY_FILE)\nm10 get public-key $CB_KEY_FILE\n',ts:'\nconst centralBankSigner = CryptoSigner.generateKeyPair();\nconsole.log("public key is: ", centralBankSigner.getPublicKey());\n',rust:'\nlet (central_bank_kp, central_bank_signer) = Ed25519::new_key_pair_exportable().unwrap();\nprintln!("public key is: {}", base64::encode(central_bank_signer.public_key()));\nprintln!("key pair is: {}", base64::encode(central_bank_kp));\n'},mdxType:"Code"}),(0,r.kt)("h4",{id:"output"},"Output"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'created key pair file: "central-bank.pkcs8"\npublic key is:\n"hOJIkyqJ7/dUStWzcgj+afT1dBvJKczPvl5q70MpMaY="\n')),(0,r.kt)("h4",{id:"create-the-root-account-for-your-new-digital-currency-associated-with-your-central-bank-public-key"},"Create the root account for your new digital currency associated with your central bank public key:"),(0,r.kt)(a.ZP,{code:{cli:"\nexport MYB_ROOT_ACCOUNT=$(\n    m10 --server $LEDGER_ADDR --key-file $OPERATOR_KEY_FILE create ledger-account \\\n        --owner $CB_PUBLIC_KEY \\\n        --issuance \\\n        --public-name 'MYB' \\\n        --name 'MYBUCKS ROOT' \\\n        --code MYB \\\n        --decimals 2\n)\necho $MYB_ROOT_ACCOUNT\n",ts:'\nconst instrument: m10.sdk.transaction.IInstrument = {\n    code: "MYB",\n    decimalPlaces: 2,\n    description: "MYBUCKS ROOT",\n};\nconst mybRootLedgerAccountId = await helpers.accounts.createLedgerAccount(\n    ledgerClient,\n    operatorSigner, // signer\n    undefined,      // parentId\n    instrument,\n    false,          // frozen\n    true,           // issuance\n);\nconst mybRootAccountId = await helpers.accounts.createAccount(\n    ledgerClient,\n    operatorSigner,                     // signer\n    mybRootLedgerAccountId,             // accountId\n    "MYBUCKS ROOT",                     // name\n    centralBankSigner.getPublicKey(),   // owner\n);\nconsole.log("Created accounts resource: ", mybRootAccountId);\n',rust:'\nlet myb_root_account_response = operator_client.create_account(\n    AccountBuilder::new()\n        .issuance(true)\n        .frozen(false)\n        .instrument("MYB".to_string(), 2, Some("MYBUCKS ROOT"))\n).await.unwrap();\nlet myb_root_account_id = myb_root_account_response.1;\nprintln!("Created accounts resource: {:?}", myb_root_account_id);\n'},mdxType:"Code"}),(0,r.kt)("h4",{id:"create-the-role-and-role-binding"},"Create the role and role-binding"),(0,r.kt)("p",null,"It's necessary to grant the permissions to your central bank public key needed to create issuance accounts."),(0,r.kt)(a.ZP,{code:{cli:"\nexport CB_ROLE_ID=$(\n    m10 --server $LEDGER_ADDR --key-file $OPERATOR_KEY_FILE create role \\\n        --name central-bank-admin \\\n        --rule 'rule -c accounts -v Create' \\\n        --rule \"rule -c ledger-accounts -v Create -i $MYB_ROOT_ACCOUNT\" \\\n        --rule 'rule -c ledger-accounts -v Transact' \\\n        --rule 'rule -c roles -v Create' \\\n        --rule 'rule -c role-bindings -v Create'\n)\necho $CB_ROLE_ID\nm10 --server $LEDGER_ADDR --key-file $OPERATOR_KEY_FILE create role-binding \\\n    --id $CB_ROLE_ID \\\n    --name central-bank-admin \\\n    --role $CB_ROLE_ID \\\n    --subjects $CB_PUBLIC_KEY\n",ts:'\nconst cbAdminRoleId = await helpers.roleBindings.createRole(ledgerClient, operatorSigner, {\n    name: "central-bank-admin",\n    rules: [\n        {\n            collection: collections.Collection.Account,\n            verbs: [ m10.sdk.Rule.Verb.CREATE ],\n        },\n        {\n            collection: collections.Collection.LedgerAccount,\n            verbs: [ m10.sdk.Rule.Verb.CREATE ],\n            instanceKeys: [ { bytesValue: utils.getUint8ArrayFromAccountId(mybRootAccountId) } ],\n        },\n        {\n            collection: collections.Collection.LedgerAccount,\n            verbs: [ m10.sdk.Rule.Verb.TRANSACT ],\n        },\n        {\n            collection: collections.Collection.Role,\n            verbs: [ m10.sdk.Rule.Verb.CREATE ],\n        },\n        {\n            collection: collections.Collection.RoleBinding,\n            verbs: [ m10.sdk.Rule.Verb.CREATE ],\n        },\n    ]\n});\nconsole.log("Created roles resource: ", cbAdminRoleId);\nconst cbAdminRoleBindingId = await helpers.roleBindings.createRoleBinding(ledgerClient, operatorSigner, {\n    id: utils.getUint8ArrayFromDocumentId(cbAdminRoleId),\n    name: "central-bank-admin",\n    role: utils.getUint8ArrayFromDocumentId(cbAdminRoleId),\n    subjects: [ centralBankSigner.getPublicKey() ],\n});\nconsole.log("Created role-bindings resource: ", cbAdminRoleBindingId);\n',rust:'\nlet central_bank_role_id = Uuid::new_v4();\noperator_client\n    .documents(\n        DocumentBuilder::default()\n            .insert(sdk::Account {\n                owner: central_bank_signer.public_key().to_vec(),\n                profile_image_url: String::new(),\n                name: "MYBUCKS ROOT".to_string(),\n                public_name: "MYB".to_string(),\n                id: myb_root_account_id.to_vec(),\n            })\n            .insert(sdk::Role {\n                id: Bytes::copy_from_slice(central_bank_role_id.as_bytes()),\n                owner: Bytes::copy_from_slice(central_bank_signer.public_key()),\n                name: "central-bank-admin".to_string(),\n                rules: vec![\n                    sdk::Rule {\n                        collection: Collection::Accounts.to_string(),\n                        instance_keys: vec![],\n                        verbs: vec![sdk::rule::Verb::Create as i32],\n                    },\n                    sdk::Rule {\n                        collection: "ledger-accounts".to_string(),\n                        instance_keys: vec![sdk::Value {\n                            value: Some(sdk::value::Value::BytesValue(\n                                Bytes::copy_from_slice(&myb_root_account_id.to_be_bytes()),\n                            )),\n                        }],\n                        verbs: vec![sdk::rule::Verb::Create as i32],\n                    },\n                    sdk::Rule {\n                        collection: "ledger-accounts".to_string(),\n                        instance_keys: vec![],\n                        verbs: vec![sdk::rule::Verb::Transact as i32],\n                    },\n                    sdk::Rule {\n                        collection: Collection::Roles.to_string(),\n                        instance_keys: vec![],\n                        verbs: vec![sdk::rule::Verb::Create as i32],\n                    },\n                    sdk::Rule {\n                        collection: Collection::RoleBindings.to_string(),\n                        instance_keys: vec![],\n                        verbs: vec![sdk::rule::Verb::Create as i32],\n                    },\n                ],\n            })\n            .insert(sdk::RoleBinding {\n                id: Bytes::copy_from_slice(central_bank_role_id.as_bytes()),\n                owner: Bytes::copy_from_slice(central_bank_signer.public_key()),\n                name: "central-bank-admin".to_string(),\n                role: Bytes::copy_from_slice(central_bank_role_id.as_bytes()),\n                subjects: vec![Bytes::copy_from_slice(central_bank_signer.public_key())],\n                expressions: vec![],\n                is_universal: false,\n            }),\n    )\n    .await\n    .unwrap();\nprintln!("Created roles resource: {:?}", central_bank_role_id);\nprintln!("Created role-bindings resource: {:?}", central_bank_role_id);\n'},mdxType:"Code"}),(0,r.kt)("h3",{id:"create-issuance-accounts-for-bank-one-and-bank-two"},"Create issuance accounts for Bank One and Bank Two"),(0,r.kt)("p",null,"The process for creating bank keys and issuance accounts is similar to the above. Using the provided public keys for Bank One and Bank Two, we create issuance accounts for their commercial use, and grant them permissions via new roles and role bindings."),(0,r.kt)("h4",{id:"bank-one"},"Bank One"),(0,r.kt)(a.ZP,{code:{cli:"\nexport BANKONE_KEY_FILE=\"bank-one.pkcs8\"\nexport BANKONE_PUBLIC_KEY=$(m10 create key-pair $BANKONE_KEY_FILE)\necho $BANKONE_PUBLIC_KEY\nexport BANKONE_ACCOUNT=$(\n    m10 --server $LEDGER_ADDR --key-file $CB_KEY_FILE create ledger-account \\\n        --owner $BANKONE_PUBLIC_KEY \\\n        --issuance \\\n        --public-name 'Bank One MYB Issuance Account' \\\n        --name 'Bank One MYB' \\\n        --parent-account $MYB_ROOT_ACCOUNT\n)\necho $BANKONE_ACCOUNT\nexport BANKONE_ROLE_ID=$(\n    m10 --server $LEDGER_ADDR --key-file $CB_KEY_FILE create role \\\n        --name bankone-admin \\\n        --rule 'rule -c accounts -v Create' \\\n        --rule \"rule -c ledger-accounts -v Create -i $BANKONE_ACCOUNT\" \\\n        --rule 'rule -c ledger-accounts -v Transact' \\\n        --rule 'rule -c roles -v Create' \\\n        --rule 'rule -c role-bindings -v Create'\n)\necho $BANKONE_ROLE_ID\nm10 --server $LEDGER_ADDR --key-file $CB_KEY_FILE create role-binding \\\n    --id $BANKONE_ROLE_ID \\\n    --name 'bankone-admin' \\\n    --role $BANKONE_ROLE_ID \\\n    --subjects $BANKONE_PUBLIC_KEY\n",ts:'\nconst bankOneSigner = signer.CryptoSigner.generateKeyPair();\nconsole.log("public key is: ", utils.getPublicKeyFromUint8Array( bankOneSigner.getPublicKey() ));\nconst bankOneLedgerAccountId = await helpers.accounts.createLedgerAccount(\n    ledgerClient,\n    centralBankSigner,  // signer\n    mybRootAccountId,   // parentId\n    undefined,          // instrument\n    false,              // frozen\n    true,               // issuance\n);\nconst bankOneAccountId = await helpers.accounts.createAccount(\n    ledgerClient,\n    centralBankSigner,                  // signer\n    bankOneLedgerAccountId,             // accountId\n    "Bank One MYB",                     // name\n    bankOneSigner.getPublicKey(),       // owner\n);\nconsole.log("Created accounts resource: ", bankOneAccountId);\nconst bankOneAdminRoleId = await helpers.roleBindings.createRole(ledgerClient, centralBankSigner, {\n    name: "bankone-admin",\n    rules: [\n        {\n            collection: collections.Collection.Account,\n            verbs: [ m10.sdk.Rule.Verb.CREATE ],\n        },\n        {\n            collection: collections.Collection.LedgerAccount,\n            verbs: [ m10.sdk.Rule.Verb.CREATE ],\n            instanceKeys: [ { bytesValue: utils.getUint8ArrayFromAccountId(bankOneAccountId) } ],\n        },\n        {\n            collection: collections.Collection.LedgerAccount,\n            verbs: [ m10.sdk.Rule.Verb.TRANSACT ],\n        },\n        {\n            collection: collections.Collection.Role,\n            verbs: [ m10.sdk.Rule.Verb.CREATE ],\n        },\n        {\n            collection: collections.Collection.RoleBinding,\n            verbs: [ m10.sdk.Rule.Verb.CREATE ],\n        },\n    ]\n});\nconsole.log("Created roles resource: ", bankOneAdminRoleId);\nconst bankOneAdminRoleBindingId = await helpers.roleBindings.createRoleBinding(ledgerClient, centralBankSigner, {\n    id: utils.getUint8ArrayFromDocumentId(bankOneAdminRoleId),\n    name: "bankone-admin",\n    role: utils.getUint8ArrayFromDocumentId(bankOneAdminRoleId),\n    subjects: [ bankOneSigner.getPublicKey() ],\n});\nconsole.log("Created role-bindings resource: ", bankOneAdminRoleBindingId);\n',rust:'\nlet central_bank_channel = Channel::from_shared(ledger_addr).unwrap()\n    .keep_alive_while_idle(true)\n    .http2_keep_alive_interval(Duration::from_secs(30))\n    .timeout(Duration::from_secs(30))\n    .connect_lazy()\n    .unwrap();\nlet central_bank_client = M10Client::new(central_bank_signer, central_bank_channel);\nlet (bankone_kp, bankone_signer) = Ed25519::new_key_pair_exportable().unwrap();\nprintln!("public key is: {}", base64::encode(bankone_signer.public_key()));\nprintln!("key pair is: {}", base64::encode(bankone_kp.clone()));\nlet bankone_account_response = central_bank_client.create_account(\n    AccountBuilder::parent(myb_root_account_id)\n        .issuance(true)\n        .frozen(false)\n).await.unwrap();\nlet bankone_account_id = bankone_account_response.1;\nprintln!("Created accounts resource: {:?}", bankone_account_id);\nlet bankone_role_id = Uuid::new_v4();\ncentral_bank_client\n    .documents(\n        DocumentBuilder::default()\n            .insert(sdk::Account {\n                owner: bankone_signer.public_key().to_vec(),\n                profile_image_url: String::new(),\n                name: "Bank One MYB".to_string(),\n                public_name: "Bank One MYB Issuance Account".to_string(),\n                id: bankone_account_id.to_vec(),\n            })\n            .insert(sdk::Role {\n                id: Bytes::copy_from_slice(bankone_role_id.as_bytes()),\n                owner: Bytes::copy_from_slice(bankone_signer.public_key()),\n                name: "bankone-admin".to_string(),\n                rules: vec![\n                    sdk::Rule {\n                        collection: Collection::Accounts.to_string(),\n                        instance_keys: vec![],\n                        verbs: vec![sdk::rule::Verb::Create as i32],\n                    },\n                    sdk::Rule {\n                        collection: "ledger-accounts".to_string(),\n                        instance_keys: vec![sdk::Value {\n                            value: Some(sdk::value::Value::BytesValue(\n                                Bytes::copy_from_slice(&bankone_account_id.to_be_bytes()),\n                            )),\n                        }],\n                        verbs: vec![sdk::rule::Verb::Create as i32],\n                    },\n                    sdk::Rule {\n                        collection: "ledger-accounts".to_string(),\n                        instance_keys: vec![],\n                        verbs: vec![sdk::rule::Verb::Transact as i32],\n                    },\n                    sdk::Rule {\n                        collection: Collection::Roles.to_string(),\n                        instance_keys: vec![],\n                        verbs: vec![sdk::rule::Verb::Create as i32],\n                    },\n                    sdk::Rule {\n                        collection: Collection::RoleBindings.to_string(),\n                        instance_keys: vec![],\n                        verbs: vec![sdk::rule::Verb::Create as i32],\n                    },\n                ],\n            })\n            .insert(sdk::RoleBinding {\n                id: Bytes::copy_from_slice(bankone_role_id.as_bytes()),\n                owner: Bytes::copy_from_slice(bankone_signer.public_key()),\n                name: "bankone-admin".to_string(),\n                role: Bytes::copy_from_slice(bankone_role_id.as_bytes()),\n                subjects: vec![Bytes::copy_from_slice(bankone_signer.public_key())],\n                expressions: vec![],\n                is_universal: false,\n            }),\n    )\n    .await\n    .unwrap();\nprintln!("Created roles resource: {:?}", bankone_role_id);\nprintln!("Created role-bindings resource: {:?}", bankone_role_id);\n'},mdxType:"Code"}),(0,r.kt)("h4",{id:"bank-two"},"Bank Two"),(0,r.kt)(a.ZP,{code:{cli:"\nexport BANKTWO_KEY_FILE=\"bank-two.pkcs8\"\nexport BANKTWO_PUBLIC_KEY=$(m10 create key-pair $BANKTWO_KEY_FILE)\necho $BANKTWO_PUBLIC_KEY\nexport BANKTWO_ACCOUNT=$(\n    m10 --server $LEDGER_ADDR --key-file $CB_KEY_FILE create ledger-account \\\n        --owner $BANKTWO_PUBLIC_KEY \\\n        --issuance \\\n        --public-name 'Bank Two MYB Issuance Account' \\\n        --name 'Bank Two MYB' \\\n        --parent-account $MYB_ROOT_ACCOUNT\n)\necho $BANKTWO_ACCOUNT\nexport BANKTWO_ROLE_ID=$(\n    m10 --server $LEDGER_ADDR --key-file $CB_KEY_FILE create role \\\n        --name banktwo-admin \\\n        --rule 'rule -c accounts -v Create' \\\n        --rule \"rule -c ledger-accounts -v Create -i $BANKTWO_ACCOUNT\" \\\n        --rule 'rule -c ledger-accounts -v Transact' \\\n        --rule 'rule -c roles -v Create' \\\n        --rule 'rule -c role-bindings -v Create'\n)\necho $BANKTWO_ROLE_ID\nm10 --server $LEDGER_ADDR --key-file $CB_KEY_FILE create role-binding \\\n    --id $BANKTWO_ROLE_ID \\\n    --name 'banktwo-admin' \\\n    --role $BANKTWO_ROLE_ID \\\n    --subjects $BANKTWO_PUBLIC_KEY\n",ts:'\nconst bankTwoSigner = signer.CryptoSigner.generateKeyPair();\nconsole.log("public key is: ", utils.getPublicKeyFromUint8Array( bankTwoSigner.getPublicKey() ));\nconst bankTwoLedgerAccountId = await helpers.accounts.createLedgerAccount(\n    ledgerClient,\n    centralBankSigner,  // signer\n    mybRootAccountId,   // parentId\n    undefined,          // instrument\n    false,              // frozen\n    true,               // issuance\n);\nconst bankTwoAccountId = await helpers.accounts.createAccount(\n    ledgerClient,\n    centralBankSigner,                  // signer\n    bankTwoLedgerAccountId,             // accountId\n    "Bank Two MYB",                     // name\n    bankTwoSigner.getPublicKey(),       // owner\n);\nconsole.log("Created accounts resource: ", bankTwoAccountId);\nconst bankTwoAdminRoleId = await helpers.roleBindings.createRole(ledgerClient, centralBankSigner, {\n    name: "banktwo-admin",\n    rules: [\n        {\n            collection: collections.Collection.Account,\n            verbs: [ m10.sdk.Rule.Verb.CREATE ],\n        },\n        {\n            collection: collections.Collection.LedgerAccount,\n            verbs: [ m10.sdk.Rule.Verb.CREATE ],\n            instanceKeys: [ { bytesValue: utils.getUint8ArrayFromAccountId(bankTwoAccountId) } ],\n        },\n        {\n            collection: collections.Collection.LedgerAccount,\n            verbs: [ m10.sdk.Rule.Verb.TRANSACT ],\n        },\n        {\n            collection: collections.Collection.Role,\n            verbs: [ m10.sdk.Rule.Verb.CREATE ],\n        },\n        {\n            collection: collections.Collection.RoleBinding,\n            verbs: [ m10.sdk.Rule.Verb.CREATE ],\n        },\n    ]\n});\nconsole.log("Created roles resource: ", bankTwoAdminRoleId);\nconst bankTwoAdminRoleBindingId = await helpers.roleBindings.createRoleBinding(ledgerClient, centralBankSigner, {\n    id: utils.getUint8ArrayFromDocumentId(bankTwoAdminRoleId),\n    name: "banktwo-admin",\n    role: utils.getUint8ArrayFromDocumentId(bankTwoAdminRoleId),\n    subjects: [ bankTwoSigner.getPublicKey() ],\n});\nconsole.log("Created role-bindings resource: ", bankTwoAdminRoleBindingId);\n',rust:'\nlet (banktwo_kp, banktwo_signer) = Ed25519::new_key_pair_exportable().unwrap();\nprintln!("public key is: {}", base64::encode(banktwo_signer.public_key()));\nprintln!("key pair is: {}", base64::encode(banktwo_kp));\nlet banktwo_account_response = central_bank_client.create_account(\n    AccountBuilder::parent(myb_root_account_id)\n        .issuance(true)\n        .frozen(false)\n).await.unwrap();\nlet banktwo_account_id = banktwo_account_response.1;\nprintln!("Created accounts resource: {:?}", banktwo_account_id);\nlet banktwo_role_id = Uuid::new_v4();\ncentral_bank_client\n    .documents(\n        DocumentBuilder::default()\n            .insert(sdk::Account {\n                owner: banktwo_signer.public_key().to_vec(),\n                profile_image_url: String::new(),\n                name: "Bank Two MYB".to_string(),\n                public_name: "Bank Two MYB Issuance Account".to_string(),\n                id: banktwo_account_id.to_vec(),\n            })\n            .insert(sdk::Role {\n                id: Bytes::copy_from_slice(banktwo_role_id.as_bytes()),\n                owner: Bytes::copy_from_slice(banktwo_signer.public_key()),\n                name: "banktwo-admin".to_string(),\n                rules: vec![\n                    sdk::Rule {\n                        collection: Collection::Accounts.to_string(),\n                        instance_keys: vec![],\n                        verbs: vec![sdk::rule::Verb::Create as i32],\n                    },\n                    sdk::Rule {\n                        collection: "ledger-accounts".to_string(),\n                        instance_keys: vec![sdk::Value {\n                            value: Some(sdk::value::Value::BytesValue(\n                                Bytes::copy_from_slice(&banktwo_account_id.to_be_bytes()),\n                            )),\n                        }],\n                        verbs: vec![sdk::rule::Verb::Create as i32],\n                    },\n                    sdk::Rule {\n                        collection: "ledger-accounts".to_string(),\n                        instance_keys: vec![],\n                        verbs: vec![sdk::rule::Verb::Transact as i32],\n                    },\n                    sdk::Rule {\n                        collection: Collection::Roles.to_string(),\n                        instance_keys: vec![],\n                        verbs: vec![sdk::rule::Verb::Create as i32],\n                    },\n                    sdk::Rule {\n                        collection: Collection::RoleBindings.to_string(),\n                        instance_keys: vec![],\n                        verbs: vec![sdk::rule::Verb::Create as i32],\n                    },\n                ],\n            })\n            .insert(sdk::RoleBinding {\n                id: Bytes::copy_from_slice(banktwo_role_id.as_bytes()),\n                owner: Bytes::copy_from_slice(banktwo_signer.public_key()),\n                name: "banktwo-admin".to_string(),\n                role: Bytes::copy_from_slice(banktwo_role_id.as_bytes()),\n                subjects: vec![Bytes::copy_from_slice(banktwo_signer.public_key())],\n                expressions: vec![],\n                is_universal: false,\n            }),\n    )\n    .await\n    .unwrap();\nprintln!("Created roles resource: {:?}", banktwo_role_id);\nprintln!("Created role-bindings resource: {:?}", banktwo_role_id);\n'},mdxType:"Code"}),(0,r.kt)("h3",{id:"issue-funds-to-bank-one"},"Issue funds to Bank One"),(0,r.kt)("p",null,"To issue funds we need to create a transfer from root account to bank-one:"),(0,r.kt)(a.ZP,{code:{cli:"\nexport FUNDS_TRANSFER_ID=$(\n    m10 --server $LEDGER_ADDR --key-file $BANKONE_KEY_FILE create transfer \\\n        --from-account $MYB_ROOT_ACCOUNT \\\n        --to-account $BANKONE_ACCOUNT \\\n        --amount 100000 \\\n        --memo Funds\n)\necho $FUNDS_TRANSFER_ID\n",ts:'\nconst issueFundsToBankOne = await ledgerClient.transfer(bankOneSigner, [\n    {\n        fromAccountId: utils.getUint8ArrayFromAccountId(mybRootAccountId),\n        toAccountId: utils.getUint8ArrayFromAccountId(bankOneAccountId),\n        amount: 100000,\n        metadata: [ utils.convertMemoToAny({ plaintext: "Funds" }) ],\n    }\n]);\nconsole.log("created transfer: ", issueFundsToBankOne.txId);\n',rust:'\nlet bankone_channel = Channel::from_shared(ledger_addr).unwrap()\n    .keep_alive_while_idle(true)\n    .http2_keep_alive_interval(Duration::from_secs(30))\n    .timeout(Duration::from_secs(30))\n    .connect_lazy()\n    .unwrap();\nlet bankone_client = M10Client::new(bankone_signer, bankone_channel);\nlet issue_funds_to_bankone = TransferBuilder::new()\n    .step(\n        StepBuilder::new(myb_root_account_id, bankone_account_id, 100_000)\n            .metadata(sdk::Memo { plaintext: "Funds".to_string() })\n    );\nlet issue_funds_to_bankone_tx_id = bankone_client.transfer(issue_funds_to_bankone).await.unwrap();\nprintln!("created transfer: {:?}", issue_funds_to_bankone_tx_id);\n'},mdxType:"Code"}),(0,r.kt)("h4",{id:"transfer-information"},"Transfer information"),(0,r.kt)("p",null,"It's possible to get information about the transfer created above by using an id from the output:"),(0,r.kt)(a.ZP,{code:{cli:"\nm10 --server $LEDGER_ADDR --key-file $BANKONE_KEY_FILE get transfer $FUNDS_TRANSFER_ID\n",ts:"\nconst issueFundsToBankOneGetTransfer = await ledgerClient.getTransfer(bankOneSigner, {\n    txId: issueFundsToBankOneResponse.txId,\n});\nconsole.log(issueFundsToBankOneGetTransfer);\n",rust:'\nlet issue_funds_to_bankone_info = bankone_client.get_transfer(issue_funds_to_bankone_tx_id).await.unwrap();\nprintln!("{:?}", issue_funds_to_bankone_info);\n'},mdxType:"Code"}),(0,r.kt)("h4",{id:"output-1"},"Output"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'(\n    tx_id: 129630000,\n    timestamp: "2022-08-25 10:39:55.210130",\n    failed: false,\n    steps: [\n        (\n            from_account_id: "0c000000000000000000000000000000",\n            to_account_id: "0c800000000000000000000000000002",\n            amount: 100000,\n            metadata: [\n                Memo((plaintext:"Funds")),\n            ],\n        ),\n    ],\n    state: Accepted,\n)\n')),(0,r.kt)("h3",{id:"check-the-status-of-our-new-currency-accounts-thus-far"},"Check the status of our new currency accounts thus far"),(0,r.kt)("p",null,"Notice the change in the ",(0,r.kt)("inlineCode",{parentName:"p"},"issued_balance")," before and after transfer in the root account:"),(0,r.kt)(a.ZP,{code:{cli:"\nm10 --server $LEDGER_ADDR --key-file $CB_KEY_FILE get ledger-account $MYB_ROOT_ACCOUNT\n",ts:"\nconst getMybRootAccount = await ledgerClient.getIndexedAccount(centralBankSigner, {\n    id: utils.getUint8ArrayFromAccountId(mybRootAccountId),\n});\nconsole.log(getMybRootAccount);\n",rust:'\nlet get_myb_account_info = central_bank_client.get_account(myb_root_account_id).await.unwrap();\nprintln!("{:?}", get_myb_account_info);\n'},mdxType:"Code"}),(0,r.kt)("h4",{id:"output-2"},"Output"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'(\n    balance: 0,\n    frozen: false,\n    issued_balance: 100000,\n    non_leaf_children: 2,\n    leaf_children: 0,\n    instrument: (\n        code: "MYB",\n        decimals: 2,\n    ),\n)\n')),(0,r.kt)("h2",{id:"as-the-commercial-bank"},"As the Commercial Bank"),(0,r.kt)("p",null,'Once a bank has been onboarded by the central bank onto the M10 platform, they can then use the API to effectively create and manage customer accounts.\nWe will use the API act as two different commercial banks titled "Bank One" and "Bank Two". Each of these banks has a new customer we will create accounts for and deposit funds.'),(0,r.kt)("img",{src:"/img/getting-started-bank-accounts.svg",style:{display:"block",margin:"auto",width:"90%"}}),(0,r.kt)("br",null),(0,r.kt)("h3",{id:"as-bank-one-find-my-issuance-account"},"As Bank One, find my issuance account"),(0,r.kt)("p",null,'Let\'s start exploring the M10 SDK by finding the issuance account you just created "As the Central Bank" for our use now as the Commercial Bank. We can list all of the accounts that we own \u2014 there should be only the one created for this tutorial, so we will use the first one returned as our issuance account.\nThis code creates a new ',(0,r.kt)("inlineCode",{parentName:"p"},"ListAccountsRequest")," filtering by our ",(0,r.kt)("inlineCode",{parentName:"p"},"public_key")," as the owner. It then signs the request using our key-pair and sends it to the ledger. "),(0,r.kt)(a.ZP,{code:{cli:"\nm10 --server $LEDGER_ADDR --key-file $BANKONE_KEY_FILE list account --owner $BANKONE_PUBLIC_KEY\n",ts:"\nconst findBankOneIssuanceAccount = await ledgerClient.listAccounts(bankOneSigner, {\n    owner: bankOneSigner.getPublicKey(),\n});\nconsole.log(findBankOneIssuanceAccount);\n",rust:'\nlet bankone_ledger_client_signer = Ed25519::from_pkcs8(bankone_kp.as_slice()).unwrap();\nlet bankone_ledger_client_channel = Channel::from_shared(ledger_addr).unwrap()\n    .keep_alive_while_idle(true)\n    .http2_keep_alive_interval(Duration::from_secs(30))\n    .timeout(Duration::from_secs(30))\n    .connect_lazy()\n    .unwrap();\nlet mut bankone_ledger_client = LedgerClient::new(bankone_ledger_client_channel);\nlet find_bankone_account_request = sdk::ListAccountsRequest {\n    filter: Some(sdk::list_accounts_request::Filter::Owner(bankone_ledger_client_signer.public_key().to_vec())),\n    page: None,\n};\nlet find_bankone_account_request_signed = bankone_ledger_client_signer.sign_request(\n    find_bankone_account_request\n).await.unwrap();\nlet find_bankone_account = bankone_ledger_client.list_accounts(find_bankone_account_request_signed).await.unwrap();\nprintln!("{:?}", find_bankone_account);\n'},mdxType:"Code"}),(0,r.kt)("h4",{id:"output-3"},"Output"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'[\n    (\n        id: "0c800000000000000000000000000002",\n        owner: "i+VZtoZhwLhfMZ2Etv23029ulURf1yz4Gb6RaqSGS9Y=",\n        name: "Bank One MYB",\n        public_name: "Bank One MYB Issuance Account",\n    ),\n]\n')),(0,r.kt)("h3",{id:"as-bank-one-create-a-customer-account-for-alice"},"As Bank One, create a customer account for Alice"),(0,r.kt)("p",null,"Now we will create a new child account (for a user called Alice) under our issuance account. Alice needs her own public key to sign transactions with, so, first, we will generate that key and ",(0,r.kt)("inlineCode",{parentName:"p"},"account-set"),":"),(0,r.kt)(a.ZP,{code:{cli:'\nexport ALICE_KEY_FILE="alice.pkcs8"\nexport ALICE_PUBLIC_KEY=$(m10 create key-pair $ALICE_KEY_FILE)\nm10 get public-key $ALICE_KEY_FILE\nm10 --server $LEDGER_ADDR --key-file $ALICE_KEY_FILE create account-set --owner $ALICE_PUBLIC_KEY\n',ts:'\nconst [ aliceSigner, aliceId ] = await helpers.createUser(ledgerClient);\nconsole.log("public key is: ", aliceSigner.getPublicKey());\nconsole.log("Created account-sets resource: ", aliceId);\n',rust:'\nlet (alice_kp, alice_signer) = Ed25519::new_key_pair_exportable().unwrap();\nprintln!("public key is: {}", base64::encode(alice_signer.public_key()));\nprintln!("key pair is: {}", base64::encode(alice_kp));\nlet alice_account_response = bankone_client.create_account(\n    AccountBuilder::parent(bankone_account_id)\n        .issuance(false)\n        .frozen(false)\n).await.unwrap();\nlet alice_account_id = alice_account_response.1;\nprintln!("Created accounts resource: {:?}", alice_account_id);\n'},mdxType:"Code"}),(0,r.kt)("h4",{id:"create-role-and-role-binding"},"Create role and role-binding"),(0,r.kt)("p",null,"Since we just created bank-one it won't have any roles that we can use for customers. So we need to create a ",(0,r.kt)("inlineCode",{parentName:"p"},"customer")," role and role-binding where we can use Alice as a subject:"),(0,r.kt)(a.ZP,{code:{cli:"\nexport BANKONE_CUSTOMER_ROLE_ID=$(\n    m10 --server $LEDGER_ADDR --key-file $BANKONE_KEY_FILE create role \\\n        --name customer \\\n        --rule 'rule -c accounts -v Create' \\\n        --rule 'rule -c ledger-accounts -v Create'\n)\necho $BANKONE_CUSTOMER_ROLE_ID\nm10 --server $LEDGER_ADDR --key-file $BANKONE_KEY_FILE create role-binding \\\n    --id $BANKONE_CUSTOMER_ROLE_ID \\\n    --name customer \\\n    --role $BANKONE_CUSTOMER_ROLE_ID \\\n    --subjects $ALICE_PUBLIC_KEY\nm10 --server $LEDGER_ADDR --key-file $BANKONE_KEY_FILE list role-binding --name customer\n",ts:'\nconst bankOneCustomerRoleId = await helpers.roleBindings.createRole(ledgerClient, bankOneSigner, {\n    name: "customer",\n    rules: [\n        {\n            collection: collections.Collection.Account,\n            verbs: [ m10.sdk.Rule.Verb.CREATE ],\n        },\n        {\n            collection: collections.Collection.LedgerAccount,\n            verbs: [ m10.sdk.Rule.Verb.CREATE ],\n        },\n    ]\n});\nconsole.log("Created roles resource: ", bankOneCustomerRoleId);\nconst bankOneCustomerRoleBindingId = await helpers.roleBindings.createRoleBinding(ledgerClient, bankOneSigner, {\n    id: utils.getUint8ArrayFromDocumentId(bankOneCustomerRoleId),\n    name: "customer",\n    role: utils.getUint8ArrayFromDocumentId(bankOneCustomerRoleId),\n    subjects: [ aliceSigner.getPublicKey() ],\n});\nconsole.log("Created role-bindings resource: ", bankOneCustomerRoleBindingId);\n',rust:'\nlet bankone_customer_role_id = Uuid::new_v4();\nbankone_client\n    .documents(\n        DocumentBuilder::default()\n            .insert(sdk::Account {\n                owner: alice_signer.public_key().to_vec(),\n                profile_image_url: String::new(),\n                name: "Alice".to_string(),\n                public_name: "Alice Account".to_string(),\n                id: alice_account_id.to_vec(),\n            })\n            .insert(sdk::Role {\n                id: Bytes::copy_from_slice(bankone_customer_role_id.as_bytes()),\n                owner: Bytes::copy_from_slice(bankone_client.public_key()),\n                name: "customer".to_string(),\n                rules: vec![\n                    sdk::Rule {\n                        collection: Collection::Accounts.to_string(),\n                        instance_keys: vec![],\n                        verbs: vec![sdk::rule::Verb::Create as i32],\n                    },\n                    sdk::Rule {\n                        collection: "ledger-accounts".to_string(),\n                        instance_keys: vec![],\n                        verbs: vec![sdk::rule::Verb::Create as i32],\n                    },\n                ],\n            })\n            .insert(sdk::RoleBinding {\n                id: Bytes::copy_from_slice(bankone_customer_role_id.as_bytes()),\n                owner: Bytes::copy_from_slice(bankone_client.public_key()),\n                name: "customer".to_string(),\n                role: Bytes::copy_from_slice(bankone_customer_role_id.as_bytes()),\n                subjects: vec![Bytes::copy_from_slice(alice_signer.public_key())],\n                expressions: vec![],\n                is_universal: false,\n            }),\n    )\n    .await\n    .unwrap();\nprintln!("Created roles resource: {:?}", bankone_customer_role_id);\nprintln!("Created role-bindings resource: {:?}", bankone_customer_role_id);\n'},mdxType:"Code"}),(0,r.kt)("h4",{id:"create-ledger-account-for-alice-in-bank-one"},"Create ledger-account for Alice in bank-one"),(0,r.kt)("p",null,"After everything is ready we will create a new ",(0,r.kt)("inlineCode",{parentName:"p"},"ledger-account")," for Alice:"),(0,r.kt)(a.ZP,{code:{cli:"\nexport ALICE_ACCOUNT=$(\n    m10 --server $LEDGER_ADDR --key-file $ALICE_KEY_FILE create ledger-account \\\n        --owner $ALICE_PUBLIC_KEY \\\n        --public-name 'Alice Account' \\\n        --name 'Alice' \\\n        --parent-account $BANKONE_ACCOUNT\n)\necho $ALICE_ACCOUNT\n",ts:'\nconst aliceLedgerAccountId = await helpers.accounts.createLedgerAccount(\n    ledgerClient,\n    bankOneSigner,      // signer\n    bankOneAccountId,   // parentId\n);\nconst aliceAccountId = await helpers.accounts.createAccount(\n    ledgerClient,\n    bankOneSigner,              // signer\n    aliceLedgerAccountId,       // accountId\n    "Alice",                    // name\n    aliceSigner.getPublicKey(), // owner\n);\nconsole.log("Created accounts resource: ", aliceAccountId);\n',rust:"\n// Created as a part of the previous step\n"},mdxType:"Code"}),(0,r.kt)("h3",{id:"as-bank-one-issue-funds-to-alices-customer-account"},"As Bank One, issue funds to Alice's customer account"),(0,r.kt)("p",null,"At the moment Alice's balance is zero, so we need to issue funds from her bank:"),(0,r.kt)(a.ZP,{code:{cli:"\nm10 --server $LEDGER_ADDR --key-file $BANKONE_KEY_FILE create transfer \\\n    --from-account $BANKONE_ACCOUNT \\\n    --to-account $ALICE_ACCOUNT \\\n    --amount 1000 \\\n    --memo Funds\n",ts:'\nconst issueFundsToAlice = await ledgerClient.transfer(bankOneSigner, [\n    {\n        fromAccountId: utils.getUint8ArrayFromAccountId(bankOneAccountId),\n        toAccountId: utils.getUint8ArrayFromAccountId(aliceAccountId),\n        amount: 1000,\n        metadata: [ utils.convertMemoToAny({ plaintext: "Funds" }) ],\n    }\n]);\nconsole.log("created transfer: ", issueFundsToAlice.txId);\n',rust:'\nlet issue_funds_to_alice = TransferBuilder::new()\n    .step(\n        StepBuilder::new(bankone_account_id, alice_account_id, 1000)\n            .metadata(sdk::Memo { plaintext: "Funds".to_string() })\n    );\nlet issue_funds_to_alice_tx_id = bankone_client.transfer(issue_funds_to_alice).await.unwrap();\nprintln!("created transfer: {:?}", issue_funds_to_alice_tx_id);\n'},mdxType:"Code"}),(0,r.kt)("h3",{id:"as-bank-two-create-a-customer-account-for-bob"},"As Bank Two, create a customer account for Bob"),(0,r.kt)("p",null,"Just like we did with Alice a moment before, we will setup everything for Bob in bank-two:"),(0,r.kt)(a.ZP,{code:{cli:'\nexport BOB_KEY_FILE="bob.pkcs8"\nexport BOB_PUBLIC_KEY=$(m10 create key-pair $BOB_KEY_FILE)\nm10 get public-key $BOB_KEY_FILE\nm10 --server $LEDGER_ADDR --key-file $BOB_KEY_FILE create account-set --owner $BOB_PUBLIC_KEY\n',ts:'\nconst [ bobSigner, bobId ] = await helpers.createUser(ledgerClient);\nconsole.log("public key is: ", bobSigner.getPublicKey());\nconsole.log("Created account-sets resource: ", bobId);\n',rust:'\nlet banktwo_channel = Channel::from_shared(ledger_addr).unwrap()\n    .keep_alive_while_idle(true)\n    .http2_keep_alive_interval(Duration::from_secs(30))\n    .timeout(Duration::from_secs(30))\n    .connect_lazy()\n    .unwrap();\nlet banktwo_client = M10Client::new(banktwo_signer, banktwo_channel);\nlet (bob_kp, bob_signer) = Ed25519::new_key_pair_exportable().unwrap();\nprintln!("public key is: {}", base64::encode(bob_signer.public_key()));\nprintln!("key pair is: {}", base64::encode(bob_kp));\nlet bob_account_response = banktwo_client.create_account(\n    AccountBuilder::parent(banktwo_account_id)\n        .issuance(false)\n        .frozen(false)\n).await.unwrap();\nlet bob_account_id = bob_account_response.1;\nprintln!("Created accounts resource: {:?}", bob_account_id);\n'},mdxType:"Code"}),(0,r.kt)("h4",{id:"roles-and-role-binding-need-to-be-created-for-bank-two-just-like-it-was-done-for-bank-one"},"Roles and role-binding need to be created for bank-two just like it was done for bank-one:"),(0,r.kt)(a.ZP,{code:{cli:"\nexport BANKTWO_CUSTOMER_ROLE_ID=$(\n    m10 --server $LEDGER_ADDR --key-file $BANKTWO_KEY_FILE create role \\\n        --name customer \\\n        --rule 'rule -c accounts -v Create' \\\n        --rule 'rule -c ledger-accounts -v Create'\n)\necho $BANKTWO_CUSTOMER_ROLE_ID\nm10 --server $LEDGER_ADDR --key-file $BANKTWO_KEY_FILE create role-binding \\\n    --id $BANKTWO_CUSTOMER_ROLE_ID \\\n    --name customer \\\n    --role $BANKTWO_CUSTOMER_ROLE_ID \\\n    --subjects $BOB_PUBLIC_KEY\nm10 --server $LEDGER_ADDR --key-file $BANKTWO_KEY_FILE list role-binding --name customer\n",ts:'\nconst bankTwoCustomerRoleId = await helpers.roleBindings.createRole(ledgerClient, bankTwoSigner, {\n    name: "customer",\n    rules: [\n        {\n            collection: collections.Collection.Account,\n            verbs: [ m10.sdk.Rule.Verb.CREATE ],\n        },\n        {\n            collection: collections.Collection.LedgerAccount,\n            verbs: [ m10.sdk.Rule.Verb.CREATE ],\n        },\n    ]\n});\nconsole.log("Created roles resource: ", bankTwoCustomerRoleId);\nconst bankTwoCustomerRoleBindingId = await helpers.roleBindings.createRoleBinding(ledgerClient, bankTwoSigner, {\n    id: utils.getUint8ArrayFromDocumentId(bankTwoCustomerRoleId),\n    name: "customer",\n    role: utils.getUint8ArrayFromDocumentId(bankTwoCustomerRoleId),\n    subjects: [ bobSigner.getPublicKey() ],\n});\nconsole.log("Created role-bindings resource: ", bankTwoCustomerRoleBindingId);\n',rust:'\nlet banktwo_customer_role_id = Uuid::new_v4();\nbanktwo_client\n    .documents(\n        DocumentBuilder::default()\n            .insert(sdk::Account {\n                owner: bob_signer.public_key().to_vec(),\n                profile_image_url: String::new(),\n                name: "Bob".to_string(),\n                public_name: "Bob Account".to_string(),\n                id: bob_account_id.to_vec(),\n            })\n            .insert(sdk::Role {\n                id: Bytes::copy_from_slice(banktwo_customer_role_id.as_bytes()),\n                owner: Bytes::copy_from_slice(banktwo_client.public_key()),\n                name: "customer".to_string(),\n                rules: vec![\n                    sdk::Rule {\n                        collection: Collection::Accounts.to_string(),\n                        instance_keys: vec![],\n                        verbs: vec![sdk::rule::Verb::Create as i32],\n                    },\n                    sdk::Rule {\n                        collection: "ledger-accounts".to_string(),\n                        instance_keys: vec![],\n                        verbs: vec![sdk::rule::Verb::Create as i32],\n                    },\n                ],\n            })\n            .insert(sdk::RoleBinding {\n                id: Bytes::copy_from_slice(banktwo_customer_role_id.as_bytes()),\n                owner: Bytes::copy_from_slice(banktwo_client.public_key()),\n                name: "customer".to_string(),\n                role: Bytes::copy_from_slice(banktwo_customer_role_id.as_bytes()),\n                subjects: vec![Bytes::copy_from_slice(bob_signer.public_key())],\n                expressions: vec![],\n                is_universal: false,\n            }),\n    )\n    .await\n    .unwrap();\nprintln!("Created roles resource: {:?}", banktwo_customer_role_id);\nprintln!("Created role-bindings resource: {:?}", banktwo_customer_role_id);\n'},mdxType:"Code"}),(0,r.kt)("h4",{id:"create-ledger-account-for-bob-in-bank-two"},"Create ledger-account for Bob in bank-two"),(0,r.kt)(a.ZP,{code:{cli:"\nexport BOB_ACCOUNT=$(\n    m10 --server $LEDGER_ADDR --key-file $BOB_KEY_FILE create ledger-account \\\n        --owner $BOB_PUBLIC_KEY \\\n        --public-name 'Bob Account' \\\n        --name 'Bob' \\\n        --parent-account $BANKTWO_ACCOUNT\n)\necho $BOB_ACCOUNT\n",ts:'\nconst bobLedgerAccountId = await helpers.accounts.createLedgerAccount(\n    ledgerClient,\n    bankOneSigner,      // signer\n    bankOneAccountId,   // parentId\n);\nconst bobAccountId = await helpers.accounts.createAccount(\n    ledgerClient,\n    bankOneSigner,              // signer\n    bobLedgerAccountId,         // accountId\n    "Bob",                      // name\n    bobSigner.getPublicKey(),   // owner\n);\nconsole.log("Created accounts resource: ", bobAccountId);\n',rust:"\n// Created as a part of the previous step\n"},mdxType:"Code"}),(0,r.kt)("h2",{id:"as-alice-send-some-of-our-new-digital-currency-to-bob"},"As Alice, send some of our new digital currency to Bob"),(0,r.kt)("p",null,"Now that their customer accounts have been created and they've been granted access, Alice and Bob are likewise able to use the API to send and recieve\ntheir new digital currency. In this one action, the ledger tree hierarchy of accounts will allow a double-entry accounting like atomic transaction that\nall participants in the activity will be able to observe and respond to."),(0,r.kt)("img",{src:"/img/getting-started-send-transfer.svg",style:{display:"block",margin:"auto",width:"90%"}}),(0,r.kt)("br",null),(0,r.kt)("h3",{id:"check-current-balance"},"Check current balance"),(0,r.kt)("p",null,"After we issued 1000 MYB from bank-one into Alice's account we should the same amount as a balance:"),(0,r.kt)(a.ZP,{code:{cli:"\nm10 --server $LEDGER_ADDR --key-file $ALICE_KEY_FILE get ledger-account $ALICE_ACCOUNT\n",ts:"\nconst aliceLedgerAccountBeforeTransfer = await ledgerClient.getIndexedAccount(aliceSigner, {\n    id: utils.getUint8ArrayFromAccountId(aliceAccountId),\n});\nconsole.log(aliceLedgerAccountBeforeTransfer);\n",rust:'\nlet alice_channel = Channel::from_shared(ledger_addr).unwrap()\n    .keep_alive_while_idle(true)\n    .http2_keep_alive_interval(Duration::from_secs(30))\n    .timeout(Duration::from_secs(30))\n    .connect_lazy()\n    .unwrap();\nlet alice_client = M10Client::new(alice_signer, alice_channel);\nlet get_alice_account_info = alice_client.get_account(alice_account_id).await.unwrap();\nprintln!("{:?}", get_alice_account_info);\n'},mdxType:"Code"}),(0,r.kt)("h4",{id:"output-4"},"Output"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'(\n    balance: 1000,\n    frozen: false,\n    instrument: (\n        code: "MYB",\n        decimals: 2,\n    ),\n)\n')),(0,r.kt)("h3",{id:"transfer-funds-to-bob"},"Transfer funds to Bob"),(0,r.kt)("p",null,"Now that we have 2 accounts for customers, and at least one of them has funds, we can make a transfer:"),(0,r.kt)(a.ZP,{code:{cli:"\nm10 --server $LEDGER_ADDR --key-file $ALICE_KEY_FILE create transfer \\\n    --from-account $ALICE_ACCOUNT \\\n    --to-account $BOB_ACCOUNT \\\n    --amount 100 \\\n    --memo groceries\n",ts:'\nconst sendFundsFromAliceToBob = await ledgerClient.transfer(aliceSigner, [\n    {\n        fromAccountId: utils.getUint8ArrayFromAccountId(aliceAccountId),\n        toAccountId: utils.getUint8ArrayFromAccountId(bobAccountId),\n        amount: 100,\n        metadata: [ utils.convertMemoToAny({ plaintext: "groceries" }) ],\n    }\n]);\nconsole.log("created transfer: ", sendFundsFromAliceToBob.txId);\n',rust:'\nlet transfer_funds_from_alice_to_bob = TransferBuilder::new()\n    .step(\n        StepBuilder::new(alice_account_id, bob_account_id, 100)\n            .metadata(sdk::Memo { plaintext: "groceries".to_string() })\n    );\nlet transfer_funds_from_alice_to_bob_tx_id = bankone_client.transfer(\n    transfer_funds_from_alice_to_bob\n).await.unwrap();\nprintln!("created transfer: {:?}", transfer_funds_from_alice_to_bob_tx_id);\n'},mdxType:"Code"}),(0,r.kt)("h3",{id:"look-up-recent-transfers-to-confirm-delivery"},"Look up recent transfers to confirm delivery"),(0,r.kt)("p",null,"Below you can see how we can get a list of transfers. At the moment they are filtered only by ",(0,r.kt)("inlineCode",{parentName:"p"},"account"),", but there are a few other options which you can use to enchance or filter the output:"),(0,r.kt)(a.ZP,{code:{cli:"\nm10 --server $LEDGER_ADDR --key-file $ALICE_KEY_FILE list transfer --account $ALICE_ACCOUNT\n",ts:"\nconst listAliceTransfers = await ledgerClient.listTransfers(aliceSigner, {\n    accountId: utils.getUint8ArrayFromAccountId(aliceAccountId),\n});\nconsole.log(listAliceTransfers);\n",rust:'\nlet list_alice_transfers = alice_client.list_transfers(\n    TxnFilter::<TransferFilter>::by_account(alice_account_id)\n).await.unwrap();\nprintln!("{:?}", list_alice_transfers);\n'},mdxType:"Code"}),(0,r.kt)("h4",{id:"output-5"},"Output"),(0,r.kt)("p",null,"In the output you'll see all the transfers that we just made:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'[\n    (\n        tx_id: 133930000,\n        timestamp: "2022-08-25 10:42:42.786861",\n        failed: false,\n        steps: [\n            (\n                from_account_id: "0c800000000000000000000000000003",\n                to_account_id: "0c800001000000000000000000000003",\n                amount: 100,\n                metadata: [Memo((plaintext:"groceries"))],\n            ),\n        ],\n        state: Accepted,\n    ),// [0]\n    (\n        tx_id: 132160000,\n        timestamp: "2022-08-25 10:41:53.310156",\n        failed: false,\n        steps: [\n            (\n                from_account_id: "0c800000000000000000000000000002",\n                to_account_id: "0c800000000000000000000000000003",\n                amount: 1000,\n                metadata: [Memo((plaintext:"Funds"))],\n            ),\n        ],\n        state: Accepted,\n    ),\n]\n')),(0,r.kt)("h3",{id:"check-balance-again-to-confirm-debit-of-funds"},"Check balance again to confirm debit of funds"),(0,r.kt)(a.ZP,{code:{cli:"\nm10 --server $LEDGER_ADDR --key-file $ALICE_KEY_FILE get ledger-account $ALICE_ACCOUNT\n",ts:"\nconst aliceLedgerAccountAfterTransfer = await ledgerClient.getIndexedAccount(aliceSigner, {\n    id: utils.getUint8ArrayFromAccountId(aliceAccountId),\n});\nconsole.log(aliceLedgerAccountAfterTransfer);\n",rust:'\nlet get_alice_account_info = alice_client.get_account(alice_account_id).await.unwrap();\nprintln!("{:?}", get_alice_account_info);\n'},mdxType:"Code"}),(0,r.kt)("h4",{id:"output-6"},"Output"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'(\n    balance: 900,\n    frozen: false,\n    instrument: (\n        code: "MYB",\n        decimals: 2,\n    ),\n)\n')),(0,r.kt)("h2",{id:"as-bob-confirm-receipt-of-funds"},"As Bob, confirm receipt of funds"),(0,r.kt)("h3",{id:"check-balance-to-confirm-credit-of-funds"},"Check balance to confirm credit of funds"),(0,r.kt)(a.ZP,{code:{cli:"\nm10 --server $LEDGER_ADDR --key-file $BOB_KEY_FILE get ledger-account $BOB_ACCOUNT\n",ts:"\nconst bobLedgerAccountAfterTransfer = await ledgerClient.getIndexedAccount(bobSigner, {\n    id: utils.getUint8ArrayFromAccountId(bobAccountId),\n});\nconsole.log(bobLedgerAccountAfterTransfer);\n",rust:'\nlet bob_channel = Channel::from_shared(ledger_addr).unwrap()\n    .keep_alive_while_idle(true)\n    .http2_keep_alive_interval(Duration::from_secs(30))\n    .timeout(Duration::from_secs(30))\n    .connect_lazy()\n    .unwrap();\nlet bob_client = M10Client::new(bob_signer, bob_channel);\nlet get_bob_account_info = bob_client.get_account(bob_account_id).await.unwrap();\nprintln!("{:?}", get_bob_account_info);  \n'},mdxType:"Code"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'(\n    balance: 100,\n    frozen: false,\n    instrument: (\n        code: "MYB",\n        decimals: 2,\n    ),\n)\n')),(0,r.kt)("p",null,"As you can see Bob now holds the funds sent by Alice. You've now completed a basic exploration of the features of the M10 platform.\nFor further exploration, attempt to request the transaction information and the account information using the different keys you created\nthroughout the process. Which personas can see with activities? Understanding how RBAC & the ledger hierarchy influences access to model\nthe compliance requirements found in financial services is a key area of mastery to get the most out of M10."))}_.isMDXComponent=!0}}]);