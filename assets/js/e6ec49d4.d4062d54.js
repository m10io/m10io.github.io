"use strict";(self.webpackChunkproduct=self.webpackChunkproduct||[]).push([[523],{3905:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>b});var a=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=a.createContext({}),c=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},d=function(e){var n=c(e.components);return a.createElement(s.Provider,{value:n},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},p=a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,r=e.originalType,s=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),u=c(t),p=o,b=u["".concat(s,".").concat(p)]||u[p]||m[p]||r;return t?a.createElement(b,l(l({ref:n},d),{},{components:t})):a.createElement(b,l({ref:n},d))}));function b(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var r=t.length,l=new Array(r);l[0]=p;var i={};for(var s in n)hasOwnProperty.call(n,s)&&(i[s]=n[s]);i.originalType=e,i[u]="string"==typeof e?e:o,l[1]=i;for(var c=2;c<r;c++)l[c]=t[c];return a.createElement.apply(null,l)}return a.createElement.apply(null,t)}p.displayName="MDXCreateElement"},5624:(e,n,t)=>{t.d(n,{Z:()=>s});var a=t(7294),o=t(5089),r=t(7316),l=t(5291),i=t(5308);function s(e){let n=e.code.trim();return a.createElement("div",{className:"code"},a.createElement("div",{className:"code-inner"},a.createElement(o.ZP,{value:n,height:e.height||"auto",theme:r.CP,extensions:[i.ih[e.lang]],readOnly:"true"}),a.createElement(l.Z,{code:n,className:"buttonGroup"})))}},1025:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>s,default:()=>b,frontMatter:()=>i,metadata:()=>c,toc:()=>u});var a=t(7462),o=(t(7294),t(3905)),r=t(5308),l=t(5624);const i={},s="Roles",c={unversionedId:"api/roles",id:"api/roles",title:"Roles",description:'Roles (along with their partner Role Bindings) are the two core elements of M10\'s permissions system. They group together a set of permissions on resources into a single object. For instance you might have a Role called bank-admin that allows a user to create or read accounts. Or you might have a role called "viewer" which allows a user to view all resources. Roles are only useful once they are "bound" to a specific key using a Role Binding.',source:"@site/docs/api/roles.mdx",sourceDirName:"api",slug:"/api/roles",permalink:"/api/roles",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"sidebar",previous:{title:"Role Bindings",permalink:"/api/role-bindings"},next:{title:"Transfers",permalink:"/api/transfers"}},d={},u=[{value:"Rules",id:"rules",level:3},{value:"Model",id:"model",level:2},{value:"API Calls",id:"api-calls",level:2},{value:"Create",id:"create",level:3},{value:"Get",id:"get",level:3},{value:"List",id:"list",level:3},{value:"Update",id:"update",level:3},{value:"Delete",id:"delete",level:3}],m={toc:u},p="wrapper";function b(e){let{components:n,...t}=e;return(0,o.kt)(p,(0,a.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"roles"},"Roles"),(0,o.kt)("p",null,"Roles (along with their partner Role Bindings) are the two core elements of M10's permissions system. They group together a set of permissions on resources into a single object. For instance you might have a Role called ",(0,o.kt)("inlineCode",{parentName:"p"},"bank-admin"),' that allows a user to create or read accounts. Or you might have a role called "viewer" which allows a user to view all resources. Roles are only useful once they are "bound" to a specific key using a ',(0,o.kt)("a",{parentName:"p",href:"./role-bindings"},"Role Binding"),"."),(0,o.kt)("h3",{id:"rules"},"Rules"),(0,o.kt)("p",null,'Each Role is made up of a number of "Rules". A rule contains a ',(0,o.kt)("inlineCode",{parentName:"p"},"collection"),", a list of ",(0,o.kt)("inlineCode",{parentName:"p"},"instance_keys"),", and a list of ",(0,o.kt)("inlineCode",{parentName:"p"},"verbs"),". The collection is the type of object you are granting permissions to, for instance if you wanted to grant permissions for a user to access an account, the collection would be ",(0,o.kt)("inlineCode",{parentName:"p"},"accounts"),'. "Verbs" are actions that can take place on an instance. There are 7 verbs:'),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Read"),(0,o.kt)("li",{parentName:"ul"},"Create"),(0,o.kt)("li",{parentName:"ul"},"Update"),(0,o.kt)("li",{parentName:"ul"},"Delete"),(0,o.kt)("li",{parentName:"ul"},"Transact"),(0,o.kt)("li",{parentName:"ul"},"Initiate"),(0,o.kt)("li",{parentName:"ul"},"Commit")),(0,o.kt)("p",null,"Each rule can take an optional set of ",(0,o.kt)("inlineCode",{parentName:"p"},"instance_keys"),". If one or more instance keys is specified, the rule only applies to those instances. Imagine you are trying to give a user access to just their own account. You could create a Rule that contains only the id for that account in ",(0,o.kt)("inlineCode",{parentName:"p"},"instance_keys"),"."),(0,o.kt)("h2",{id:"model"},"Model"),(0,o.kt)(l.Z,{code:"\nmessage Role {\n  bytes id = 1;\n  bytes owner = 2;\n  string name = 3;\n  repeated Rule rules = 4;\n} \n\nmessage Rule {\n  string collection = 2;\n  repeated Value instance_keys = 3;\n  repeated Verb verbs = 4; \n\n  enum Verb {\n    READ = 0;\n    CREATE = 1;\n    UPDATE = 2;\n    DELETE = 3;\n    TRANSACT = 4;\n    INITIATE = 5;\n    COMMIT = 6;\n  }\n}\n",lang:"protobuf",mdxType:"Highlight"}),(0,o.kt)("h2",{id:"api-calls"},"API Calls"),(0,o.kt)("h3",{id:"create"},"Create"),(0,o.kt)(r.ZP,{code:{rust:'\nuse prost::bytes::Bytes;\nuse m10_sdk::Collection;\nlet account_id = Bytes::copy_from_slice(&hex::decode("00800005000000000000000000000002")?);\nclient.documents(\n    DocumentBuilder::default().insert(sdk::Role {\n        id: uuid::Uuid::parse_str("6aa51062-452b-482a-aff0-3e7df1a1aae9")?\n            .as_bytes()\n            .to_vec()\n            .into(),\n        name: "bank-admin".to_string(),\n        rules: vec![\n            sdk::Rule {\n                collection: m10_sdk::Collection::Banks.to_string(),\n                instance_keys: vec![Bytes::copy_from_slice(\n                    uuid::Uuid::parse_str("bc3b532d-6be0-45e1-b98c-5ddc6e8e239a")?\n                        .as_bytes(),\n                )\n                .into()],\n                verbs: vec![sdk::rule::Verb::Read as i32],\n            },\n            sdk::Rule {\n                collection: "ledger-accounts".to_string(),\n                instance_keys: vec![account_id.clone().into()],\n                verbs: vec![sdk::rule::Verb::Create as i32],\n            },\n            sdk::Rule {\n                collection: Collection::AccountMetadata.to_string(),\n                instance_keys: vec![account_id.into()],\n                verbs: vec![\n                    sdk::rule::Verb::Create as i32,\n                    sdk::rule::Verb::Read as i32,\n                ],\n            },\n        ],\n        owner: client.signer().public_key().to_vec().into(),\n    }),\n).await?;\n',ts:"\nconst roleId = new sdk.DocumentId('role')\nconst txId = await ledgerClient.documents(\n    new sdk.DocumentBuilder()\n        .insert(collections.Collection.Role, new m10.sdk.Role({\n            id: roleId.toUint8Array(),\n            name: 'bank-admin',\n            owner: ledgerClient.getSigner().getPublicKey().toUint8Array(),\n            rules: [\n                // Can CREATE accounts\n                {\n                    collection: collections.Collection.LedgerAccount,\n                    verbs: [ m10.sdk.Rule.Verb.CREATE ],\n                },\n                // Can TRANSACT only on the specified account ID\n                {\n                    collection: collections.Collection.LedgerAccount,\n                    verbs: [ m10.sdk.Rule.Verb.TRANSACT ],\n                    instanceKeys: [ { bytesValue: new sdk.AccountId('00800001000000000000000000000002').toUint8Array() } ],\n                },\n            ]\n        }))\n)\nconsole.log(`Created role ${roleId} in transaction ${txId}`)\n",dart:'\ncreateRole(\n  name: "bank-admin",\n  rules: [\n    RuleDoc.fromStrings(\n        "banks", ["READ"], ["bc3b532d-6be0-45e1-b98c-5ddc6e8e239a"]),\n    RuleDoc.fromStrings(\n      "accounts",\n      ["CREATE", "READ"],\n      ["00800005000000000000000000000002"],\n    ),\n    RuleDoc.fromStrings(\n        "ledger-accounts", ["CREATE"], ["00800005000000000000000000000002"])\n  ],\n  operator: "fis.m10.net",\n);\n',cli:'\nm10 create role \\\n--id 6aa51062-452b-482a-aff0-3e7df1a1aae9 \\\n--name bank-admin \\\n--rule "rule --collection banks --verbs Read --instances bc3b532d-6be0-45e1-b98c-5ddc6e8e239a" \\\n--rule "rule --collection accounts --verbs Create Read --instances 00800005000000000000000000000002" \\\n--rule "rule --collection ledger-accounts --verbs Create --instances 00800005000000000000000000000002"\n'},mdxType:"Code"}),(0,o.kt)("h3",{id:"get"},"Get"),(0,o.kt)(r.ZP,{code:{rust:'\nlet role = client\n    .get_role(uuid::Uuid::parse_str(\n        "6aa51062-452b-482a-aff0-3e7df1a1aae9",\n    )?)\n    .await?;\n',ts:"\nconst role = await ledgerClient.getRole(\n    // Note: This is the static role 'user-access-owned'\n    new sdk.DocumentId('role', roleId.toString())\n);\nconsole.log(`Role ${JSON.stringify(role, null, 2)}`)\n",dart:'\nfinal transfer = await client.getRole(\n  id: "72b79b75-5736-412d-a391-e7a190a36b15"\n  operator: "fis.m10.net",\n);\n',cli:"\nm10 get role 6aa51062-452b-482a-aff0-3e7df1a1aae9\n"},mdxType:"Code"}),(0,o.kt)("h3",{id:"list"},"List"),(0,o.kt)(r.ZP,{code:{rust:'\nuse m10_sdk::{NameFilter, PageBuilder};\nlet builder = PageBuilder::<uuid::Uuid, NameFilter>::name("bank-admin");\nlet roles = client.list_roles(builder).await?;\n',ts:"\nimport { Role } from \"m10-sdk/out/types\";\nconst print = (roles: Role[]) => console.log(`Roles[${roles.length}]:\n${roles.map(role => JSON.stringify(role, null, 2))}`)\n//  Filter by name\nconst rolesByName = await ledgerClient.listRoles(\n    sdk.PageBuilder.byName('user-access-owned')\n);\nprint(rolesByName)\n// Using Pagination\nconst rolesPaginated = await ledgerClient.listRoles(\n    sdk.PageBuilder.byName('user-access-owned').lastId(rolesByName[0].id).limit(1)\n)\nprint(rolesPaginated)\n",dart:'\nawait client.listRoles(\n  name: "bank-admin", \n  operator: "fis.m10.net",\n)\n',cli:"\nm10 list role --name bank-admin\n"},mdxType:"Code"}),(0,o.kt)("h3",{id:"update"},"Update"),(0,o.kt)(r.ZP,{code:{rust:'\nclient.documents(\n        DocumentBuilder::default().update(\n            m10_sdk::DocumentUpdate::<sdk::Role>::new(uuid::Uuid::parse_str(\n                "6aa51062-452b-482a-aff0-3e7df1a1aae9",\n            )?)\n            .name("ext-bank-admin".to_string())\n            .rules(vec![sdk::Rule {\n                collection: Collection::Roles.to_string(),\n                instance_keys: vec![Bytes::copy_from_slice(\n                    uuid::Uuid::parse_str("6df7043d-d2d0-4d7e-b5ca-bdb9b68b4548")?\n                        .as_bytes(),\n                )\n                .into()],\n                verbs: vec![\n                    sdk::rule::Verb::Create as i32,\n                    sdk::rule::Verb::Read as i32,\n                    sdk::rule::Verb::Update as i32,\n                ],\n            }]),\n        ),\n    ).await?;\n',ts:"\n// Create a new role\nconst roleId = new sdk.DocumentId('role')\nawait ledgerClient.documents(\n    new sdk.DocumentBuilder().insert(\n        collections.Collection.Role,\n        new m10.sdk.Role({\n            id: roleId.toUint8Array(),\n            name: 'original-name',\n            owner: ledgerClient.getSigner().getPublicKey().toUint8Array(),\n        })\n    )\n)\n// Update the name\nawait ledgerClient.documents(\n    new sdk.DocumentBuilder().update(\n        new collections.DocumentUpdate(\n            collections.Collection.Role,\n            new m10.sdk.Role({\n                id: roleId.toUint8Array(),\n                name: 'new-name'\n            }),\n            // List of field changes\n            ['name']\n        )\n    )\n)\n",dart:'\nupdateRole(\n  name: "ext-bank-admin",\n  rules: [\n    RuleDoc.fromStrings(\n      "roles",\n      ["CREATE", "READ", "UPDATE"],\n      ["6df7043d-d2d0-4d7e-b5ca-bdb9b68b4548"],\n    )\n  ],\n  operator: "fis.m10.net",\n);\n',cli:'\nm10 update role \\\n--id 6aa51062-452b-482a-aff0-3e7df1a1aae9 \\\n--name ext-bank-admin \\\n--rule "rule --collection roles --verbs Create Read Update --instances 6df7043d-d2d0-4d7e-b5ca-bdb9b68b4548"\n'},mdxType:"Code"}),(0,o.kt)("h3",{id:"delete"},"Delete"),(0,o.kt)(r.ZP,{code:{rust:'\nlet id = uuid::Uuid::parse_str("6aa51062-452b-482a-aff0-3e7df1a1aae9")?.as_bytes().to_vec();\nlet document_builder = DocumentBuilder::default().delete_custom(Collection::Roles, id);\nclient.documents(document_builder).await?;\n',ts:"\n// Create a new role\nconst roleId = new sdk.DocumentId('role')\nawait ledgerClient.documents(\n    new sdk.DocumentBuilder().insert(\n        collections.Collection.Role,\n        new m10.sdk.Role({\n            id: roleId.toUint8Array(),\n            name: 'my-role',\n            owner: ledgerClient.getSigner().getPublicKey().toUint8Array(),\n        })\n    )\n)\n// Delete the role\nawait ledgerClient.documents(\n    new sdk.DocumentBuilder().delete(\n        collections.Collection.Role,\n        new m10.sdk.Role({ id: roleId.toUint8Array() })\n    )\n)\n",dart:'\nfinal transfer = await client.deleteRole(\n  id: "6aa51062-452b-482a-aff0-3e7df1a1aae9",\n  operator: "fis.m10.net",\n);\n',cli:"\nm10 delete role 6aa51062-452b-482a-aff0-3e7df1a1aae9\n"},mdxType:"Code"}))}b.isMDXComponent=!0}}]);