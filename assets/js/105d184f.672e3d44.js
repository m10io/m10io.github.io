"use strict";(self.webpackChunkproduct=self.webpackChunkproduct||[]).push([[433,6014],{788:(e,n,t)=>{t.d(n,{A:()=>r});t(6540);var a=t(8186),c=t(7430),o=t(4612),d=t(4767),i=t(4848);function r(e){let n=e.code.trim();return(0,i.jsx)("div",{className:"code",children:(0,i.jsxs)("div",{className:"code-inner",children:[(0,i.jsx)(a.Ay,{value:n,height:e.height||"auto",theme:c.IR,extensions:[d.gq[e.lang]],readOnly:"true"}),(0,i.jsx)(o.A,{code:n,className:"buttonGroup"})]})})}},4753:(e,n,t)=>{t.r(n),t.d(n,{ProductName:()=>s,assets:()=>r,contentTitle:()=>i,default:()=>m,frontMatter:()=>d,metadata:()=>a,toc:()=>l});const a=JSON.parse('{"id":"components/variables","title":"variables","description":"","source":"@site/docs/components/variables.mdx","sourceDirName":"components","slug":"/components/variables","permalink":"/components/variables","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{}}');var c=t(4848),o=t(8453);const d={},i=void 0,r={},s=()=>(0,c.jsx)("span",{children:"DRM"}),l=[];function u(e){return(0,c.jsx)(c.Fragment,{})}function m(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,c.jsx)(n,{...e,children:(0,c.jsx)(u,{...e})}):u()}},5414:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>l,default:()=>p,frontMatter:()=>s,metadata:()=>a,toc:()=>m});const a=JSON.parse('{"id":"api/account-metadata","title":"Account Metadata","description":"Every account on the  ledger can have associated metadata, and this AccountMetadata can be created either:","source":"@site/docs/api/account-metadata.mdx","sourceDirName":"api","slug":"/api/account-metadata","permalink":"/api/account-metadata","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"sidebar","previous":{"title":"Accounts","permalink":"/api/accounts"},"next":{"title":"AccountSet","permalink":"/api/account-sets"}}');var c=t(4848),o=t(8453),d=t(4767),i=t(788),r=t(4753);const s={},l="Account Metadata",u={},m=[{value:"Model",id:"model",level:2},{value:"Create",id:"create",level:3},{value:"Update",id:"update",level:3},{value:"Delete",id:"delete",level:3},{value:"List (Find)",id:"list-find",level:3},{value:"Get",id:"get",level:3}];function h(e){const n={admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",ul:"ul",...(0,o.R)(),...e.components};return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsx)(n.header,{children:(0,c.jsx)(n.h1,{id:"account-metadata",children:"Account Metadata"})}),"\n",(0,c.jsxs)(n.p,{children:["Every account on the ",(0,c.jsx)(r.ProductName,{})," ledger can have associated metadata, and this ",(0,c.jsx)(n.code,{children:"AccountMetadata"})," can be created either:"]}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsxs)(n.li,{children:["When an account is created, ",(0,c.jsx)(n.code,{children:"AccountMetadata"})," can be included and then the record is automatically created."]}),"\n",(0,c.jsxs)(n.li,{children:["After an account is created, ",(0,c.jsx)(n.code,{children:"AccountMetadata"})," can be added."]}),"\n"]}),"\n",(0,c.jsxs)(n.p,{children:["In fact, multiple ",(0,c.jsx)(n.code,{children:"AccountMetadata"})," records can be associated with an account on the ledger."]}),"\n",(0,c.jsx)(n.h2,{id:"model",children:"Model"}),"\n",(0,c.jsxs)(n.p,{children:["The data model for ",(0,c.jsx)(n.code,{children:"AccountMetadata"})," is defined in ",(0,c.jsx)(n.code,{children:"model.proto"}),":"]}),"\n",(0,c.jsx)(i.A,{code:"\nmessage AccountMetadata {\n  bytes owner = 1;                // the public key of the owner\n  string profile_image_url = 9;   // a profile image\n  string name = 10;               // the name of the account-metadata object\n  string public_name = 11;        // the name that will be shown as sender in transfers\n  bytes id = 12;                  // the id of the account-metadata record. Uuid is recommended\n}\n",lang:"protobuf"}),"\n",(0,c.jsx)(n.h3,{id:"create",children:"Create"}),"\n",(0,c.jsxs)(n.p,{children:["Create an ",(0,c.jsx)(n.code,{children:"AccountMetadata"})," record."]}),"\n",(0,c.jsx)(d.Ay,{code:{rust:"Coming soon\n",ts:'\nawait operatorClient.documents([\n  {\n      oneofKind: "insertDocument",\n      insertDocument: Operation_InsertDocument.create({\n          collection: Collection.AccountMetadata,\n          document: AccountMetadata.toBinary(\n              AccountMetadata.create({\n                  id: aliceAccountId.bytes,\n                  name: aliceAccountMetadataName,\n                  owner: aliceSigner.getPublicKey().toUint8Array(),\n                  publicName: aliceAccountMetadataName,\n              }),\n          ),\n      }),\n  },\n]);\n',dart:"// Not supported\n",cli:'m10 create account-metadata --owner jPlLzvjwqHqBpYtrTldV6AIeI4UlLB0nKFnKGmXm8AA= \\\n--name "john brown" \\\n--public-name "John Brown" -i 19638175-f625-4441-bd91-d4790bac428e\n'}}),"\n",(0,c.jsx)(n.h1,{id:""}),"\n",(0,c.jsx)(n.h3,{id:"update",children:"Update"}),"\n",(0,c.jsxs)(n.p,{children:["Update an ",(0,c.jsx)(n.code,{children:"AccountMetadata"})," record."]}),"\n",(0,c.jsx)(d.Ay,{code:{rust:"Coming soon\n",ts:'\nawait operatorClient.documents([\n  {\n      oneofKind: "updateDocument",\n      updateDocument: Operation_UpdateDocument.create({\n          collection: Collection.AccountMetadata,\n          document: AccountMetadata.toBinary(\n              AccountMetadata.create({\n                  id: accountId.bytes,\n                  name: name,\n              }),\n          ),\n      }),\n  },\n]);\n',dart:"\nfinal accountId = await client.updateAccount({\n// this is the account id, the account-metadata associated with this account\n// will be updated\nid: '00000000000100000000000000000001',\noperator: 'fis.m10.net',\nname: 'john brown sr',\npublicName: 'John Brown Sr.',\nprofileImageUrl: 'https://example.com',\ncontextId: '94583934-f625-4441-bd91-d4790cde0391',\n})\n",cli:'m10 update account-metadata --owner jPlLzvjwqHqBpYtrTldV6AIeI4UlLB0nKFnKGmXm8AA= \\\n--name "john brown sr" \\\n--public-name "John Brown Sr." 19638175-f625-4441-bd91-d4790bac428e\n'}}),"\n",(0,c.jsx)(n.h1,{id:"-1"}),"\n",(0,c.jsx)(n.h3,{id:"delete",children:"Delete"}),"\n",(0,c.jsxs)(n.p,{children:["Delete an ",(0,c.jsx)(n.code,{children:"AccountMetadata"})," record."]}),"\n",(0,c.jsx)(d.Ay,{code:{rust:"Coming soon\n",ts:'\nawait operatorClient.documents([\n  {\n      oneofKind: "deleteDocument",\n      deleteDocument: Operation_DeleteDocument.create({\n          collection: Collection.AccountMetadata,\n          primaryKey: Value.create({\n              value: {\n                  oneofKind: "bytesValue",\n                  bytesValue: document.id,\n              },\n          }),\n      }),\n  },\n]);\n',dart:"// Not supported\n",cli:"m10 delete account-metadata 19638175-f625-4441-bd91-d4790bac428e\n"}}),"\n",(0,c.jsx)(n.h1,{id:"-2"}),"\n",(0,c.jsx)("br",{}),"\n",(0,c.jsx)(n.h3,{id:"list-find",children:"List (Find)"}),"\n",(0,c.jsxs)(n.p,{children:["List ",(0,c.jsx)(n.code,{children:"AccountMetadata"})," records using filter."]}),"\n",(0,c.jsx)(d.Ay,{code:{rust:"Coming soon\n",ts:"\nconst metadatas = await testCaseInstances.accountClient.listAccountMetadata({\n  filter: {\n      oneofKind: 'owner',\n      owner: aliceSigner.getPublicKey().toUint8Array(),\n  },\n});\nconsole.log(metadatas);\n",dart:"// Currently supports filtering by owner or filtering by name\nvar accountMetadataDocs = await client.findAccountByOwner(\nowner: 'jPlLzvjwqHqBpYtrTldV6AIeI4UlLB0nKFnKGmXm8AA=',\noperator: 'fis.m10.net',\n);\naccountMetadataDocs = await client.findAccountByName(\nowner: 'Example Name',\noperator: 'fis.m10.net',\n);\n",cli:'m10 find account-metadata --owner "wPf1jiymlaF6vdpTko5aBMcy1wnUc/KFvU8HlRgBqmY="\n'}}),"\n",(0,c.jsx)(n.h1,{id:"-3"}),"\n",(0,c.jsx)(n.h3,{id:"get",children:"Get"}),"\n",(0,c.jsxs)(n.p,{children:["Get an ",(0,c.jsx)(n.code,{children:"AccountMetadata"})," record."]}),"\n",(0,c.jsx)(d.Ay,{code:{rust:"Coming soon\n",ts:"\nconst indexedAccounts = await aliceClient.listAccounts({\n  filter: {\n      oneofKind: 'owner',\n      owner: aliceSigner.getPublicKey().toUint8Array(),\n  },\n})\n\nawait Promise.all(accounts.map(async (indexedAccount) => {\n  const accountId = AccountId.fromBytes(indexedAccount.id)\n\n  const account = await aliceClient.getAccount(accountId)\n  console.log(account);\n\n  const accountInfo = await aliceClient.getAccountInfo(accountId)\n  console.log(accountInfo);\n\n  const accountMetadata = await aliceClient.getAccountMetadata(accountId.bytes)\n  console.log(accountInfo);\n}))\n",dart:"\nfinal accountMetadata = await client.getAccountMetadata(\nid: '19638175-f625-4441-bd91-d4790bac428e',\noperator: 'fis.m10.net',\n);\n",cli:"m10 get account-metadata 19638175-f625-4441-bd91-d4790bac428e\n"}}),"\n",(0,c.jsx)(n.h1,{id:"-4"}),"\n",(0,c.jsx)(n.admonition,{title:"HTTP/1",type:"info",children:(0,c.jsx)(n.p,{children:"To submit requests over HTTP/1 instead of HTTP/2 with the SDKs, use the http option."})})]})}function p(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,c.jsx)(n,{...e,children:(0,c.jsx)(h,{...e})}):h(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>d,x:()=>i});var a=t(6540);const c={},o=a.createContext(c);function d(e){const n=a.useContext(o);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(c):e.components||c:d(e.components),a.createElement(o.Provider,{value:n},e.children)}}}]);