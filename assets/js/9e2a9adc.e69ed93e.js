"use strict";(self.webpackChunkproduct=self.webpackChunkproduct||[]).push([[433,1291],{788:(e,n,t)=>{t.d(n,{A:()=>r});t(6540);var c=t(8186),o=t(7430),s=t(4612),a=t(4767),i=t(4848);function r(e){let n=e.code.trim();return(0,i.jsx)("div",{className:"code",children:(0,i.jsxs)("div",{className:"code-inner",children:[(0,i.jsx)(c.Ay,{value:n,height:e.height||"auto",theme:o.IR,extensions:[a.gq[e.lang]],readOnly:"true"}),(0,i.jsx)(s.A,{code:n,className:"buttonGroup"})]})})}},4753:(e,n,t)=>{t.r(n),t.d(n,{ProductName:()=>d,assets:()=>r,contentTitle:()=>i,default:()=>p,frontMatter:()=>a,metadata:()=>c,toc:()=>l});const c=JSON.parse('{"id":"components/variables","title":"variables","description":"","source":"@site/docs/components/variables.mdx","sourceDirName":"components","slug":"/components/variables","permalink":"/components/variables","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{}}');var o=t(4848),s=t(8453);const a={},i=void 0,r={},d=()=>(0,o.jsx)("span",{children:"DRM"}),l=[];function u(e){return(0,o.jsx)(o.Fragment,{})}function p(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(u,{...e})}):u()}},5639:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>d,default:()=>m,frontMatter:()=>r,metadata:()=>c,toc:()=>u});const c=JSON.parse('{"id":"api/account-sets","title":"AccountSet","description":"AccountSet allows the association of multiple ledger accounts with one user. An AccountSet is a list of account IDs. An AccountSet is a \\"Document\\" stored on the ledger.","source":"@site/docs/api/account-sets.mdx","sourceDirName":"api","slug":"/api/account-sets","permalink":"/api/account-sets","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"sidebar","previous":{"title":"Account Metadata","permalink":"/api/account-metadata"},"next":{"title":"Actions","permalink":"/api/actions"}}');var o=t(4848),s=t(8453),a=t(4767),i=t(788);t(4753);const r={},d="AccountSet",l={},u=[{value:"Model",id:"model",level:2},{value:"API Requests",id:"api-requests",level:2},{value:"Create",id:"create",level:3},{value:"Update",id:"update",level:3},{value:"Delete",id:"delete",level:3},{value:"List (Find)",id:"list-find",level:3},{value:"Get",id:"get",level:3}];function p(e){const n={admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"accountset",children:"AccountSet"})}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"AccountSet"})," allows the association of multiple ledger accounts with one user. An ",(0,o.jsx)(n.code,{children:"AccountSet"})," is a list of account IDs. An ",(0,o.jsx)(n.code,{children:"AccountSet"}),' is a "Document" stored on the ledger.']}),"\n",(0,o.jsx)(n.h2,{id:"model",children:"Model"}),"\n",(0,o.jsxs)(n.p,{children:["The data model for an ",(0,o.jsx)(n.code,{children:"AccountSet"}),":"]}),"\n",(0,o.jsx)(i.A,{code:"\nmessage AccountSet {\n  bytes owner = 1;\n  repeated bytes accounts = 2;\n  bytes id = 7;\n}\n",lang:"protobuf"}),"\n",(0,o.jsx)(n.h2,{id:"api-requests",children:"API Requests"}),"\n",(0,o.jsx)(n.h3,{id:"create",children:"Create"}),"\n",(0,o.jsxs)(n.p,{children:["To create an ",(0,o.jsx)(n.code,{children:"AccountSet"}),", specify the array of account IDs:"]}),"\n",(0,o.jsx)(a.Ay,{code:{rust:"Coming soon\n",ts:'\nawait bankAdminClient.documents([{\n  oneofKind: "insertDocument",\n  insertDocument: Operation_InsertDocument.create({\n      collection: Collection.AccountSet,\n      document: AccountSet.toBinary(\n          AccountSet.create({\n              id: ResourceId.generate().bytes,\n              owner: aliceSigner.getPublicKey().toUint8Array(),\n          }),\n      ),\n  }),\n}]);\n',dart:"\nfinal accountId = await client.createUser(\noperator: 'fis.m10.net',\ncontextId: '3170d7b0-47df-4615-8c76-07de1c138b7d',\nid: 'b218136c-88fc-48ec-9456-854aec5647cb',\n);\n",cli:'m10 create account-set \\\n--id b218136c-88fc-48ec-9456-854aec5647cb \\\n--owner $wPf1jiymlaF6vdpTko5aBMcy1wnUc/KFvU8HlRgBqmY= \\\n--accounts "15800001000000000000000000000003" \\\n--accounts "15800000000000000100000000000003"\n'}}),"\n",(0,o.jsx)(n.h3,{id:"update",children:"Update"}),"\n",(0,o.jsxs)(n.p,{children:["To update an ",(0,o.jsx)(n.code,{children:"AccountSet"}),", specify the AccountSetID and updated attributes:"]}),"\n",(0,o.jsx)(a.Ay,{code:{rust:"Coming soon\n",ts:'\nawait bankAdminClient.documents([{\n  oneofKind: "updateDocument",\n  updateDocument: Operation_UpdateDocument.create({\n      collection: Collection.AccountSet,\n      document: AccountSet.toBinary(\n          AccountSet.create({\n              id: ResourceId.generate().bytes,\n              owner: aliceSigner.getPublicKey().toUint8Array(),\n          }),\n      ),\n  }),\n}]);\n',dart:"\nfinal accountId = await client.updateUser(\nuserId: '47842ef9-3623-4b63-8a78-ee801774c556',\noperator: 'fis.m10.net',\ndefaultCurrency: 'usd',\ncontextId: 'e84d40a6-6d48-4e17-afd3-f2c513c15ab3',\naccounts: ['15800001000000000000000000000003'],\n);\n",cli:"\nm10 update account-set \\\n--accounts 3e800001000000000200000000000003 \\\nb218136c-88fc-48ec-9456-854aec5647cb\n"}}),"\n",(0,o.jsx)(n.h3,{id:"delete",children:"Delete"}),"\n",(0,o.jsxs)(n.p,{children:["To delete an ",(0,o.jsx)(n.code,{children:"AccountSet"}),", specify the AccountSetID:"]}),"\n",(0,o.jsx)(a.Ay,{code:{rust:"Coming soon\n",ts:'\nawait bankAdminClient.documents([{\n  oneofKind: "deleteDocument",\n  updateDocument: Operation_DeleteDocument.create({\n      collection: Collection.AccountSet,\n  }),\n}]);\n',dart:"\nfinal userId = await client.deleteUser(\nuserId: 'e92d87ed-5b31-40f6-8156-605fdcfa1184',\noperator: 'fis.m10.net',\ncontextId: '210d1967-e346-44b9-ba5a-9424b1cbfe18',\n);\n",cli:"\nm10 delete account-set \\\nb218136c-88fc-48ec-9456-854aec5647cb\n"}}),"\n",(0,o.jsx)(n.h3,{id:"list-find",children:"List (Find)"}),"\n",(0,o.jsxs)(n.p,{children:["To list ",(0,o.jsx)(n.code,{children:"AccountSets"}),", filter by account name or account owner:"]}),"\n",(0,o.jsx)(a.Ay,{code:{rust:"Coming soon\n",ts:"\nconst accountSets = await aliceClient.listAccountSets({\n  filter: {\n      oneofKind: 'owner',\n      owner: aliceSigner.getPublicKey().toUint8Array(),\n  },\n});\nconsole.log(accountSets);\n",dart:"// Not supported\n",cli:"m10 find account-sets \\\n--owner $wPf1jiymlaF6vdpTko5aBMcy1wnUc/KFvU8HlRgBqmY="}}),"\n",(0,o.jsx)(n.h3,{id:"get",children:"Get"}),"\n",(0,o.jsxs)(n.p,{children:["Get ",(0,o.jsx)(n.code,{children:"AccountSet"})," details:"]}),"\n",(0,o.jsx)(a.Ay,{code:{rust:"Coming soon\n",ts:"\nconst accountSet = await aliceClient.getAccountSet({\n  id: aliceAccountId.bytes,\n});\nconsole.log(accountSet);\n",dart:"\nfinal accountSet = await client.getUser(\nuserId: '9c80ab80-3f53-4a4c-b35e-217f5c5f24ea',\noperator: 'fis.m10.net',\n);\n",cli:"m10 get account-set b218136c-88fc-48ec-9456-854aec5647cb"}}),"\n",(0,o.jsx)("br",{}),"\n",(0,o.jsxs)(n.p,{children:["The response from the ",(0,o.jsx)(n.code,{children:"get account-set"})," would be something like:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:'(\n    id: "38a6edba-73b1-4e1c-ad20-ab23504829c5",\n    owner: "6h1qgk3bWkobbiUkeTr0M2/7p6hEkE3XtwisJZwqkSQ=",\n    accounts: ["3e800000000000000000000000000003", "3e800001000000000100000000000003", "3e800001000000000200000000000003"],\n)\n'})}),"\n",(0,o.jsx)("br",{}),"\n",(0,o.jsx)(n.admonition,{title:"HTTP/1",type:"info",children:(0,o.jsx)(n.p,{children:"To submit requests over HTTP/1 instead of HTTP/2 with the SDKs, use the http option."})})]})}function m(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(p,{...e})}):p(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>i});var c=t(6540);const o={},s=c.createContext(o);function a(e){const n=c.useContext(s);return c.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),c.createElement(s.Provider,{value:n},e.children)}}}]);