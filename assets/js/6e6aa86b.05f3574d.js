"use strict";(self.webpackChunkproduct=self.webpackChunkproduct||[]).push([[594],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>f});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},h=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,s=e.originalType,l=e.parentName,u=a(e,["components","mdxType","originalType","parentName"]),p=c(n),h=o,f=p["".concat(l,".").concat(h)]||p[h]||d[h]||s;return n?r.createElement(f,i(i({ref:t},u),{},{components:n})):r.createElement(f,i({ref:t},u))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var s=n.length,i=new Array(s);i[0]=h;var a={};for(var l in t)hasOwnProperty.call(t,l)&&(a[l]=t[l]);a.originalType=e,a[p]="string"==typeof e?e:o,i[1]=a;for(var c=2;c<s;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}h.displayName="MDXCreateElement"},750:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>i,metadata:()=>l,toc:()=>u});var r=n(7462),o=(n(7294),n(3905)),s=n(3894);const i={sidebar_position:1},a="Overview",l={unversionedId:"api/overview",id:"api/overview",title:"Overview",description:"The M10 Ledger provides an easy-to-use and expressive API for interacting with our platform. The M10 API uses gRPC for the transport mechanism, but you will mostly interact",source:"@site/docs/api/overview.mdx",sourceDirName:"api",slug:"/api/overview",permalink:"/api/overview",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"sidebar",previous:{title:"API Docs",permalink:"/category/api-docs"},next:{title:"Accounts",permalink:"/api/accounts"}},c={},u=[{value:"SDKs",id:"sdks",level:3},{value:"Authz &amp; Authn",id:"authz--authn",level:3},{value:"Observations",id:"observations",level:3},{value:"SDK Setup",id:"sdk-setup",level:2}],p={toc:u},d="wrapper";function h(e){let{components:t,...n}=e;return(0,o.kt)(d,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"overview"},"Overview"),(0,o.kt)("p",null,"The M10 Ledger provides an easy-to-use and expressive API for interacting with our platform. The M10 API uses gRPC for the transport mechanism, but you will mostly interact\nwith it through one of our SDKs. While not RESTful (in the traditional but potentially blasphemous way), we attempt to follow some of RESTs ideology. Our API is formulated around the\nidea of objects. For instance, transfers and accounts are two types of objects. Each of those objects has certain operations that take place on them.\nBroadly these are things like: create, read, list, etc. All objects and requests in the system are standard protobuf messages."),(0,o.kt)("h3",{id:"sdks"},"SDKs"),(0,o.kt)("p",null,"M10 offers 3 fully featured SDKs to use with our API: One for Rust, NodeJS, and Dart. Each is built on the same gRPC API definitions If your favorite language is not represented, don't despair, you can still use the raw gRPC API. The SDKs provide a thin-extension layer over the generated protobufs that help with signing and reducing boilerplate code. "),(0,o.kt)("h3",{id:"authz--authn"},"Authz & Authn"),(0,o.kt)("p",null,"The M10 API uses elliptic curve-based signing to authenticate each request. We support two common signature schemes: ED25519 and NIST-P256. Each request is wrapped in a protobuf message type called ",(0,o.kt)("inlineCode",{parentName:"p"},"RequestEnvelope"),", which contains the request itself and its signature. Request signing, in this style, satisfies the requirements outlined in the EU's PSD2 regulations. It also ensures that secrets always stay with the user, and are not transported across the internet."),(0,o.kt)("p",null,"For authorization, each request is checked by our RBAC (Role Based Access Control) system. You can read more details about that system in the ",(0,o.kt)("a",{parentName:"p",href:"./roles"},"Roles")," and ",(0,o.kt)("a",{parentName:"p",href:"./role-bindings"},"Role Bindings")," pages"),(0,o.kt)("h3",{id:"observations"},"Observations"),(0,o.kt)("p",null,"One distinctive part of M10's API is the ability to get an event stream of many objects in the system. For instance, you can observe transfers on specific accounts\nso you get notified of every transfer. Observations are built on gRPC's stream functionality, which allows for a long-running HTTP/2 connection that delivers periodic messages. Many of the ledger's most useful properties come from observations. They are essential if you want to build an FX service, run real-time AML checks, or build any other sort of event-sourced application. "),(0,o.kt)("h2",{id:"sdk-setup"},"SDK Setup"),(0,o.kt)("p",null,"The M10 SDK needs to be initialized before it can be used. This process is slightly different in each language, but always includes two key steps: connecting to the ledger and adding the signer."),(0,o.kt)(s.ZP,{code:{cli:"\nexport LEDGER_ADDR=...\nexport OPERATOR_KEY_FILE=... ",ts:'\nimport { utils, signer, client, collections } from "m10-sdk";\nimport * as sdk from  "m10-sdk";\nconst LEDGER_URL = "...";\nconst OPERATOR_KEY = "...";\nconst operatorSigner = signer.CryptoSigner.getSignerFromPkcs8V2(OPERATOR_KEY);\nconst ledgerClient = new sdk.M10Client(LEDGER_URL, operatorSigner);\n',rust:'\nuse m10_sdk::{M10Client, Ed25519};\nuse m10_sdk::client::Channel;\n\nlet LEDGER_URL = "...";\nlet operator_channel = Channel::from_static(LEDGER_URL).connect_lazy()?;\nlet operator_signer = Ed25519::load_key_pair("./key_file.pksc8").unwrap();\nlet client = M10Client::new(operator_signer, operator_channel);'},mdxType:"Code"}))}h.isMDXComponent=!0}}]);