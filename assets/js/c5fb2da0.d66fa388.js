"use strict";(self.webpackChunkproduct=self.webpackChunkproduct||[]).push([[433,2834],{246:(e,n,t)=>{t.d(n,{Ay:()=>c,RM:()=>a});var s=t(4848),i=t(8453),r=t(4753);const a=[{value:"Key Generation and Storage",id:"key-generation-and-storage",level:3},{value:"Access Controls and Authorization",id:"access-controls-and-authorization",level:3},{value:"Key Rotation and Revocation",id:"key-rotation-and-revocation",level:3},{value:"Monitoring and Auditing",id:"monitoring-and-auditing",level:3},{value:"Additional Considerations",id:"additional-considerations",level:3}];function o(e){const n={h3:"h3",li:"li",p:"p",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.p,{children:["On the ",(0,s.jsx)(r.ProductName,{})," platform, private keys are used to generate digital signatures, which are required to authenticate and authorize transactions on the blockchain."]}),"\n",(0,s.jsx)(n.p,{children:"Each participant has at least one private key."}),"\n",(0,s.jsx)(n.p,{children:"Banks, Payment Service Providers (PSPs) and developers must implement the utmost security measures to protect their private keys, which are critical for maintaining the integrity and confidentiality of their API communications. Here are some best practices:"}),"\n",(0,s.jsx)(n.h3,{id:"key-generation-and-storage",children:"Key Generation and Storage"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Hardware Security Modules (HSMs):"})," The most secure way to generate, store, and use private keys is within specialized hardware devices called HSMs. HSMs are designed to be tamper-resistant and offer robust cryptographic capabilities."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Key Management Systems (KMS):"})," Implement a KMS to manage the lifecycle of the private keys. This includes key generation, storage, rotation, and revocation. The KMS should enforce strict access controls and audit trails."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Secure Enclaves:"})," If HSMs are not feasible, consider using secure enclaves (e.g., Trusted Platform Modules or Intel SGX) within servers to provide an isolated and protected environment for key storage."]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"access-controls-and-authorization",children:"Access Controls and Authorization"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Least Privilege:"})," Employ the principle of least privilege, granting only the minimum necessary access to the private keys to authorized personnel and systems.\nRole-Based Access Control (RBAC): Implement RBAC to define and enforce different access levels for various roles involved in key management and API operations."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Strong Authentication:"})," Enforce strong multi-factor authentication (MFA) for any personnel accessing or managing private keys."]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"key-rotation-and-revocation",children:"Key Rotation and Revocation"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Regular Rotation:"})," Rotate private keys at regular intervals to minimize the impact of a potential key compromise. Establish a clear key rotation policy and schedule."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Revocation Mechanism:"})," Implement a robust mechanism to revoke compromised or expired private keys immediately."]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"monitoring-and-auditing",children:"Monitoring and Auditing"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Logging and Monitoring:"})," Maintain comprehensive logs of all key-related activities, including access attempts, usage, and changes. Continuously monitor these logs for any suspicious activity."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Regular Audits:"})," Conduct regular audits of the key management system and processes to ensure compliance with security policies and identify any potential weaknesses."]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"additional-considerations",children:"Additional Considerations"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Secure Communication:"})," Ensure that all API communication channels are encrypted using strong protocols (e.g., TLS 1.3) to prevent eavesdropping or tampering.\nIncident Response Plan: Develop and regularly test an incident response plan to address any potential security breaches or key compromises promptly."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Compliance:"})," Adhere to relevant industry standards and regulations (e.g., PCI DSS, PSD2) for private key management and API security."]}),"\n"]})]})}function c(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(o,{...e})}):o(e)}},788:(e,n,t)=>{t.d(n,{A:()=>c});t(6540);var s=t(8186),i=t(7430),r=t(4612),a=t(4767),o=t(4848);function c(e){let n=e.code.trim();return(0,o.jsx)("div",{className:"code",children:(0,o.jsxs)("div",{className:"code-inner",children:[(0,o.jsx)(s.Ay,{value:n,height:e.height||"auto",theme:i.IR,extensions:[a.gq[e.lang]],readOnly:"true"}),(0,o.jsx)(r.A,{code:n,className:"buttonGroup"})]})})}},2492:(e,n,t)=>{t.d(n,{Ay:()=>c,RM:()=>a});var s=t(4848),i=t(8453),r=t(4753);const a=[];function o(e){const n={a:"a",admonition:"admonition",code:"code",img:"img",li:"li",p:"p",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.p,{children:["The hierarchical ",(0,s.jsx)(r.ProductName,{})," ledger has two types of accounts:"]}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Type"}),(0,s.jsx)(n.th,{children:"Description"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"issuance accounts"})}),(0,s.jsx)(n.td,{children:'An issuance account can not have a balance higher than zero (0). When an issuance account transfers funds ("issues" funds) to a holding account, the issuance account balance goes negative and the holding account balance increases.'})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"holding accounts"})}),(0,s.jsx)(n.td,{children:"Holding accounts are children of issuance accounts."})]})]})]}),"\n",(0,s.jsxs)(n.p,{children:["An entity (such as a bank) on the ",(0,s.jsx)(r.ProductName,{})," ledger can have both a holding account and an issuance account."]}),"\n",(0,s.jsxs)(n.p,{children:["Transfers between two accounts traverse the account hierarchy to find the path between two accounts. For more details, see ",(0,s.jsx)(n.a,{href:"../api/transfers",children:"Transfers"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["An issuance account with child accounts (holding accounts) can obtain a recursive sum of all the child accounts balances in the ",(0,s.jsx)(n.code,{children:"issuance.issued_balance"})," field. This is useful for a bank or central bank to query all the money issued to its child accounts."]}),"\n",(0,s.jsx)(n.admonition,{type:"note",children:(0,s.jsxs)(n.p,{children:["There is a system limit of ",(0,s.jsx)(n.strong,{children:"256 root accounts"}),". Plan your issuance hierarchy accordingly."]})}),"\n",(0,s.jsxs)(n.p,{children:["The diagram below outlines the basic account structure of the hierarchical ",(0,s.jsx)(r.ProductName,{})," ledger. The USD root account, which is provided by the currency sponsor (central bank, or one or more appointed commercial banks), has no balance because it's at the root of the hierarchy but is negative 200 in issuance, meaning it has issued a total of 200 to child accounts:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Tungsten Bank has a balance of 90."}),"\n",(0,s.jsx)(n.li,{children:"Iron Bank has balances of 110"}),"\n",(0,s.jsx)(n.li,{children:"The sum of 90 + 110 being 200, which matches the negative issuing balance of the root account."}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Tungsten Bank has issued 500 to its child accounts, which include its own holding account and the holding accounts of Alice and Bob. Likewise, Iron Bank issued 100 to Chris (30) and Diego (70)."}),"\n",(0,s.jsx)(n.p,{children:"For Iron Bank to create a new ledger account for one of its customers, it would create it under its issuance account. To fund the new account, Iron Bank would create a transfer from its issuance account to the user's holding account (from parent account to child account)."}),"\n",(0,s.jsx)(n.p,{children:"In this example, the hierarchical ledger has three levels. However, the number of levels is technically unlimited."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"Account hierarchy",src:t(5484).A+"",width:"2009",height:"963"})})]})}function c(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(o,{...e})}):o(e)}},2511:(e,n,t)=>{t.d(n,{Ay:()=>o,RM:()=>r});var s=t(4848),i=t(8453);t(4753);const r=[];function a(e){const n={code:"code",p:"p",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.p,{children:"This is text for account recovery"}),"\n",(0,s.jsxs)(n.p,{children:["(Imported from ",(0,s.jsx)(n.code,{children:"../partials/_account-recovery-request.mdx"}),". REMOVE WHEN COMPLETED)"]})]})}function o(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(a,{...e})}):a(e)}},2679:(e,n,t)=>{t.d(n,{Ay:()=>l,RM:()=>o});var s=t(4848),i=t(8453),r=t(4767),a=(t(788),t(4753));const o=[{value:"How to Generate Keys",id:"how-to-generate-keys",level:4},{value:"Output",id:"output",level:4},{value:"Create ledger account",id:"create-ledger-account",level:4},{value:"Create AccountSet",id:"create-accountset",level:4},{value:"Create role binding",id:"create-role-binding",level:4},{value:"Create alias",id:"create-alias",level:4}];function c(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h4:"h4",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.p,{children:["Onboarding a customer to the ",(0,s.jsx)(a.ProductName,{})," Platform means creating an account for the customer on the ledger and assign the apropriate permissions (which may be changed later). Optionally, a directory alias can be added to make it easier to address the user when transfering digital money. The party onboarding the user (e.g. PSP) is responsible for complying with local KYC/KYB regulations."]}),"\n",(0,s.jsx)(n.p,{children:"The steps to onboard a user include:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Have the user generate a cryptographic key pair"}),"\n",(0,s.jsx)(n.li,{children:"Create a ledger account"}),"\n",(0,s.jsx)(n.li,{children:"Create a role binding (optional)"}),"\n",(0,s.jsxs)(n.li,{children:["Create alias (optional) (see section ",(0,s.jsx)(n.a,{href:"#managing-user-aliases",children:"Managing user aliases"}),")."]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Each user with their own ledger account, should have a cryptographic key pair that is generated by the account holder. The resulting private key must be stored securely with the account holder and the public key is used during the account creation process."}),"\n",(0,s.jsxs)(n.admonition,{type:"warning",children:[(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Why Users Should Generate Their Own Cryptographic Keys"})}),(0,s.jsx)(n.p,{children:"To ensure the highest level of security and control over API interactions, it is strongly recommend that users generate their own cryptographic key pairs. This key pair consists of a public key and a private key."}),(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Why Self-Generated Keys Matter:"})}),(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Reduced Risk of Compromise:"})," By generating their own keys, users minimize the risk of the keys falling into the wrong hands."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Stronger Authentication:"})," Using a self-generated private key for digital signatures strengthens the authentication process."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Full Ownership:"})," Complete ownership and control over keys, ensuring data remains secure."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Flexibility:"})," Manage and rotate keys as needed, adapting to evolving security best practices."]}),"\n"]})]}),"\n",(0,s.jsx)(n.h4,{id:"how-to-generate-keys",children:"How to Generate Keys"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(a.ProductName,{})," SDKs and CLI provide functions for key generation. The ",(0,s.jsx)(a.ProductName,{})," mobile SDK stores the private key in the mobile device's secure element, or trusted execution environment (TEE)."]}),"\n",(0,s.jsx)(n.p,{children:"The key pair should be in the PKCS8 format. If Alice were to generate a key pair, she would enter the following command:"}),"\n",(0,s.jsx)(r.Ay,{code:{cli:'\nexport ALICE_KEY_FILE="alice.pkcs8"\nexport ALICE_PUBLIC_KEY=$(m10 create key-pair -a ed25519 --path $CB_KEY_FILE)\nm10 get public-key -k $ALICE_KEY_FILE\n',ts:'\nconst aliceSigner = sdk.signer.CryptoSigner.generateKeyPair();\nconsole.log("public key is: ", aliceSigner.getPublicKey().toString());\n',rust:'\nuse m10_sdk::Signer;\nuse base64::engine::Engine;\nuse base64::engine::general_purpose::STANDARD as BASE64;\n\nlet (alice_kp, alice_signer) = Ed25519::new_key_pair_exportable().unwrap();\nprintln!("public key is: {}", BASE64.encode(alice_signer.public_key()));\nprintln!("key pair is: {}", BASE64.encode(alice_kp));\n'}}),"\n",(0,s.jsx)(n.h4,{id:"output",children:"Output"}),"\n",(0,s.jsx)(n.p,{children:"The output would be something like:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'created key pair file: "alice.pkcs8"\npublic key is:\n"hOJIkyqJ7/dUStWzcgj+afT1dBvJKczPvl5q70MpMaY="\n'})}),"\n",(0,s.jsx)(n.h4,{id:"create-ledger-account",children:"Create ledger account"}),"\n",(0,s.jsx)(n.p,{children:"Now that the user who should get a ledger account has a key pair, the bank can create the account."}),"\n",(0,s.jsx)(n.p,{children:"To create an account on the ledger:"}),"\n",(0,s.jsx)(r.Ay,{code:{rust:'\nuse m10_sdk::{AccountBuilder, sdk, account_id, DocumentBuilder, Signer};\n\nlet (_, account_id) = client.create_account(\nAccountBuilder::parent(account_id![0]?)\n\t.issuance(true)\n\t.frozen(false)\n\t.balance_limit(1_000_000)).await?;\nclient.documents(\nDocumentBuilder::default()\n.insert(sdk::AccountMetadata {\n  id: account_id.to_vec(),\n  owner: client.signer().public_key().to_vec(),\n  profile_image_url: "https://upload.wikimedia.org/wikipedia/commons/8/8b/Alice_Liddell.jpg".to_string(),\n  name: "Alice Lidell".to_string(),\n  public_name: "Alice Lidell".to_string()})).await?;',ts:'\nconst [_txId, accountId] = await ledgerClient.createAccount(\nnew sdk.AccountBuilder(new sdk.AccountId("0d800000000000000000000000000002"))\n  .issuance(false)\n  .frozen(false)\n);\nawait ledgerClient.documents(\nnew sdk.DocumentBuilder().insert(sdk.collections.Collection.AccountMetadata, new m10.sdk.model.AccountMetadata({\n  id: accountId.toUint8Array(),\n  name: "Alice Lidell",\n  publicName: "Alice Lidell",\n  owner: operatorSigner.getPublicKey().toUint8Array()\n}))\n);\n',dart:'\nclient.createAccount(\n parentId: "0d800000000000000000000000000002",\n operator: "m10.usd",\n name: "Alice Lidell",\n publicName: "Alice Lidell",\n owner: "hOJIkyqJ7/dUStWzcgj+afT1dBvJKczPvl5q70MpMaY=",\n profileImageUrl: "https://upload.wikimedia.org/wikipedia/commons/8/8b/Alice_Liddell.jpg",\n)\n',cli:"m10 create account \\\n--owner hOJIkyqJ7/dUStWzcgj+afT1dBvJKczPvl5q70MpMaY= \\ # key created in the previous step\n--parent-account 0d800000000000000000000000000002 \\ # the bank's issuance account\n--name 'Alice Lidell' \\\n--profile-image-url 'https://upload.wikimedia.org/wikipedia/commons/8/8b/Alice_Liddell.jpg' \\\n--public-name 'Alice Lidell' # name used in the directory"}}),"\n",(0,s.jsx)(n.h4,{id:"create-accountset",children:"Create AccountSet"}),"\n",(0,s.jsx)(n.p,{children:"Optionally..."}),"\n",(0,s.jsx)(n.p,{children:'"[insert code sample]"'}),"\n",(0,s.jsx)(n.h4,{id:"create-role-binding",children:"Create role binding"}),"\n",(0,s.jsxs)(n.p,{children:["We will assume that the issuer already has created a role for its customers called ",(0,s.jsx)(n.code,{children:"customer-role"}),". This role gives associated subjects permissions to their accounts. In this case, the permissions of the customer-role is ",(0,s.jsx)(n.code,{children:"READ"}),", ",(0,s.jsx)(n.code,{children:"TRANSACT"}),", and ",(0,s.jsx)(n.code,{children:"UPDATE"}),". See the documentation about ",(0,s.jsx)(n.a,{href:"../api/roles",children:"Roles"})," for more information."]}),"\n",(0,s.jsxs)(n.p,{children:["To bind the role ",(0,s.jsx)(n.code,{children:"customer-role"})," to Alice, we perform the following command:"]}),"\n",(0,s.jsx)(r.Ay,{code:{rust:'\nclient.documents(\n  DocumentBuilder::default().insert(sdk::RoleBinding {\n    id: uuid::Uuid::new_v4().as_bytes().to_vec().into(),\n    name: "customer-role-binding".to_string(),\n    role: uuid::Uuid::parse_str("72b79b75-5736-412d-a391-e7a190a36b15")?\n      .as_bytes()\n      .to_vec()\n      .into(), // The id of an already created role\n    subjects: vec![],\n    expressions: vec![sdk::Expression {\n        collection: "banks".to_string(),\n        expression: "document.owner == public_key".to_string() // make a role-binding that applies to owners of banks\n    }],\n    owner: client.signer().public_key().to_vec().into(),\n    is_universal: false\n  })\n).await?;\n',ts:" \nconst roleId = new sdk.DocumentId('role')\nconst roleBindingId = new sdk.DocumentId('role-binding')\nconst txId = await ledgerClient.documents(\n  new sdk.DocumentBuilder()\n      // Create a new role\n      .insert(\n          collections.Collection.Role, \n          new m10.sdk.Role({\n              id: roleId.toUint8Array(),\n              name: 'my role name',\n              owner: ledgerClient.getSigner().getPublicKey().toUint8Array()\n          })\n      )\n      // Create a role-binding for the role\n      .insert(\n          collections.Collection.RoleBinding,\n          new m10.sdk.RoleBinding({\n              id: roleBindingId.toUint8Array(),\n              name: 'my role binding name',\n              role: roleId.toUint8Array(),\n              subjects: [\n                  new sdk.PublicKey('hOJIkyqJ7/dUStWzcgj+afT1dBvJKczPvl5q70MpMaY=').toUint8Array()\n              ],\n          }),\n      ),\n)\nconsole.log(`Created role-binding ${roleBindingId} in transaction ${txId}`)\n",dart:'\nclient.createRoleBinding(\n name: "customer-role-binding",\n role: "72b79b75-5736-412d-a391-e7a190a36b15",\n subjects: ["hOJIkyqJ7/dUStWzcgj+afT1dBvJKczPvl5q70MpMaY="]\n operator: \'fis.m10.net\',\n)\n',cli:'m10 create role-binding \\\n  --name "customer-role-binding" \\ # The name of the binding\n  --role "72b79b75-5736-412d-a391-e7a190a36b15" \\ # The ID (uuid) of the role\n  --owner "wPf1jiymlaF6vdpTko5aBMcy1wnUc/KFvU8HlRgBqmY=" \\ # The bank\'s public key\n  --subject "hOJIkyqJ7/dUStWzcgj+afT1dBvJKczPvl5q70MpMaY=" # Alice\'s public key\n'}}),"\n",(0,s.jsx)(n.h1,{id:""}),"\n",(0,s.jsx)(n.h4,{id:"create-alias",children:"Create alias"}),"\n",(0,s.jsxs)(n.p,{children:["Now that we've created the user Alice with an account and permissions to access her account, we can create an alias, so she's easier to find the ",(0,s.jsx)(a.ProductName,{})," Directory. We will use Alice's phone number, ",(0,s.jsx)(n.code,{children:"+1 555-555-5555"}),"."]}),"\n",(0,s.jsx)(n.p,{children:'"[insert code sample]"'})]})}function l(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},3773:(e,n,t)=>{t.d(n,{Ay:()=>c,RM:()=>a});var s=t(4848),i=t(8453),r=t(4753);const a=[];function o(e){const n={li:"li",p:"p",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.p,{children:["Offboarding a customer means disabling the ",(0,s.jsx)(r.ProductName,{})," account from receiving, or sending funds transfer, or perform any action on the account and deactivate the alias entry. For compliance reasons, an account isn't deleted, but rather made unavailable. Before disabling an account, the balance must be zero."]}),"\n",(0,s.jsx)(n.p,{children:"Steps to offboard a user:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Disable user's ledger account"}),"\n",(0,s.jsx)(n.li,{children:"Deactivate alias registry"}),"\n"]})]})}function c(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(o,{...e})}):o(e)}},4177:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>j,contentTitle:()=>x,default:()=>v,frontMatter:()=>m,metadata:()=>s,toc:()=>f});const s=JSON.parse('{"id":"playbooks/issuer","title":"Issuer","description":"Learn how to perform the tasks of an Issuer.","source":"@site/docs/playbooks/issuer.mdx","sourceDirName":"playbooks","slug":"/playbooks/issuer","permalink":"/playbooks/issuer","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1}}');var i=t(4848),r=t(8453),a=t(4767),o=(t(788),t(4753)),c=t(2492),l=t(2679),d=t(3773);function h(e){const n={code:"code",p:"p",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:"This is text for managing aliases"}),"\n",(0,i.jsxs)(n.p,{children:["(Imported from ",(0,i.jsx)(n.code,{children:"../partials/_aliases.mdx"}),". REMOVE WHEN COMPLETED)"]})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}var g=t(2511),p=t(246);const m={sidebar_position:1},x="Issuer",j={},f=[{value:"Integrate with the <ProductName></ProductName> platform",id:"integrate-with-the--platform",level:2},{value:"Overview",id:"overview",level:3},{value:"Integration tools",id:"integration-tools",level:3},{value:"Code examples",id:"code-examples",level:3},{value:"Understanding the account structure",id:"understanding-the-account-structure",level:3},...c.RM,{value:"Main Issuer activities",id:"main-issuer-activities",level:2},{value:"Onboard customers",id:"onboard-customers",level:3},{value:"Onboarding data flow",id:"onboarding-data-flow",level:4},...l.RM,{value:"Onboarding code example",id:"onboarding-code-example",level:4},{value:"Offboard customers",id:"offboard-customers",level:3},...d.RM,{value:"Offboarding data flow",id:"offboarding-data-flow",level:4},{value:"Offboarding code example",id:"offboarding-code-example",level:4},{value:"Issue digital money",id:"issue-digital-money",level:3},{value:"Issuing data flow",id:"issuing-data-flow",level:4},{value:"Issuing code example",id:"issuing-code-example",level:4},{value:"Redeem digital money",id:"redeem-digital-money",level:3},{value:"Redemption data flow",id:"redemption-data-flow",level:4},{value:"Redemption code example",id:"redemption-code-example",level:4},{value:"Freeze ledger account",id:"freeze-ledger-account",level:2},{value:"Freeze ledger account code example",id:"freeze-ledger-account-code-example",level:4},{value:"Managing user aliases",id:"managing-user-aliases",level:2},{value:"Facilitate an account recovery request by a customer",id:"facilitate-an-account-recovery-request-by-a-customer",level:2},...g.RM,{value:"Manage private keys",id:"manage-private-keys",level:2},...p.RM,{value:"Generate reports",id:"generate-reports",level:2}];function y(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",mermaid:"mermaid",ol:"ol",p:"p",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"issuer",children:"Issuer"})}),"\n",(0,i.jsx)(n.p,{children:"Learn how to perform the tasks of an Issuer."}),"\n",(0,i.jsxs)(n.h2,{id:"integrate-with-the--platform",children:["Integrate with the ",(0,i.jsx)(o.ProductName,{})," platform"]}),"\n",(0,i.jsx)(n.h3,{id:"overview",children:"Overview"}),"\n",(0,i.jsxs)(n.p,{children:["This playbook outlines the process of creating a service to integrate a banking system with the ",(0,i.jsx)(o.ProductName,{})," ledger system. The service receives messages or webhooks from the internal banking system, then creates and/or updates ",(0,i.jsx)(o.ProductName,{})," resources. The service also has an interface for client applications such as a mobile app or web portal. This interface is used to request user onboarding, deposits and withdrawals, and other resource handling."]}),"\n",(0,i.jsx)(n.h3,{id:"integration-tools",children:"Integration tools"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(o.ProductName,{})," Client SDK is the main integration tool used to connect internal banking systems with the ",(0,i.jsx)(o.ProductName,{})," ledger system. The SDKs currently supported are:"]}),"\n",(0,i.jsxs)(n.p,{children:["[",(0,i.jsx)(o.ProductName,{})," Rust SDK](",(0,i.jsx)(n.a,{href:"https://crates.io/crates/",children:"https://crates.io/crates/"}),(0,i.jsx)(o.ProductName,{}),"-sdk)\n[",(0,i.jsx)(o.ProductName,{})," Dart SDK](",(0,i.jsx)(n.a,{href:"https://pub.dev/packages/",children:"https://pub.dev/packages/"}),(0,i.jsx)(o.ProductName,{}),"_sdk)\n[",(0,i.jsx)(o.ProductName,{})," Node.js SDK](",(0,i.jsx)(n.a,{href:"https://www.npmjs.com/package/",children:"https://www.npmjs.com/package/"}),(0,i.jsx)(o.ProductName,{}),"-sdk)"]}),"\n",(0,i.jsx)(n.h3,{id:"code-examples",children:"Code examples"}),"\n",(0,i.jsxs)(n.p,{children:["Examples throughout this document will use the ",(0,i.jsx)(o.ProductName,{})," Dart SDK. The same methods are implemented in the Node.js SDK."]}),"\n",(0,i.jsx)(n.h3,{id:"understanding-the-account-structure",children:"Understanding the account structure"}),"\n",(0,i.jsxs)(n.p,{children:["Understanding the account structure of the ",(0,i.jsx)(o.ProductName,{})," ledger is important. If you've read the ",(0,i.jsx)(n.a,{href:"/overview",children:"Overview"}),", here follows another level of detail:"]}),"\n","\n",(0,i.jsx)(c.Ay,{}),"\n",(0,i.jsx)(n.h2,{id:"main-issuer-activities",children:"Main Issuer activities"}),"\n",(0,i.jsx)(n.p,{children:"As an Issuer, you typically perform the following activities:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#onboard-customers",children:"Onboard customer"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#offboard-customers",children:"Offboard customer"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#issue-digital-money",children:"Issue digital money to a customer"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#redeem-digital-money",children:"Redeem digital money for a customer"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#freeze-ledger-account",children:"Freeze a customer account"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#facilitate-an-account-recovery-request-by-a-customer",children:"Facilitate an account recovery request by a customer"})}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Below we'll explain each activity and provide data flows and example code."}),"\n",(0,i.jsx)(n.h3,{id:"onboard-customers",children:"Onboard customers"}),"\n",(0,i.jsx)(n.h4,{id:"onboarding-data-flow",children:"Onboarding data flow"}),"\n",(0,i.jsx)(n.p,{children:"In this example we assume that the user's Issuer, or PSP requests KYC of the user. However, other scenarios are also possible."}),"\n",(0,i.jsx)(n.mermaid,{value:"sequenceDiagram\n    participant U as Alice\n    participant P as PSP\n    participant M as <ProductName /> Platform\n    participant K as KYC Partner\n\n    U -) P: register(metadata, pk)\n    P ->> K: request KYC\n    K ->> K: KYC performed\n    K --\x3e> P: KYC Ok\n    P -) M: register(metadata, pk)\n    M ->> U: request phone number verification\n    U --\x3e> M: phone number verified\n    M ->> M: register user\n    note over M: create account, alias, etc.\n    M --) P: register Ok\n    P --) U: register Ok"}),"\n",(0,i.jsx)("br",{}),"\n",(0,i.jsx)("br",{}),"\n","\n",(0,i.jsx)(l.Ay,{}),"\n",(0,i.jsx)(n.h4,{id:"onboarding-code-example",children:"Onboarding code example"}),"\n",(0,i.jsxs)(n.p,{children:["Let's put all the onboarding code together. In this code example we focus on the interactions between the PSP and the ",(0,i.jsx)(o.ProductName,{})," platform and KYC partner."]}),"\n",(0,i.jsx)(a.Ay,{code:{cli:"\n",ts:"\n",rust:"\n"}}),"\n",(0,i.jsx)(n.h3,{id:"offboard-customers",children:"Offboard customers"}),"\n","\n",(0,i.jsx)(d.Ay,{}),"\n",(0,i.jsx)(n.h4,{id:"offboarding-data-flow",children:"Offboarding data flow"}),"\n",(0,i.jsx)(n.mermaid,{value:"sequenceDiagram\n    participant U as User\n    participant P as PSP\n    participant M as <ProductName /> Platform\n\n    U -) P: deregister(metadata, pk)\n    P ->> M: request user's account balance\n    M --\x3e> P: return balance\n\n    alt balance > 0\n    P --) U: deregister failed. Balance > 0\n\n    else balance = 0\n    P ->> M: deregister account\n    M --\x3e> P: account deregistered\n    P --) U: deregistration Ok\n    end"}),"\n",(0,i.jsx)(n.h4,{id:"offboarding-code-example",children:"Offboarding code example"}),"\n",(0,i.jsx)(a.Ay,{code:{cli:"\n",ts:"\n",rust:"\n"}}),"\n",(0,i.jsx)(n.h3,{id:"issue-digital-money",children:"Issue digital money"}),"\n",(0,i.jsx)(n.p,{children:"Issuing money  (or digital asset) means transferring funds from an issuing account to a holding account.  The starting point is that issuing account has a balance of zero (0). When issuing funds to a holding account, the balance of the issuing account goes negative and the balance of the holding account goes positive. To illustrate, we have three issuing transactions in the amounts 100 (to Alice), 50 (to Bob) and 40 (10 to Alice and 30 to Bob)."}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{style:{textAlign:"right"},children:"Transaction"}),(0,i.jsx)(n.th,{style:{textAlign:"right"},children:"Amount"}),(0,i.jsx)(n.th,{style:{textAlign:"right"},children:"Issuing account"}),(0,i.jsx)(n.th,{style:{textAlign:"right"},children:"Alice's holding account"}),(0,i.jsx)(n.th,{style:{textAlign:"right"},children:"Bob's holding account"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"right"},children:"0"}),(0,i.jsx)(n.td,{style:{textAlign:"right"},children:"0"}),(0,i.jsx)(n.td,{style:{textAlign:"right"},children:"0"}),(0,i.jsx)(n.td,{style:{textAlign:"right"},children:"0"}),(0,i.jsx)(n.td,{style:{textAlign:"right"},children:"0"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"right"},children:"1"}),(0,i.jsx)(n.td,{style:{textAlign:"right"},children:"100"}),(0,i.jsx)(n.td,{style:{textAlign:"right"},children:"-100"}),(0,i.jsx)(n.td,{style:{textAlign:"right"},children:"100"}),(0,i.jsx)(n.td,{style:{textAlign:"right"},children:"0"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"right"},children:"2"}),(0,i.jsx)(n.td,{style:{textAlign:"right"},children:"50"}),(0,i.jsx)(n.td,{style:{textAlign:"right"},children:"- 150"}),(0,i.jsx)(n.td,{style:{textAlign:"right"},children:"100"}),(0,i.jsx)(n.td,{style:{textAlign:"right"},children:"50"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"right"},children:"3"}),(0,i.jsx)(n.td,{style:{textAlign:"right"},children:"40"}),(0,i.jsx)(n.td,{style:{textAlign:"right"},children:"- 190"}),(0,i.jsx)(n.td,{style:{textAlign:"right"},children:"110"}),(0,i.jsx)(n.td,{style:{textAlign:"right"},children:"80"})]})]})]}),"\n",(0,i.jsx)(n.p,{children:"An issuer can issue funds to its own holding account, or a customer's holding account."}),"\n",(0,i.jsx)(n.p,{children:"Assumptions:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Issuer is a bank, or PSP issuing deposit tokens or stablecoins."}),"\n",(0,i.jsx)(n.li,{children:"The user has been onboarded"}),"\n",(0,i.jsx)(n.li,{children:"The user holds deposits with the issuer (the issuer is the user's bank)"}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"issuing-data-flow",children:"Issuing data flow"}),"\n",(0,i.jsx)(n.mermaid,{value:"sequenceDiagram\n    participant U as User\n    participant I as Issuer\n    participant M as <ProductName /> Platform\n\n    U -) I: request digital asset\n    I ->> I: check User's balance in deposit account\n\n    alt balance < requested amount\n    I --) U: request failed. Insufficient funds\n\n    else balance >= requested amount\n    I ->> I: debit User's deposit account\n    I ->> M: request credit User's digital asset account\n    M ->> M: debit Issuer's account / credit User's account\n    M --\x3e> I: request Ok\n    I --) U: request Ok\n    end"}),"\n",(0,i.jsx)(n.h4,{id:"issuing-code-example",children:"Issuing code example"}),"\n",(0,i.jsx)(a.Ay,{code:{cli:"\n",ts:"\n",rust:"\n"}}),"\n",(0,i.jsx)(n.h3,{id:"redeem-digital-money",children:"Redeem digital money"}),"\n",(0,i.jsx)(n.p,{children:"Redeeming digital money (or digital asset) is the reverse of issuing digital money \u2014 a holder of digital money requests the exchange of digital money for bank deposits. The request may come from the user directly, or through a PSP serving the user."}),"\n",(0,i.jsx)(n.p,{children:"Assumption: Issuer is a bank, or PSP redeeming deposit tokens or stablecoins."}),"\n",(0,i.jsx)(n.h4,{id:"redemption-data-flow",children:"Redemption data flow"}),"\n",(0,i.jsx)(n.mermaid,{value:"sequenceDiagram\n    participant U as User\n    participant I as Issuer\n    participant M as <ProductName /> Platform\n\n    U -) I: request digital asset redemption\n    I ->> M: check User's digital asset balance\n    M --\x3e> I: return balance\n\n    alt balance < requested redemption amount\n    I --) U: request failed. Insufficient funds\n\n    else balance >= requested redemption amount\n    I ->> M: request debit User's digital asset account\n    M ->> M: debit User's digital asset account\n    M --\x3e> I: request Ok\n    I ->> I: credit User's bank deposit account\n    I --) U: request Ok\n    end"}),"\n",(0,i.jsx)(n.h4,{id:"redemption-code-example",children:"Redemption code example"}),"\n",(0,i.jsx)(a.Ay,{code:{cli:"\n",ts:"\n",rust:"\n"}}),"\n",(0,i.jsx)(n.h2,{id:"freeze-ledger-account",children:"Freeze ledger account"}),"\n",(0,i.jsxs)(n.p,{children:["An account that has been ",(0,i.jsx)(n.code,{children:"frozen"})," can no longer send, or receive funds. The balance of the account is not changed while the account is frozen."]}),"\n",(0,i.jsx)(n.h4,{id:"freeze-ledger-account-code-example",children:"Freeze ledger account code example"}),"\n",(0,i.jsx)(a.Ay,{code:{cli:"\n",ts:"\n",rust:"\n"}}),"\n",(0,i.jsx)(n.h2,{id:"managing-user-aliases",children:"Managing user aliases"}),"\n","\n",(0,i.jsx)(u,{}),"\n",(0,i.jsx)(n.h2,{id:"facilitate-an-account-recovery-request-by-a-customer",children:"Facilitate an account recovery request by a customer"}),"\n","\n",(0,i.jsx)(g.Ay,{}),"\n",(0,i.jsx)(n.h2,{id:"manage-private-keys",children:"Manage private keys"}),"\n","\n",(0,i.jsx)(p.Ay,{}),"\n",(0,i.jsx)(n.h2,{id:"generate-reports",children:"Generate reports"})]})}function v(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(y,{...e})}):y(e)}},4753:(e,n,t)=>{t.r(n),t.d(n,{ProductName:()=>l,assets:()=>c,contentTitle:()=>o,default:()=>u,frontMatter:()=>a,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"components/variables","title":"variables","description":"","source":"@site/docs/components/variables.mdx","sourceDirName":"components","slug":"/components/variables","permalink":"/components/variables","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{}}');var i=t(4848),r=t(8453);const a={},o=void 0,c={},l=()=>(0,i.jsx)("span",{children:"DRM"}),d=[];function h(e){return(0,i.jsx)(i.Fragment,{})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(h,{...e})}):h()}},5484:(e,n,t)=>{t.d(n,{A:()=>s});const s=t.p+"assets/images/account-hierarchy-fd9a4c3aefc2104f8e8c2a907a9706db.svg"},8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>o});var s=t(6540);const i={},r=s.createContext(i);function a(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);