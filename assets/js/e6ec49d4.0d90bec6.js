"use strict";(self.webpackChunkproduct=self.webpackChunkproduct||[]).push([[433,5187],{788:(e,n,t)=>{t.d(n,{A:()=>r});t(6540);var l=t(8186),s=t(7430),i=t(4612),a=t(4767),o=t(4848);function r(e){let n=e.code.trim();return(0,o.jsx)("div",{className:"code",children:(0,o.jsxs)("div",{className:"code-inner",children:[(0,o.jsx)(l.Ay,{value:n,height:e.height||"auto",theme:s.IR,extensions:[a.gq[e.lang]],readOnly:"true"}),(0,o.jsx)(i.A,{code:n,className:"buttonGroup"})]})})}},4753:(e,n,t)=>{t.r(n),t.d(n,{ProductName:()=>c,assets:()=>r,contentTitle:()=>o,default:()=>h,frontMatter:()=>a,metadata:()=>l,toc:()=>d});const l=JSON.parse('{"id":"components/variables","title":"variables","description":"","source":"@site/docs/components/variables.mdx","sourceDirName":"components","slug":"/components/variables","permalink":"/components/variables","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{}}');var s=t(4848),i=t(8453);const a={},o=void 0,r={},c=()=>(0,s.jsx)("span",{children:"DRM"}),d=[];function u(e){return(0,s.jsx)(s.Fragment,{})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(u,{...e})}):u()}},7221:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>d,default:()=>p,frontMatter:()=>c,metadata:()=>l,toc:()=>h});const l=JSON.parse('{"id":"api/roles","title":"Roles","description":"A Role is a core element of the  permissions system. Roles group together a set of permissions on resources into a single object. For example:","source":"@site/docs/api/roles.mdx","sourceDirName":"api","slug":"/api/roles","permalink":"/api/roles","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"sidebar","previous":{"title":"Banks","permalink":"/api/banks"},"next":{"title":"Role Bindings","permalink":"/api/role-bindings"}}');var s=t(4848),i=t(8453),a=t(4767),o=t(788),r=t(4753);const c={},d="Roles",u={},h=[{value:"Rules",id:"rules",level:2},{value:"Collection",id:"collection",level:3},{value:"Verb",id:"verb",level:3},{value:"Instance",id:"instance",level:3},{value:"Model",id:"model",level:2},{value:"API Requests",id:"api-requests",level:2},{value:"Create",id:"create",level:3},{value:"Update",id:"update",level:3},{value:"Delete",id:"delete",level:3},{value:"List (Find)",id:"list-find",level:3},{value:"Get",id:"get",level:3},{value:"Output",id:"output",level:4}];function x(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"roles",children:"Roles"})}),"\n",(0,s.jsxs)(n.p,{children:["A ",(0,s.jsx)(n.em,{children:"Role"})," is a core element of the ",(0,s.jsx)(r.ProductName,{})," permissions system. Roles group together a set of permissions on resources into a single object. For example:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["a Role called ",(0,s.jsx)(n.code,{children:"bank-admin"})," that allows a user to create accounts and read data from accounts."]}),"\n",(0,s.jsxs)(n.li,{children:["a Role called ",(0,s.jsx)(n.code,{children:"support"})," that enables users to only read account information."]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:['Roles must be "bound" to users (public keys) using a ',(0,s.jsx)(n.a,{href:"./role-bindings",children:"Role Bindings"})," for them to come in effect."]}),"\n",(0,s.jsx)(n.h2,{id:"rules",children:"Rules"}),"\n",(0,s.jsxs)(n.p,{children:["A ",(0,s.jsx)(n.em,{children:"Role"})," is made up of one or more ",(0,s.jsx)(n.em,{children:"Rules"}),". A rule contains three parameters:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"#collection",children:"collection"})," - the type of resource"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"#verb",children:"verb"})," - the action to perform on a collection"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"#instance",children:"instance"})," - [optional] the particular instance of the collection"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"collection",children:"Collection"}),"\n",(0,s.jsx)(n.p,{children:"The collection is the type of object to which you are granting permissions. The current supported collections are:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Accounts"}),"\n",(0,s.jsx)(n.li,{children:"AccountSets"}),"\n",(0,s.jsx)(n.li,{children:"AccountMetadata"}),"\n",(0,s.jsx)(n.li,{children:"Banks"}),"\n",(0,s.jsx)(n.li,{children:"Roles"}),"\n",(0,s.jsx)(n.li,{children:"RoleBindings"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"verb",children:"Verb"}),"\n",(0,s.jsx)(n.p,{children:"The verb is the action that can be performed on a collection."}),"\n",(0,s.jsx)(n.p,{children:"The following verbs are supported for all of the collection types:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"READ"})," - Read data"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"CREATE"})," - Create data"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"UPDATE"})," - Update data"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"DELETE"})," - Delete data"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["The following verbs are only used for ",(0,s.jsx)(n.em,{children:"Accounts"})," collections:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"TRANSACT"})," - Perform transactions (",(0,s.jsx)(n.code,{children:"INITIATE"})," + ",(0,s.jsx)(n.code,{children:"COMMIT"}),")."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"INITIATE"})," - Initiate transactions. In a pending state until committed."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"COMMIT"})," - Commit the transaction. Finalize the transaction and release the pending state."]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"instance",children:"Instance"}),"\n",(0,s.jsx)(n.p,{children:"Optionally, each rule can apply to only a certain part of the collection, which can be specified by:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"instance"})," - apply to only a particular instance"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"instance_keys"})," - apply to only a particular instance key"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"excluded_instance"})," - apply to all instances of the collection except a particular instance"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"excluded_instance_keys"})," - apply to all instance keys of the collection except a particular instance key"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["For example, to give a user access to their account only, you create a rule on the collection ",(0,s.jsx)(n.em,{children:"Accounts"})," with the desired verbs and ",(0,s.jsx)(n.code,{children:"accountId"})," for the user's account listed in ",(0,s.jsx)(n.code,{children:"instance_keys"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["The format of the ",(0,s.jsx)(n.code,{children:"instance"})," or ",(0,s.jsx)(n.code,{children:"instance_keys"})," depends on the collection it applies to."]}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{style:{textAlign:"left"},children:"Collection"}),(0,s.jsx)(n.th,{style:{textAlign:"left"},children:"instance / instance_key"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"Accounts"}),(0,s.jsx)(n.td,{style:{textAlign:"left"},children:(0,s.jsx)(n.code,{children:"Account_Id"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"AccountMetadata"}),(0,s.jsx)(n.td,{style:{textAlign:"left"},children:(0,s.jsx)(n.code,{children:"AccountMetadata_Id"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"AccountSets"}),(0,s.jsx)(n.td,{style:{textAlign:"left"},children:(0,s.jsx)(n.code,{children:"AccountSet_Id"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"Banks"}),(0,s.jsx)(n.td,{style:{textAlign:"left"},children:(0,s.jsx)(n.code,{children:"Bank_Id"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"Roles"}),(0,s.jsx)(n.td,{style:{textAlign:"left"},children:(0,s.jsx)(n.code,{children:"Role_Id"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"RoleBindings"}),(0,s.jsx)(n.td,{style:{textAlign:"left"},children:(0,s.jsx)(n.code,{children:"RoleBinding_Id"})})]})]})]}),"\n",(0,s.jsxs)(n.p,{children:["For example, to create a role with a rule on the collection ",(0,s.jsx)(n.em,{children:"Roles"})," that gives the subject Read, Update, and Delete capabilities, you would use:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'--rules "rule -c roles -v Read -v Update -v Delete roles -v Read -v Update -v Delete -i <RoleId>"\n'})}),"\n",(0,s.jsx)(n.h2,{id:"model",children:"Model"}),"\n",(0,s.jsxs)(n.p,{children:["The data model for the ",(0,s.jsx)(r.ProductName,{})," Roles is defined in ",(0,s.jsx)(n.code,{children:"rbac.proto"}),":"]}),"\n",(0,s.jsx)(o.A,{code:"\nmessage Role {\n  bytes id = 1;\n  bytes owner = 2;                            // The owner (public key) of the role\n  string name = 3;                            // The name of the role\n  repeated Rule rules = 4;                    // rules defining the permissions\n}\n\nmessage Rule {\n  string collection = 2;                      // Roles, Role-bindings, Accounts, Account Metadata, or custom\n  repeated Value instance_keys = 3;           // Restrict the rule to listed instances \n  repeated Verb verbs = 4;\n  repeated Value excluded_instance_keys = 5;  // Restrict the rule to exclude the listed instances \n  enum Verb {                                 // Verbs associated with the rule\n      READ = 0;\n      CREATE = 1;\n      UPDATE = 2;\n      DELETE = 3;\n      TRANSACT = 4;\n      INITIATE = 5;\n      COMMIT = 6;\n  }\n}\n",lang:"protobuf"}),"\n",(0,s.jsx)(n.h2,{id:"api-requests",children:"API Requests"}),"\n",(0,s.jsx)(n.h3,{id:"create",children:"Create"}),"\n",(0,s.jsxs)(n.p,{children:["To create a role on the ",(0,s.jsx)(r.ProductName,{})," platform."]}),"\n",(0,s.jsx)(a.Ay,{code:{rust:'\nuse prost::bytes::Bytes;\nuse m10_sdk::Collection;\nlet account_id = Bytes::copy_from_slice(&hex::decode("00800005000000000000000000000002")?);\nclient.documents(\n  DocumentBuilder::default().insert(sdk::Role {\n      id: uuid::Uuid::parse_str("6aa51062-452b-482a-aff0-3e7df1a1aae9")?\n          .as_bytes()\n          .to_vec()\n          .into(),\n      name: "bank-admin".to_string(),\n      rules: vec![\n          sdk::Rule {\n              collection: m10_sdk::Collection::Banks.to_string(),\n              instance_keys: vec![Bytes::copy_from_slice(\n                  uuid::Uuid::parse_str("bc3b532d-6be0-45e1-b98c-5ddc6e8e239a")?\n                      .as_bytes(),\n              )\n              .into()],\n              verbs: vec![sdk::rule::Verb::Read as i32],\n          },\n          sdk::Rule {\n              collection: "ledger-accounts".to_string(),\n              instance_keys: vec![account_id.clone().into()],\n              verbs: vec![sdk::rule::Verb::Create as i32],\n          },\n          sdk::Rule {\n              collection: Collection::AccountMetadata.to_string(),\n              instance_keys: vec![account_id.into()],\n              verbs: vec![\n                  sdk::rule::Verb::Create as i32,\n                  sdk::rule::Verb::Read as i32,\n              ],\n          },\n      ],\n      owner: client.signer().public_key().to_vec().into(),\n  }),\n).await?;\n',ts:'\n  const role = Role.create({\n      id: ResourceId.generate().bytes,\n      name: "bank-admin",\n      rules: [\n          // Can CREATE accounts\n          {\n              collection: Collection.LedgerAccount,\n              verbs: [Rule_Verb.CREATE],\n          },\n          // Can TRANSACT only on the specified account ID\n          {\n              collection: Collection.LedgerAccount,\n              verbs: [ Rule_Verb.TRANSACT ],\n              instanceKeys: [Value.create({ value: { oneofKind: "bytesValue", bytesValue: accountId.bytes } })],\n          },\n      ],\n  });\n\n  /* send transaction to create document */\n  const txId = await ledgerClient.documents([{\n      oneofKind: "insertDocument",\n      insertDocument: Operation_InsertDocument.create({\n          collection: Collection.Role,\n          document: Role.toBinary(role),\n      }),\n  }]);\n\n  console.log(`Created role ${role.id} in transaction ${txId}`)\n',dart:"\nfinal roleId = await client.createRole(\nname: 'bank-admin',\nrules: [\n  RuleDoc.fromStrings(\n      'banks', ['READ'], ['bc3b532d-6be0-45e1-b98c-5ddc6e8e239a']),\n  RuleDoc.fromStrings(\n    'accounts',\n    ['CREATE', 'READ'],\n    ['00800005000000000000000000000002'],\n  ),\n  RuleDoc.fromStrings(\n      'ledger-accounts', ['CREATE'], ['00800005000000000000000000000002'])\n],\noperator: 'fis.m10.net',\n);\n",cli:'\nm10 create role \\\n--id 6aa51062-452b-482a-aff0-3e7df1a1aae9 \\\n--name bank-admin \\\n--rule "rule -c banks -v Read -i bc3b532d-6be0-45e1-b98c-5ddc6e8e239a" \\\n--rule "rule -c accounts -v Create -v Read -i 00800005000000000000000000000002" \\\n--rule "rule -c ledger-accounts -v Create -i 00800005000000000000000000000002"\n'}}),"\n",(0,s.jsx)(n.h1,{id:""}),"\n",(0,s.jsx)(n.h3,{id:"update",children:"Update"}),"\n",(0,s.jsx)(n.p,{children:"To update a role."}),"\n",(0,s.jsx)(n.admonition,{type:"note",children:(0,s.jsx)(n.p,{children:"When updating roles, the new rule(s) is appended at the end. The last rule for a collection in the list is the active rule."})}),"\n",(0,s.jsx)(a.Ay,{code:{rust:'\nclient.documents(\n      DocumentBuilder::default().update(\n          m10_sdk::DocumentUpdate::<sdk::Role>::new(uuid::Uuid::parse_str(\n              "6aa51062-452b-482a-aff0-3e7df1a1aae9",\n          )?)\n          .name("ext-bank-admin".to_string())\n          .rules(vec![sdk::Rule {\n              collection: Collection::Roles.to_string(),\n              instance_keys: vec![Bytes::copy_from_slice(\n                  uuid::Uuid::parse_str("6df7043d-d2d0-4d7e-b5ca-bdb9b68b4548")?\n                      .as_bytes(),\n              )\n              .into()],\n              verbs: vec![\n                  sdk::rule::Verb::Create as i32,\n                  sdk::rule::Verb::Read as i32,\n                  sdk::rule::Verb::Update as i32,\n              ],\n          }]),\n      ),\n  ).await?;\n',ts:'\nawait ledgerClient.documents([\n  {\n      oneofKind: "updateDocument",\n      updateDocument: Operation_UpdateDocument.create({\n          collection: Collection.Role,\n          primaryKey: Value.create({\n              value: {\n                  oneofKind: "bytesValue",\n                  bytesValue: role.id,\n              },\n          }),\n          document: Role.toBinary(\n              Role.create({\n                  name: \'new-name\',\n                  id: role.id,\n              }),\n          ),\n          fieldMask: FieldMask.create({\n              paths: ["name"],\n          }),\n      }),\n  },\n]);\n',dart:"\nfinal roleId = await client.updateRole(\nname: 'ext-bank-admin',\nrules: [\n  RuleDoc.fromStrings(\n    'roles',\n    ['CREATE', 'READ', 'UPDATE'],\n    ['6df7043d-d2d0-4d7e-b5ca-bdb9b68b4548'],\n  )\n],\noperator: 'fis.m10.net',\n);\n",cli:'\nm10 update role \\\n--name ext-bank-admin \\\n--rule "rule --collection roles --verbs Create --verbs Read --verbs Update 6aa51062-452b-482a-aff0-3e7df1a1aae9"\n'}}),"\n",(0,s.jsx)(n.h1,{id:"-1"}),"\n",(0,s.jsx)(n.h3,{id:"delete",children:"Delete"}),"\n",(0,s.jsx)(n.p,{children:"To delete a role."}),"\n",(0,s.jsx)(a.Ay,{code:{rust:'\nlet id = uuid::Uuid::parse_str("6aa51062-452b-482a-aff0-3e7df1a1aae9")?.as_bytes().to_vec();\nlet document_builder = DocumentBuilder::default().delete_custom(Collection::Roles, id);\nclient.documents(document_builder).await?;\n',ts:'\nawait ledgerClient.documents([\n  {\n      oneofKind: "deleteDocument",\n      deleteDocument: Operation_DeleteDocument.create({\n          collection: Collection.Role,\n          primaryKey: Value.create({\n              value: {\n                  oneofKind: "bytesValue",\n                  bytesValue: role.id,\n              },\n          }),\n      }),\n  },\n]);\n',dart:"\nfinal roleId = await client.deleteRole(\nid: '6aa51062-452b-482a-aff0-3e7df1a1aae9',\noperator: 'fis.m10.net',\n);\n",cli:"\nm10 delete role 6aa51062-452b-482a-aff0-3e7df1a1aae9\n"}}),"\n",(0,s.jsx)(n.h1,{id:"-2"}),"\n",(0,s.jsx)("br",{}),"\n",(0,s.jsx)(n.h3,{id:"list-find",children:"List (Find)"}),"\n",(0,s.jsx)(n.p,{children:"To list roles or filter by role name."}),"\n",(0,s.jsx)(a.Ay,{code:{rust:'\nuse m10_sdk::{NameFilter, PageBuilder};\nlet builder = PageBuilder::<uuid::Uuid, NameFilter>::name("bank-admin");\nlet roles = client.list_roles(builder).await?;\n',ts:'\nconst roles = await operatorClient.listRoles({\n  filter: {\n      oneofKind: "name",\n      name: name,\n  },\n});\nconsole.log(roles);\n',dart:"\nfinal roles = await client.listRoles(\nname: 'bank-admin',\noperator: 'fis.m10.net',\n)\n",cli:"\nm10 find role --name bank-admin\n"}}),"\n",(0,s.jsx)(n.h1,{id:"-3"}),"\n",(0,s.jsx)(n.h3,{id:"get",children:"Get"}),"\n",(0,s.jsx)(n.p,{children:"To get role details."}),"\n",(0,s.jsx)(a.Ay,{code:{rust:'\nlet role = client\n  .get_role(uuid::Uuid::parse_str(\n      "6aa51062-452b-482a-aff0-3e7df1a1aae9",\n  )?)\n  .await?;\n',ts:"\nconst role = await operatorClient.getRole(role.id);\nconsole.log(role);\n",dart:'\nfinal transfer = await client.getRole(\nid: "72b79b75-5736-412d-a391-e7a190a36b15"\noperator: "fis.m10.net",\n);\n',cli:"\nm10 get role 6aa51062-452b-482a-aff0-3e7df1a1aae9\n"}}),"\n",(0,s.jsx)(n.h4,{id:"output",children:"Output"}),"\n",(0,s.jsxs)(n.p,{children:["The response from the ",(0,s.jsx)(n.code,{children:"get role"})," command should be something like this:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'(\n    id: "6aa51062-452b-482a-aff0-3e7df1a1aae9",\n    owner: "ACMKVkeIt+L5z39xk5YHujjcN7bLhnq+UIkLBlymNM4=",\n    name: "bank-admin",\n    rules: [(\n        collection: "accounts",\n        instance_keys: [00800005000000000000000000000002],\n        verbs: [Read, Update],\n    ), (\n        collection: "banks",\n        instance_keys: [bc3b532d-6be0-45e1-b98c-5ddc6e8e239a],\n        verbs: [Read],\n    ), (\n        collection: "ledger-accounts",\n        instance_keys: [00800005000000000000000000000002],\n        verbs: [Create],\n    )],\n)\n'})}),"\n",(0,s.jsx)("br",{}),"\n",(0,s.jsx)(n.admonition,{title:"HTTP/1",type:"info",children:(0,s.jsx)(n.p,{children:"To submit requests over HTTP/1 instead of HTTP/2 with the SDKs, use the http option."})})]})}function p(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(x,{...e})}):x(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>o});var l=t(6540);const s={},i=l.createContext(s);function a(e){const n=l.useContext(i);return l.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),l.createElement(i.Provider,{value:n},e.children)}}}]);