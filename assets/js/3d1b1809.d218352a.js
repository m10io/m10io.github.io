"use strict";(self.webpackChunkproduct=self.webpackChunkproduct||[]).push([[433,3449],{788:(n,e,t)=>{t.d(e,{A:()=>r});t(6540);var c=t(8186),a=t(7430),s=t(4612),i=t(4767),o=t(4848);function r(n){let e=n.code.trim();return(0,o.jsx)("div",{className:"code",children:(0,o.jsxs)("div",{className:"code-inner",children:[(0,o.jsx)(c.Ay,{value:e,height:n.height||"auto",theme:a.IR,extensions:[i.gq[n.lang]],readOnly:"true"}),(0,o.jsx)(s.A,{code:e,className:"buttonGroup"})]})})}},2492:(n,e,t)=>{t.d(e,{Ay:()=>r,RM:()=>i});var c=t(4848),a=t(8453),s=t(4753);const i=[];function o(n){const e={a:"a",admonition:"admonition",code:"code",img:"img",li:"li",p:"p",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,a.R)(),...n.components};return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsxs)(e.p,{children:["The hierarchical ",(0,c.jsx)(s.ProductName,{})," ledger has two types of accounts:"]}),"\n",(0,c.jsxs)(e.table,{children:[(0,c.jsx)(e.thead,{children:(0,c.jsxs)(e.tr,{children:[(0,c.jsx)(e.th,{children:"Type"}),(0,c.jsx)(e.th,{children:"Description"})]})}),(0,c.jsxs)(e.tbody,{children:[(0,c.jsxs)(e.tr,{children:[(0,c.jsx)(e.td,{children:(0,c.jsx)(e.strong,{children:"issuance accounts"})}),(0,c.jsx)(e.td,{children:'An issuance account can not have a balance higher than zero (0). When an issuance account transfers funds ("issues" funds) to a holding account, the issuance account balance goes negative and the holding account balance increases.'})]}),(0,c.jsxs)(e.tr,{children:[(0,c.jsx)(e.td,{children:(0,c.jsx)(e.strong,{children:"holding accounts"})}),(0,c.jsx)(e.td,{children:"Holding accounts are children of issuance accounts."})]})]})]}),"\n",(0,c.jsxs)(e.p,{children:["An entity (such as a bank) on the ",(0,c.jsx)(s.ProductName,{})," ledger can have both a holding account and an issuance account."]}),"\n",(0,c.jsxs)(e.p,{children:["Transfers between two accounts traverse the account hierarchy to find the path between two accounts. For more details, see ",(0,c.jsx)(e.a,{href:"../api/transfers",children:"Transfers"}),"."]}),"\n",(0,c.jsxs)(e.p,{children:["An issuance account with child accounts (holding accounts) can obtain a recursive sum of all the child accounts balances in the ",(0,c.jsx)(e.code,{children:"issuance.issued_balance"})," field. This is useful for a bank or central bank to query all the money issued to its child accounts."]}),"\n",(0,c.jsx)(e.admonition,{type:"note",children:(0,c.jsxs)(e.p,{children:["There is a system limit of ",(0,c.jsx)(e.strong,{children:"256 root accounts"}),". Plan your issuance hierarchy accordingly."]})}),"\n",(0,c.jsxs)(e.p,{children:["The diagram below outlines the basic account structure of the hierarchical ",(0,c.jsx)(s.ProductName,{})," ledger. The USD root account, which is provided by the currency sponsor (central bank, or one or more appointed commercial banks), has no balance because it's at the root of the hierarchy but is negative 200 in issuance, meaning it has issued a total of 200 to child accounts:"]}),"\n",(0,c.jsxs)(e.ul,{children:["\n",(0,c.jsx)(e.li,{children:"Tungsten Bank has a balance of 90."}),"\n",(0,c.jsx)(e.li,{children:"Iron Bank has balances of 110"}),"\n",(0,c.jsx)(e.li,{children:"The sum of 90 + 110 being 200, which matches the negative issuing balance of the root account."}),"\n"]}),"\n",(0,c.jsx)(e.p,{children:"Tungsten Bank has issued 500 to its child accounts, which include its own holding account and the holding accounts of Alice and Bob. Likewise, Iron Bank issued 100 to Chris (30) and Diego (70)."}),"\n",(0,c.jsx)(e.p,{children:"For Iron Bank to create a new ledger account for one of its customers, it would create it under its issuance account. To fund the new account, Iron Bank would create a transfer from its issuance account to the user's holding account (from parent account to child account)."}),"\n",(0,c.jsx)(e.p,{children:"In this example, the hierarchical ledger has three levels. However, the number of levels is technically unlimited."}),"\n",(0,c.jsx)(e.p,{children:(0,c.jsx)(e.img,{alt:"Account hierarchy",src:t(5484).A+"",width:"2009",height:"963"})})]})}function r(n={}){const{wrapper:e}={...(0,a.R)(),...n.components};return e?(0,c.jsx)(e,{...n,children:(0,c.jsx)(o,{...n})}):o(n)}},4753:(n,e,t)=>{t.r(e),t.d(e,{ProductName:()=>l,assets:()=>r,contentTitle:()=>o,default:()=>h,frontMatter:()=>i,metadata:()=>c,toc:()=>d});const c=JSON.parse('{"id":"components/variables","title":"variables","description":"","source":"@site/docs/components/variables.mdx","sourceDirName":"components","slug":"/components/variables","permalink":"/components/variables","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{}}');var a=t(4848),s=t(8453);const i={},o=void 0,r={},l=()=>(0,a.jsx)("span",{children:"DRM"}),d=[];function u(n){return(0,a.jsx)(a.Fragment,{})}function h(n={}){const{wrapper:e}={...(0,s.R)(),...n.components};return e?(0,a.jsx)(e,{...n,children:(0,a.jsx)(u,{...n})}):u()}},5484:(n,e,t)=>{t.d(e,{A:()=>c});const c=t.p+"assets/images/account-hierarchy-fd9a4c3aefc2104f8e8c2a907a9706db.svg"},7938:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>h,contentTitle:()=>u,default:()=>f,frontMatter:()=>d,metadata:()=>c,toc:()=>m});const c=JSON.parse('{"id":"api/accounts","title":"Accounts","description":"Model","source":"@site/docs/api/accounts.mdx","sourceDirName":"api","slug":"/api/accounts","permalink":"/api/accounts","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"sidebar","previous":{"title":"FIS Authentication","permalink":"/api/fis-auth"},"next":{"title":"Account Metadata","permalink":"/api/account-metadata"}}');var a=t(4848),s=t(8453),i=t(4767),o=t(788),r=t(4753),l=t(2492);const d={},u="Accounts",h={},m=[...l.RM,{value:"Model",id:"model",level:2},{value:"API Requests",id:"api-requests",level:2},{value:"Create",id:"create",level:3},{value:"List (Find)",id:"list-find",level:3},{value:"Get",id:"get",level:3},{value:"Output",id:"output",level:4}];function p(n){const e={admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",p:"p",pre:"pre",...(0,s.R)(),...n.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(e.header,{children:(0,a.jsx)(e.h1,{id:"accounts",children:"Accounts"})}),"\n","\n",(0,a.jsx)(l.Ay,{}),"\n",(0,a.jsx)(e.h2,{id:"model",children:"Model"}),"\n",(0,a.jsxs)(e.p,{children:["The data model for an ",(0,a.jsx)(r.ProductName,{})," hierarchical ledger account is defined in ",(0,a.jsx)(e.code,{children:"transaction.proto"}),":"]}),"\n",(0,a.jsx)(o.A,{code:"\nmessage IndexedAccount {\n  bytes id = 1;\n  Issuance issuance = 3;          // Is it an issuance account\n  uint64 balance = 4;             // Tracks the account balance\n  bool frozen = 5;                // Account in a frozen state, or not\n  Instrument instrument = 6;      // Asset type\n  uint64 balance_limit = 7;       // Balance, or holding limit\n  message Issuance {\n    uint64 issued_balance = 1;    // If issuance account, the issued balance\n    uint64 non_leaf_children = 2; // If issuance account, own holding accounts\n    uint64 leaf_children = 3;     // If issuance account, child holding accounts\n  }\n}\n",lang:"protobuf"}),"\n",(0,a.jsx)(e.h2,{id:"api-requests",children:"API Requests"}),"\n",(0,a.jsx)(e.h3,{id:"create",children:"Create"}),"\n",(0,a.jsx)(e.p,{children:"To create an account on the ledger:"}),"\n",(0,a.jsx)(i.Ay,{code:{rust:'\nuse m10_sdk::{AccountBuilder, sdk, account_id, DocumentBuilder, Signer};\n\nlet (_, account_id) = client.create_account(\nAccountBuilder::parent(account_id![0]?)\n\t.issuance(true)\n\t.frozen(false)\n\t.balance_limit(1_000_000)).await?;\nclient.documents(\nDocumentBuilder::default()\n.insert(sdk::AccountMetadata {\n  id: account_id.to_vec(),\n  owner: client.signer().public_key().to_vec(),\n  profile_image_url: "https://thiscatdoesnotexist.com".to_string(),\n  name: "Alice\'s Cattery".to_string(),\n  public_name: "Alice\'s Cattery".to_string()})).await?;\n',ts:'\n// this should be done by admin/operator/bank\nconst [, aliceAccountId] = await operatorClient.createAccount({\n  parentId: bankId.bytes,\n  frozen: false,\n  issuance: false,\n});\n\nconst name = "Alice\'s Cattery";\n\n// this could be done by the customer, e.g. Alice, once admin/owner/bank grants her enough permissions\nawait aliceClient.documents([\n  {\n      oneofKind: "insertDocument",\n      insertDocument: Operation_InsertDocument.create({\n          collection: Collection.AccountMetadata,\n          document: AccountMetadata.toBinary(\n              AccountMetadata.create({\n                  name: name,\n                  owner: aliceSigner.getPublicKey().toUint8Array(),\n                  publicName: name,\n                  id: aliceAccountId.bytes,\n              }),\n          ),\n      }),\n  },\n]);\n',dart:'\nfinal accountId = await client.createAccount(\n parentId: "0000000000000000",\n operator: \'fis.m10.net\',\n name: "Alice\'s Cattery",\n publicName: "Alice\'s Cattery",\n owner: "wPf1jiymlaF6vdpTko5aBMcy1wnUc/KFvU8HlRgBqmY=",\n profileImageUrl: "https://thiscatdoesnotexist.com",\n);\n',cli:"m10 create account \\\n--owner $wPf1jiymlaF6vdpTko5aBMcy1wnUc/KFvU8HlRgBqmY= \\\n--parent-account 0000000000000000 \\\n--name 'Alice's Cattery' \\\n--profile-image-url 'https://thiscatdoesnotexist.com' \\\n--public-name 'Alice's Cattery'"}}),"\n",(0,a.jsx)(e.h1,{id:""}),"\n",(0,a.jsx)(e.h3,{id:"list-find",children:"List (Find)"}),"\n",(0,a.jsx)(e.p,{children:"To list accounts, filter by account name or account owner:"}),"\n",(0,a.jsx)(i.Ay,{code:{rust:'\n//by name\nlet accounts = client.list_account_metadata(\nm10_sdk::PageBuilder::<uuid::Uuid, m10_sdk::NameOrOwnerFilter>::name("Alice\'s Cattery")\n).await?;\n\n//by owner\nlet accounts = client.list_account_metadata(\nm10_sdk::PageBuilder::<uuid::Uuid, m10_sdk::NameOrOwnerFilter>::owner(\n  m10_sdk::PublicKey(client.signer().public_key().to_vec())\n)\n).await?;\n',ts:"\nconst accountsByOwner = await aliceClient.listAccounts({\n  filter: {\n      oneofKind: 'owner',\n      owner: aliceSigner.getPublicKey().toUint8Array(),\n  },\n})\nconsole.log(accountsByOwner);\n\nconst accountsByName = await aliceClient.listAccounts({\n  filter: {\n      oneofKind: 'name',\n      name: \"Alice's Cattery\",\n  },\n})\nconsole.log(accountsByName);\n",dart:"\nfinal accountMetadataDocs = await client.findAccountByName(\nname: 'Alice's Cattery',\noperator: 'fis.m10.net',\n);\n",cli:"m10 find account \\\n--name 'Alice's Cattery'"}}),"\n",(0,a.jsx)(e.h1,{id:"-1"}),"\n",(0,a.jsx)(e.h3,{id:"get",children:"Get"}),"\n",(0,a.jsx)(e.p,{children:"Get account details:"}),"\n",(0,a.jsx)(i.Ay,{code:{rust:"\nuse m10_sdk::account_id;\n\nlet metadata = client.get_account_metadata(account_id![0, 0; 0]?).await?;\n",ts:"\nconst account = await aliceClient.getAccount(accountId)\nconsole.log(account);\n\nconst accountInfo = await aliceClient.getAccountInfo(accountId)\nconsole.log(accountInfo);\n",dart:"\nfinal accountMetadata = await client.getAccountMetadata(\nuserId: '00000000000100000000000000000001',\noperator: 'fis.m10.net',\n);\n",cli:'m10 get account "00000000000100000000000000000001"'}}),"\n",(0,a.jsx)(e.h4,{id:"output",children:"Output"}),"\n",(0,a.jsxs)(e.p,{children:["The JSON response from the ",(0,a.jsx)(e.code,{children:"get account"})," command should be something like"]}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-json",children:'{\n  "id": "00000000000100000000000000000001",\n  "balance": 10403,\n  "frozen": false,\n  "code": "USD",\n  "decimals": 2,\n  "balance_limit": 10000,\n  "issuance": null\n}\n'})}),"\n",(0,a.jsx)("br",{}),"\n",(0,a.jsx)(e.admonition,{title:"HTTP/1",type:"info",children:(0,a.jsx)(e.p,{children:"To submit requests over HTTP/1 instead of HTTP/2 with the SDKs, use the http option."})})]})}function f(n={}){const{wrapper:e}={...(0,s.R)(),...n.components};return e?(0,a.jsx)(e,{...n,children:(0,a.jsx)(p,{...n})}):p(n)}},8453:(n,e,t)=>{t.d(e,{R:()=>i,x:()=>o});var c=t(6540);const a={},s=c.createContext(a);function i(n){const e=c.useContext(s);return c.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function o(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(a):n.components||a:i(n.components),c.createElement(s.Provider,{value:e},n.children)}}}]);