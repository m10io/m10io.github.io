"use strict";(self.webpackChunkproduct=self.webpackChunkproduct||[]).push([[433,2448],{788:(n,e,t)=>{t.d(e,{A:()=>r});t(6540);var a=t(8186),o=t(7430),c=t(4612),i=t(4767),s=t(4848);function r(n){let e=n.code.trim();return(0,s.jsx)("div",{className:"code",children:(0,s.jsxs)("div",{className:"code-inner",children:[(0,s.jsx)(a.Ay,{value:e,height:n.height||"auto",theme:o.IR,extensions:[i.gq[n.lang]],readOnly:"true"}),(0,s.jsx)(c.A,{code:e,className:"buttonGroup"})]})})}},4753:(n,e,t)=>{t.r(e),t.d(e,{ProductName:()=>d,assets:()=>r,contentTitle:()=>s,default:()=>p,frontMatter:()=>i,metadata:()=>a,toc:()=>l});const a=JSON.parse('{"id":"components/variables","title":"variables","description":"","source":"@site/docs/components/variables.mdx","sourceDirName":"components","slug":"/components/variables","permalink":"/components/variables","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{}}');var o=t(4848),c=t(8453);const i={},s=void 0,r={},d=()=>(0,o.jsx)("span",{children:"DRM"}),l=[];function u(n){return(0,o.jsx)(o.Fragment,{})}function p(n={}){const{wrapper:e}={...(0,c.R)(),...n.components};return e?(0,o.jsx)(e,{...n,children:(0,o.jsx)(u,{...n})}):u()}},4895:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>l,contentTitle:()=>d,default:()=>h,frontMatter:()=>r,metadata:()=>a,toc:()=>u});const a=JSON.parse('{"id":"api/banks","title":"Banks","description":"The Bank object is metadata and doesn\'t impact the functionality of the ledger. Services like a CBDC admin application can use the Bank object to discover information about existing accounts on the ledger.","source":"@site/docs/api/banks.mdx","sourceDirName":"api","slug":"/api/banks","permalink":"/api/banks","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"sidebar","previous":{"title":"Actions","permalink":"/api/actions"},"next":{"title":"Roles","permalink":"/api/roles"}}');var o=t(4848),c=t(8453),i=t(4767),s=t(788);t(4753);const r={},d="Banks",l={},u=[{value:"Model",id:"model",level:3},{value:"API Requests",id:"api-requests",level:2},{value:"Create",id:"create",level:3},{value:"Output",id:"output",level:4},{value:"Update",id:"update",level:3},{value:"List (Find)",id:"list-find",level:3},{value:"Get",id:"get",level:3},{value:"Output",id:"output-1",level:4}];function p(n){const e={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,c.R)(),...n.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(e.header,{children:(0,o.jsx)(e.h1,{id:"banks",children:"Banks"})}),"\n",(0,o.jsxs)(e.p,{children:["The ",(0,o.jsx)(e.em,{children:"Bank"})," object is metadata and doesn't impact the functionality of the ledger. Services like a CBDC admin application can use the Bank object to discover information about existing accounts on the ledger."]}),"\n",(0,o.jsx)(e.p,{children:"The Bank object is designed with user-friendliness in mind. It contains additional fields besides the standard owner and ID, such as:"}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.code,{children:"short_name"})," which is intended to be easily readable by machines."]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.code,{children:"display_name"}),"which is meant to be human-friendly and easily understandable."]}),"\n"]}),"\n",(0,o.jsx)(e.p,{children:"Next, there is a list of account refs. Each account ref contains:"}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsxs)(e.li,{children:["\n",(0,o.jsx)(e.p,{children:"the ID of one of the bank's ledger accounts"}),"\n"]}),"\n",(0,o.jsxs)(e.li,{children:["\n",(0,o.jsx)(e.p,{children:"an account type, which is either:"}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.code,{children:"CBDC"})," (central bank digital currency) is a bank account that backs bank deposits 1:1 with reserves."]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.code,{children:"DRM"})," (digital regulated money) is an account backed by fractional reserves."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(e.p,{children:"Adding a new bank to the ledger is a straightforward process:"}),"\n",(0,o.jsxs)(e.ol,{children:["\n",(0,o.jsx)(e.li,{children:"Generally, ledger operators manage banks."}),"\n",(0,o.jsx)(e.li,{children:"A ledger administrator creates the accounts and the Bank object when a new bank wants to join the ledger."}),"\n",(0,o.jsx)(e.li,{children:"By default, this is enforced with RBAC permissions that provide the operator sole access to create bank objects."}),"\n",(0,o.jsx)(e.li,{children:"Step 3 is purely convention; operators may choose more open permissions, if desired."}),"\n"]}),"\n",(0,o.jsx)(e.h3,{id:"model",children:"Model"}),"\n",(0,o.jsxs)(e.p,{children:["The data model for an M10 hierarchical ledger account is defined in ",(0,o.jsx)(e.code,{children:"model.proto"}),":"]}),"\n",(0,o.jsxs)(e.p,{children:["The data model for a ",(0,o.jsx)(e.em,{children:"Bank"})," object is defined in ",(0,o.jsx)(e.code,{children:"model.proto"}),":"]}),"\n",(0,o.jsx)(s.A,{code:"\nmessage Bank {\n  bytes id = 1;\n  // Owner of the bank object\n  bytes owner = 2;\n  // Name intended to be easily readable by machines\n  string short_name = 3;\n  // human readable name\n  string display_name = 4;\n  repeated BankAccountRef accounts = 5;\n}\n\nmessage BankAccountRef {\n  enum BankAccountType {\n    CBDC = 0;\n    DRM = 1;\n  }\n  // Ledger account ID\n  bytes account_id = 1;\n  // CBDC or DRM type\n  BankAccountType account_type = 2;\n}\n",lang:"protobuf"}),"\n",(0,o.jsx)(e.h2,{id:"api-requests",children:"API Requests"}),"\n",(0,o.jsx)(e.h3,{id:"create",children:"Create"}),"\n",(0,o.jsx)(e.p,{children:"Creating bank metadata requires completing all fields."}),"\n",(0,o.jsxs)(e.p,{children:[(0,o.jsx)(e.strong,{children:"Note:"})," ",(0,o.jsx)(e.code,{children:"id"})," is generated client-side (unless specified)."]}),"\n",(0,o.jsx)(i.Ay,{code:{rust:'\nlet bank_id = uuid::Uuid::new_v4();\n\nclient.documents(\n  DocumentBuilder::default().insert(sdk::Bank {\n      id: bank_id.as_bytes().to_vec(),\n      owner: client.signer().public_key().to_vec(),\n      display_name: "Iron Bank".to_string(),\n      short_name: "IB".to_string(),\n      accounts: vec![sdk::BankAccountRef {\n          account_id: hex::decode("03800002000000000000000000000001").unwrap(),\n          // Cbdc is also an option here\n          account_type: sdk::bank_account_ref::BankAccountType::Drm.into(),\n      }],\n  })\n).await?;\n',ts:'\nimport { AccountId, Collection, CryptoSigner, M10Client, ResourceId } from "m10-sdk";\nimport { LEDGER_URL, OPERATOR_KEY } from "./config";\nimport {  Operation_InsertDocument, Value } from "m10-sdk/protobufs/sdk/document";\nimport { AccountMetadata, Bank, BankAccountRef, BankAccountRef_BankAccountType } from "m10-sdk/protobufs/sdk/model/model";\nimport { Role, RoleBinding, Rule, Rule_Verb } from "m10-sdk/protobufs/sdk/rbac";\n\nexport const createBanks = async (\n  accountPublicKeyBytes: Uint8Array,\n  currencies: { centralBankIdHex: string, currency: string }[],\n): Promise<Record<string, string>> => {\n  const operatorSigner = await CryptoSigner.fromPkcs8Pem(OPERATOR_KEY);\n  const operatorClient = new M10Client(LEDGER_URL, await CryptoSigner.fromPkcs8Pem(OPERATOR_KEY));\n\n  const result = await Promise.all(currencies.map(async ({ currency, centralBankIdHex }) => {\n\n      // treat Banks as usual accounts\n      const [, newBankAccountId] = await operatorClient.createAccount({\n          parentId: AccountId.fromHex(centralBankIdHex).bytes,\n          frozen: false,\n          issuance: true,\n      });\n\n      const bankName = "My awesome bank";\n\n      await operatorClient.documents([\n          {\n              oneofKind: "insertDocument",\n              insertDocument: Operation_InsertDocument.create({\n                  collection: Collection.AccountMetadata,\n                  document: AccountMetadata.toBinary(\n                      AccountMetadata.create({\n                          id: newBankAccountId.bytes,\n                          name: bankName,\n                          publicName: bankName,\n                          owner: accountPublicKeyBytes,\n                      }),\n                  ),\n              }),\n          },\n      ]);\n\n      // this is the key part - BankAccountRef determines the that this is a bank account\n      await operatorClient.documents([{\n          oneofKind: "insertDocument",\n          insertDocument: Operation_InsertDocument.create({\n              collection: Collection.Bank,\n              document: Bank.toBinary(\n                  Bank.create({\n                      id: ResourceId.generate().bytes,\n                      owner: operatorSigner.getPublicKey().toUint8Array(),\n                      shortName: bankName,\n                      displayName: bankName,\n                      accounts: [\n                          BankAccountRef.create({\n                              accountId: newBankAccountId.bytes,\n                              accountType: BankAccountRef_BankAccountType.DRM,\n                          }),\n                      ],\n                  }),\n              ),\n          }),\n      }]);\n\n      // create a role for the bank\n      const bankRole = Role.create({\n          id: ResourceId.generate().bytes,\n          name: bankName + "-bank-role",\n          rules: [\n              Rule.create({\n                  collection: Collection.AccountMetadata,\n                  instanceKeys: [],\n                  verbs: [Rule_Verb.CREATE, Rule_Verb.READ, Rule_Verb.UPDATE],\n              }),\n              Rule.create({\n                  collection: Collection.LedgerAccount,\n                  instanceKeys: [Value.create({ value: { oneofKind: "bytesValue", bytesValue: newBankAccountId.bytes } })],\n                  verbs: [\n                      Rule_Verb.CREATE,\n                      Rule_Verb.READ,\n                      Rule_Verb.TRANSACT,\n                      Rule_Verb.UPDATE,\n                      Rule_Verb.INITIATE,\n                      Rule_Verb.COMMIT,\n                  ],\n              }),\n              Rule.create({\n                  collection: Collection.Role,\n                  verbs: [Rule_Verb.CREATE],\n              }),\n              Rule.create({\n                  collection: Collection.RoleBinding,\n                  verbs: [Rule_Verb.CREATE],\n              }),\n          ],\n      });\n\n      await operatorClient.documents([{\n          oneofKind: "insertDocument",\n          insertDocument: Operation_InsertDocument.create({\n              collection: Collection.Role,\n              document: Role.toBinary(bankRole),\n          }),\n      }]);\n\n      // create a role binding for the operator over this bank\n      const bankCustomerRoleBinding = RoleBinding.create({\n          id: ResourceId.generate().bytes,\n          name: bankName + "-role-binding",\n          isUniversal: false,\n          subjects: [accountPublicKeyBytes],\n          expressions: [],\n          owner: operatorSigner.getPublicKey().toUint8Array(),\n          role: bankRole.id,\n      });\n\n      await operatorClient.documents([{\n          oneofKind: "insertDocument",\n          insertDocument: Operation_InsertDocument.create({\n              collection: Collection.RoleBinding,\n              document: RoleBinding.toBinary(bankCustomerRoleBinding),\n          }),\n      }]);\n\n      return {\n          centralBankIdHex,\n          accountIdHex: newBankAccountId.hex,\n      };\n  }));\n\n  return result.reduce((acc, { centralBankIdHex, accountIdHex }) => {\n      acc[centralBankIdHex] = accountIdHex;\n      return acc;\n  }, {} as Record<string, string>);\n};\n',cli:'\n  m10 create bank \\\n  --accounts "accounts --account-type Cbdc --id 06800002000000000000000000000002" \\\n  --accounts "accounts --account-type Drm --id 06800002000000000000000000000003" \\\n  --owner "U1b1OjTZZRih7Z6CrwM3//VkmSV3ZjJ5B1ZNPpwV79E=" \\\n  --short-name "IB" \\\n  --display-name "Iron Bank"\n'}}),"\n",(0,o.jsx)(e.h4,{id:"output",children:"Output"}),"\n",(0,o.jsx)(e.p,{children:"This code will generate a unique bank ID similar to:"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{children:"Created banks resource:\n66235179-b493-4fa4-ba84-d0c7acba9f98\n"})}),"\n",(0,o.jsx)(e.h3,{id:"update",children:"Update"}),"\n",(0,o.jsx)(e.p,{children:"You can update fields in the Bank object."}),"\n",(0,o.jsxs)(e.p,{children:["The Bank object ",(0,o.jsx)(e.code,{children:"id"})," must be specified."]}),"\n",(0,o.jsxs)(e.p,{children:[(0,o.jsx)(e.strong,{children:"Note:"})," Fields are case-sensitive."]}),"\n",(0,o.jsxs)(e.p,{children:["For more details, see ",(0,o.jsx)(e.a,{href:"https://github.com/m10io/sdk/tree/main/protobuf",children:"protobuf structures"}),"."]}),"\n",(0,o.jsx)(i.Ay,{code:{rust:'\nlet bank_id = uuid::Uuid::parse_str("a72b5c13-92ee-406e-a740-800815540dbe")?;\n\nclient.documents(DocumentBuilder::<>::default().update(\n\tm10_sdk::DocumentUpdate::new(bank_id) \n\t\t.display_name("Charlie\'s Bank".to_string())\n\t\t.short_name("CB".to_string())\n\t\t.accounts(vec![sdk::BankAccountRef {\n\t\t\taccount_id: hex::decode("03800002000000000000000000000002").unwrap(),\n\t\t\taccount_type: sdk::bank_account_ref::BankAccountType::Cbdc.into(),\n\t\t}])\n)).await?;\n',ts:'\nawait ledgerClient.documents([{\n  oneofKind: "updateDocument",\n  updateDocument: Operation_UpdateDocument.create({\n      collection: Collection.Bank,\n      document: Bank.toBinary(\n          Bank.create({\n              displayName: "new display name",\n          }),\n      ),\n      fieldMask: FieldMask.create({\n          paths: ["displayName"],\n      }),\n  }),\n}]);\n',cli:'m10 update bank \\\n  --short-name "CC" \\\n  --display-name "Charlie\'s Bank" \\\n  --accounts "accounts --account-type Cbdc --id 06800002000000000000000000000002" \\\n  --owner "wPf1jiymlaF6vdpTko5aBMcy1wnUc/KFvU8HlRgBqmY=" \\\n  # bank record ID\n  66235179-b493-4fa4-ba84-d0c7acba9f98\n'}}),"\n",(0,o.jsx)(e.h1,{id:""}),"\n",(0,o.jsx)(e.h3,{id:"list-find",children:"List (Find)"}),"\n",(0,o.jsx)(e.p,{children:"Listing all banks often requires an optional paging parameter."}),"\n",(0,o.jsx)(e.p,{children:"We recommend using:"}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsx)(e.li,{children:"Zero as a limit page parameter"}),"\n",(0,o.jsxs)(e.li,{children:["Null for ",(0,o.jsx)(e.code,{children:"lastId"})]}),"\n"]}),"\n",(0,o.jsx)(i.Ay,{code:{rust:"\nlet banks = client\n.list_banks(m10_sdk::PageBuilder::default())\n.await\n.unwrap();\n",ts:"\nconst banks = await ledgerClient.listBanks();\nconsole.log(banks);\n",dart:"\n// not supported\n",cli:"m10 find banks"}}),"\n",(0,o.jsx)(e.h1,{id:"-1"}),"\n",(0,o.jsx)("br",{}),"\n",(0,o.jsx)(e.h3,{id:"get",children:"Get"}),"\n",(0,o.jsxs)(e.p,{children:["Retrieve the Bank object by passing the bank record ",(0,o.jsx)(e.code,{children:"id"})," which is usually uuid v4 encoded bytes."]}),"\n",(0,o.jsx)(i.Ay,{code:{rust:"\nlet bank = client\n  .get_bank(bank_id)\n  .await\n  .unwrap();\n",ts:'\nconst bankResourceId = ResourceId.fromString("..........")\n\nconst bank = await ledgerClient.getBank(bankResourceId.bytes);\nconsole.log(bank);\n',cli:"\nm10 get bank 66235179-b493-4fa4-ba84-d0c7acba9f98\n"}}),"\n",(0,o.jsx)(e.h1,{id:"-2"}),"\n",(0,o.jsx)(e.h4,{id:"output-1",children:"Output"}),"\n",(0,o.jsx)(e.p,{children:"You will receive an output similar to:"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-(",children:'    id: "66235179-b493-4fa4-ba84-d0c7acba9f98",\n    owner: "wPf1jiymlaF6vdpTko5aBMcy1wnUc/KFvU8HlRgBqmY=",\n    short_name: "CC",\n    display_name: "Charlie\'s Bank",\n    accounts: [(\n        id: "06800002000000000000000000000002",\n        account_type: CentralBankDigitalCurrency,\n    )],\n)\n'})}),"\n",(0,o.jsx)(e.admonition,{title:"HTTP/1",type:"info",children:(0,o.jsx)(e.p,{children:"To submit requests over HTTP/1 instead of HTTP/2 with the SDKs, use the http option."})})]})}function h(n={}){const{wrapper:e}={...(0,c.R)(),...n.components};return e?(0,o.jsx)(e,{...n,children:(0,o.jsx)(p,{...n})}):p(n)}},8453:(n,e,t)=>{t.d(e,{R:()=>i,x:()=>s});var a=t(6540);const o={},c=a.createContext(o);function i(n){const e=a.useContext(c);return a.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function s(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(o):n.components||o:i(n.components),a.createElement(c.Provider,{value:e},n.children)}}}]);