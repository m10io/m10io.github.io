"use strict";(self.webpackChunkproduct=self.webpackChunkproduct||[]).push([[433,6541],{788:(n,e,t)=>{t.d(e,{A:()=>c});t(6540);var a=t(8186),o=t(7430),i=t(4612),s=t(4767),r=t(4848);function c(n){let e=n.code.trim();return(0,r.jsx)("div",{className:"code",children:(0,r.jsxs)("div",{className:"code-inner",children:[(0,r.jsx)(a.Ay,{value:e,height:n.height||"auto",theme:o.IR,extensions:[s.gq[n.lang]],readOnly:"true"}),(0,r.jsx)(i.A,{code:e,className:"buttonGroup"})]})})}},4753:(n,e,t)=>{t.r(e),t.d(e,{ProductName:()=>l,assets:()=>c,contentTitle:()=>r,default:()=>m,frontMatter:()=>s,metadata:()=>a,toc:()=>d});const a=JSON.parse('{"id":"components/variables","title":"variables","description":"","source":"@site/docs/components/variables.mdx","sourceDirName":"components","slug":"/components/variables","permalink":"/components/variables","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{}}');var o=t(4848),i=t(8453);const s={},r=void 0,c={},l=()=>(0,o.jsx)("span",{children:"DRM"}),d=[];function u(n){return(0,o.jsx)(o.Fragment,{})}function m(n={}){const{wrapper:e}={...(0,i.R)(),...n.components};return e?(0,o.jsx)(e,{...n,children:(0,o.jsx)(u,{...n})}):u()}},7399:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>d,contentTitle:()=>l,default:()=>h,frontMatter:()=>c,metadata:()=>a,toc:()=>u});const a=JSON.parse('{"id":"api/actions","title":"Actions","description":"Overview","source":"@site/docs/api/actions.mdx","sourceDirName":"api","slug":"/api/actions","permalink":"/api/actions","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"sidebar","previous":{"title":"AccountSet","permalink":"/api/account-sets"},"next":{"title":"Banks","permalink":"/api/banks"}}');var o=t(4848),i=t(8453),s=t(788),r=t(4767);t(4753);const c={},l="Actions",d={},u=[{value:"Overview",id:"overview",level:2},{value:"Payment requests",id:"payment-requests",level:3},{value:"RPC",id:"rpc",level:3},{value:"Observations",id:"observations",level:3},{value:"Model",id:"model",level:2},{value:"API Requests",id:"api-requests",level:2},{value:"Invoke",id:"invoke",level:3},{value:"List (Find)",id:"list-find",level:3},{value:"Get",id:"get",level:3},{value:"Observe",id:"observe",level:3}];function m(n){const e={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",ul:"ul",...(0,i.R)(),...n.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(e.header,{children:(0,o.jsx)(e.h1,{id:"actions",children:"Actions"})}),"\n",(0,o.jsx)(e.h2,{id:"overview",children:"Overview"}),"\n",(0,o.jsx)(e.p,{children:"Actions are used to send messages between ledger accounts. They are similar to transfers but don't contain an amount. Instead, Actions contain one of two types of payload:"}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.a,{href:"#payment-requests",children:"Payment requests"})," (request-to-pay)"]}),"\n",(0,o.jsx)(e.li,{children:(0,o.jsx)(e.a,{href:"#rpc",children:"Remote procedure calls (RPCs)"})}),"\n"]}),"\n",(0,o.jsx)(e.h3,{id:"payment-requests",children:"Payment requests"}),"\n",(0,o.jsxs)(e.p,{children:["A business requests a payment from a customer by sending them an invoice. The company creates an action with the ",(0,o.jsx)(e.em,{children:"target"})," set to the account from which they want to request money, the customer's account. M10 created a payload for a business (e.g. merchant) to request a payment (request-to-pay) from a customer which is defined in a protobuf."]}),"\n",(0,o.jsx)(s.A,{code:"\nmessage PaymentRequest {\n  m10.sdk.transaction.CreateTransfer transfer = 1;\n  enum PaymentRequestStatus {\n    PENDING = 0;\n    DECLINED = 1;\n    CANCELED = 2;\n    IN_PROGRESS = 3;\n  }\n  PaymentRequestStatus status = 2;\n}\n",lang:"protobuf"}),"\n",(0,o.jsxs)(e.p,{children:["Notice that the above model includes a ",(0,o.jsx)(e.code,{children:"PaymentRequestStatus"})," enum so that the requester and requestee can keep track of the request's current status."]}),"\n",(0,o.jsx)(e.h3,{id:"rpc",children:"RPC"}),"\n",(0,o.jsxs)(e.p,{children:["Another everyday use case for actions is an on-ledger Remote Procedure Call (RPC). For example: Imagine that an FX program runs on the ledger, and you want to get a quote for an FX swap between two currencies. You would send an action to the FX provider's ledger account with a quote request message. The FX provider responds back with an action to your ledger account that you ",(0,o.jsx)(e.a,{href:"#observations",children:"observe"})," for actions."]}),"\n",(0,o.jsx)(e.h3,{id:"observations",children:"Observations"}),"\n",(0,o.jsxs)(e.p,{children:["Observations are a key building block of the ledger. They are a way to receive a stream of events relating to a particular type. Actions are most valuable when observed in real time. Using the ",(0,o.jsx)(e.a,{href:"#rpc",children:"RPC example"}),", observations notify the FX provider when an action is received in its ledger account."]}),"\n",(0,o.jsx)(e.p,{children:"When observations and actions are combined, they operate in a manner similar to a distributed queue, such as Kafka. This integration offers the capability to establish a starting transaction ID for observation, followed by a continuous stream of all actions that have transpired since that transaction ID. This feature ensures at-least-once semantics (a guarantee that a message will be delivered to its intended recipient one or more times) for messages delivered on the ledger, all without the necessity of an external service."}),"\n",(0,o.jsx)(e.h2,{id:"model",children:"Model"}),"\n",(0,o.jsxs)(e.p,{children:["The data model for M10 actions is defined in ",(0,o.jsx)(e.code,{children:"transaction.proto"}),":"]}),"\n",(0,o.jsx)(s.A,{code:"\n// Invokes a registered action by sending an opaque payload to a Target\nmessage InvokeAction {\n  // Unique name of the action to invoke\n  string name = 1;\n  // Invoking account ID\n  bytes from_account = 3;\n  // Specifies the identity/identities who have permission to see & be notified\n  // of the invoked action\n  Target target = 4;\n  // Opaque payload\n  bytes payload = 5;\n}\n\nmessage Target {\n  oneof target {\n      // Account ID\n      bytes account_id = 1;\n      // Any Account\n      google.protobuf.Empty any_account = 2;\n  }\n}\n\nmessage Action {\n  uint64 tx_id = 1;\n  // Unique name of the action to invoke\n  string name = 2;\n  // [optional] unique Context ID, allowing linking of multiple requests\n  bytes context_id = 3;\n  // Invoking account ID\n  bytes from_account = 4;\n  // Specifies the identity/identities who have permission to see & be notified\n  // of the invoked action\n  Target target = 5;\n  // Opaque payload\n  bytes payload = 6;\n}\n",lang:"protobuf"}),"\n",(0,o.jsx)(e.h2,{id:"api-requests",children:"API Requests"}),"\n",(0,o.jsx)(e.h3,{id:"invoke",children:"Invoke"}),"\n",(0,o.jsxs)(e.p,{children:["The ",(0,o.jsx)(e.code,{children:"invoke"})," action means send a message from one account to another account."]}),"\n",(0,o.jsx)(r.Ay,{code:{rust:'\nuse m10_sdk::ActionBuilder;\n\nlet my_data = "some data".to_owned().into_bytes();\n\n// Send to a specific account\nlet action_tx_id =client.action(\n    ActionBuilder::for_account("my.action", account_id![0, 2]?, account_id![0,1]?)\n      .payload(my_data.clone())\n).await?;\n',ts:'\naccountClient.action({\n  name: "my.action",\n  payload: new TextEncoder().encode("my_data"),\n  fromAccount: myAccountId.bytes,\n  target: Target.create({\n      target: {\n          oneofKind: "accountId",\n          accountId: recipientAccountId.bytes,\n      },\n  }),\n})\n\naccountClient.action({\n  name: "my.action",\n  fromAccount: myAccountId.bytes,\n  target: Target.create(), // leave empty to send to all accounts\n  payload: new TextEncoder().encode("my_data"),\n});\n',dart:"\nimport 'package:m10_sdk/security/local_signing.dart';\nimport 'package:m10_sdk/m10_sdk.dart';\n\nfinal client = M10Sdk(\nsigner: await LocalSigning.loadKeyPair('test/keys/test_bank_admin.pkcs8'),\nledgers: [ Ledger(operator: \"m10.usd\", url: \"https://fis.m10.net\") ],\ndisableTls: false,\n);\n// Send to a specific account\nfinal txResponse = await client.invokeAction(\noperator: 'fis.m10.net',\nname: 'my.name',\nfromAccountId: '07800002000000000600000000000003',\ntargetAccountId: '07800002000000000000000000000002',\npayload: my_data,\n);\n",cli:"\n# Send to a specific account\nm10 invoke action \\\n  --name 'my.action' \\\n  --from 07800002000000000600000000000003 \\\n  --payload \"my_data\" \\\n  --to 07800002000000000000000000000002"}}),"\n",(0,o.jsx)(e.h1,{id:""}),"\n",(0,o.jsx)(e.h3,{id:"list-find",children:"List (Find)"}),"\n",(0,o.jsxs)(e.p,{children:["The ",(0,o.jsx)(e.code,{children:"list"})," action means retrieve actions according to a filter, such as:"]}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsx)(e.li,{children:"From a specific account ID"}),"\n",(0,o.jsx)(e.li,{children:"Target/To a specific account ID"}),"\n",(0,o.jsx)(e.li,{children:"Based on a context ID"}),"\n"]}),"\n",(0,o.jsx)(r.Ay,{code:{rust:'\nuse m10_sdk::{ActionsFilter, TxnFilter};\n\n// Filter by account ID\nlet actions = client.list_actions(\n      TxnFilter::<ActionsFilter>::by_account(\n          "my.action".to_owned(),\n          "07800002000000000600000000000003".parse()?,\n      )\n      .limit(10)\n  ).await?;\n\n// Filter by context ID\nlet actions = client.list_actions(\n      TxnFilter::<ActionsFilter>::by_context_id(\n          "my.action".to_owned(),\n          "my.context".as_bytes().to_vec(),\n      )\n      .limit(10)\n      .min_tx(10_000)\n      .max_tx(20_000),\n  ).await?;\n',ts:'\nconst actionsResponse = await accountClient.listActions({\n  name: actionName,\n  filter: {\n      oneofKind: "accountId",\n      accountId: accountId.bytes,\n  },\n});\n',dart:"\nimport 'package:m10_sdk/security/local_signing.dart';\nimport 'package:m10_sdk/m10_sdk.dart';\n\n\nfinal client = M10Sdk(\nsigner: await LocalSigning.loadKeyPair(\n  'test/keys/test_bank_admin.pkcs8',\n),\nledgers: [\n  Ledger(operator: 'fis.m10.net', url: 'https://fis.m10.net'),\n],\ndisableTls: false,\n);\n\n\n// Filter by account ID\nfinal actions = await client.listActions(\n  operator: 'fis.m10.net',\n  name: 'my.action',\n  accountId: '07800002000000000600000000000003',\n  limit: 10,\n  minTxId: 10000,\n  maxTxId: 20000,\n);\n\n// Filter by context ID\nfinal actions = await client.listActions(\n  operator: 'fis.m10.net',\n  name: 'my.action',\n  contextId: 'my.context'.codeUnits,\n  limit: 10,\n  minTxId: 10000,\n  maxTxId: 20000,\n);\n",cli:"\n# Filter by account ID\nm10 find actions \\\n--name 'my.action' \\\n--account 07800002000000000600000000000003 \\\n--limit 10 \\\n--min-tx-id 10000 \\\n--max-tx-id 20000\n\n# Filter by context ID\n# Note: context ID is parsed as hex\nm10 --context-id 6D792E636F6E74657874 find actions \\\n--name 'my.action' \\\n--limit 10 \\\n--min-tx-id 10000 \\\n--max-tx-id 20000\n\n"}}),"\n",(0,o.jsx)(e.h1,{id:"-1"}),"\n",(0,o.jsx)(e.h3,{id:"get",children:"Get"}),"\n",(0,o.jsxs)(e.p,{children:["The ",(0,o.jsx)(e.code,{children:"get"})," action means you get information about an action previously invoked."]}),"\n",(0,o.jsx)(r.Ay,{code:{rust:"\nlet action = client.get_action(action_tx_id).await?;\n",ts:"\nconst action = await accountClient.getAction(txId);\nconsole.log(action);\n",dart:"\nfinal action = await client.getAction(\ntxId: '13094780000',\noperator: 'fis.m10.net',\n);\n",cli:"\n# apply the action ID\nm10 get action 13094780000\n"}}),"\n",(0,o.jsx)(e.h1,{id:"-2"}),"\n",(0,o.jsx)(e.h3,{id:"observe",children:"Observe"}),"\n",(0,o.jsxs)(e.p,{children:["The ",(0,o.jsx)(e.code,{children:"observe"})," action lists all actions and transfers to your own account."]}),"\n",(0,o.jsxs)(e.p,{children:["Actions can be filtered based on the ",(0,o.jsx)(e.code,{children:"from"})," account."]}),"\n",(0,o.jsx)(e.p,{children:"It is recommended to use a separate client instance for streaming."}),"\n",(0,o.jsx)(e.p,{children:"Required filter parameters:"}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsx)(e.li,{children:"Name"}),"\n",(0,o.jsx)(e.li,{children:"Involved accounts"}),"\n"]}),"\n",(0,o.jsx)(r.Ay,{code:{rust:'\nuse m10_sdk::{AccountFilter};\nuse futures::stream::StreamExt;\n\nlet mut stream = client.observe_actions(\nAccountFilter::name("my.action")\n  .involves("07800002000000000600000000000003".parse()?)\n  .involves("07800002000000000000000000000002".parse()?)\n  .starting_from(10_000),\n).await?;\n\nwhile let Some(msg) = stream.next().await{\nmatch msg{\n  Ok(actions) => {\n    for action in actions{\n      println!("new action: {:#?}", action);\n    }\n  }\n  Err(err) => {\n    eprintln!("Error while receiving message: {}", err);\n    break;\n  }\n};\n}\n',ts:'\nconst abortController = new AbortController();\n\nconst startObserve = await accountClient.observeActions(\n  {\n      involvesAccounts: [accountId.bytes],\n      name: "test.action",\n  },\n  {\n      abort: abortController.signal,\n  },\n);\n\nconst service = startObserve();\n\nreturn new Promise((resolve, reject) => {\n  (async () => {\n      service.responses.onNext((message, error) => {\n          if (error) {\n              abortController.abort();\n              reject(new Error("Error in observation: " + error));\n              return;\n          }\n          if (message) {\n              console.log("Action observation: ", message.transactions);\n              abortController.abort();\n              resolve(true);\n          }\n      });\n\n      const recipientAccountId = AccountId.fromHex("0x...")\n\n      if (!recipientAccountId) {\n          abortController.abort();\n          reject(new Error("No other account found"));\n          return;\n      }\n\n      const txId = await accountClient.action({\n          name: "test.action",\n          fromAccount: accountId.bytes,\n          target: Target.create({\n              target: {\n                  oneofKind: "accountId",\n                  accountId: recipientAccountId.bytes,\n              },\n          }),\n      });\n\n      console.log("Action sent, txId: ", txId);\n  })();\n});\n',dart:"\nimport 'package:m10_sdk/security/local_signing.dart';\nimport 'package:m10_sdk/m10_sdk.dart';\n\n\nfinal client = M10Sdk(\nsigner: await LocalSigning.loadKeyPair('test/keys/test_bank_admin.pkcs8'),\nledgers: [\n  Ledger(operator: 'fis.m10.net', url: 'https://fis.m10.net') \n],\ndisableTls: false,\n);\n\n\nfinal actions = await client.observeActions(\n  operator: 'fis.m10.net',\n  name: 'my.action',\n  accounts: [\n    '07800002000000000600000000000003',\n    '07800002000000000000000000000002',\n  ],\n  startingFrom: 10000,\n);\n",cli:"\nm10 observe actions \\\n--name 'my.action' \\\n--ids 07800002000000000600000000000003 \\\n--ids 07800002000000000000000000000002 \\\n--starting-from 10000\n"}}),"\n",(0,o.jsx)(e.h1,{id:"-3"}),"\n",(0,o.jsx)("br",{}),"\n",(0,o.jsx)(e.admonition,{title:"HTTP/1",type:"info",children:(0,o.jsx)(e.p,{children:"To submit requests over HTTP/1 instead of HTTP/2 with the SDKs, use the http option."})})]})}function h(n={}){const{wrapper:e}={...(0,i.R)(),...n.components};return e?(0,o.jsx)(e,{...n,children:(0,o.jsx)(m,{...n})}):m(n)}},8453:(n,e,t)=>{t.d(e,{R:()=>s,x:()=>r});var a=t(6540);const o={},i=a.createContext(o);function s(n){const e=a.useContext(i);return a.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function r(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(o):n.components||o:s(n.components),a.createElement(i.Provider,{value:e},n.children)}}}]);