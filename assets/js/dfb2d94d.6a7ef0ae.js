"use strict";(self.webpackChunkproduct=self.webpackChunkproduct||[]).push([[630],{3905:(e,n,t)=>{t.d(n,{Zo:()=>l,kt:()=>m});var a=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=a.createContext({}),d=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},l=function(e){var n=d(e.components);return a.createElement(s.Provider,{value:n},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},k=a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),u=d(t),k=o,m=u["".concat(s,".").concat(k)]||u[k]||p[k]||i;return t?a.createElement(m,r(r({ref:n},l),{},{components:t})):a.createElement(m,r({ref:n},l))}));function m(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=t.length,r=new Array(i);r[0]=k;var c={};for(var s in n)hasOwnProperty.call(n,s)&&(c[s]=n[s]);c.originalType=e,c[u]="string"==typeof e?e:o,r[1]=c;for(var d=2;d<i;d++)r[d]=t[d];return a.createElement.apply(null,r)}return a.createElement.apply(null,t)}k.displayName="MDXCreateElement"},5624:(e,n,t)=>{t.d(n,{Z:()=>s});var a=t(7294),o=t(5089),i=t(7316),r=t(5291),c=t(5308);function s(e){let n=e.code.trim();return a.createElement("div",{className:"code"},a.createElement("div",{className:"code-inner"},a.createElement(o.ZP,{value:n,height:e.height||"auto",theme:i.CP,extensions:[c.ih[e.lang]],readOnly:"true"}),a.createElement(r.Z,{code:n,className:"buttonGroup"})))}},3985:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>m,frontMatter:()=>c,metadata:()=>d,toc:()=>u});var a=t(7462),o=(t(7294),t(3905)),i=t(5308),r=t(5624);const c={},s="Banks",d={unversionedId:"api/banks",id:"api/banks",title:"Banks",description:'"Banks" on the ledger are used by our dashboard product, the CBDC admin, to determine which accounts are associated with which bank on the ledger. The "bank" object is just metadata and doesn\'t impact the functionality of the core ledger. Rather, services like the CBDC admin use the bank object to discover information about existing accounts on the ledger.',source:"@site/docs/api/banks.mdx",sourceDirName:"api",slug:"/api/banks",permalink:"/api/banks",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"sidebar",previous:{title:"Actions",permalink:"/api/actions"},next:{title:"Role Bindings",permalink:"/api/role-bindings"}},l={},u=[{value:"Model",id:"model",level:3},{value:"API Calls",id:"api-calls",level:2},{value:"Create",id:"create",level:3},{value:"Update",id:"update",level:3},{value:"Get Bank By Id",id:"get-bank-by-id",level:3},{value:"Listing All Banks",id:"listing-all-banks",level:3}],p={toc:u},k="wrapper";function m(e){let{components:n,...t}=e;return(0,o.kt)(k,(0,a.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"banks"},"Banks"),(0,o.kt)("p",null,'"Banks" on the ledger are used by our dashboard product, the CBDC admin, to determine which accounts are associated with which bank on the ledger. The "bank" object is just metadata and doesn\'t impact the functionality of the core ledger. Rather, services like the CBDC admin use the bank object to discover information about existing accounts on the ledger. '),(0,o.kt)("p",null,'The "bank" object contains a few fields (beyond the standard owner and id). The bank object has both ',(0,o.kt)("inlineCode",{parentName:"p"},"short_name")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"display_name"),". ",(0,o.kt)("inlineCode",{parentName:"p"},"short_name")," is intended to be machine-readable, whereas ",(0,o.kt)("inlineCode",{parentName:"p"},"display_name")," is meant to be human readable. "),(0,o.kt)("p",null,'Next, there is a list of account refs. Each of these account refs contains the id of one of the bank\'s ledger accounts, and an account type. The account type can either be "CBDC or DRM". CBDC (central bank digital currency) represents a bank account that backs bank deposits 1:1 with currency. DRM (digital regulated money), on the other hand, represents an account backed by fractional reserves. This metadata is noted to allow the dashboard to display statistics about the different types of money on the ledger.'),(0,o.kt)("p",null,"Generally, Banks will be managed by the operators of the ledger. If a new Bank wants to join the ledger, a ledger administrator will use the CBDC admin to create its accounts and the Bank object. By default, this is enforced with RBAC permissions that give the operator sole access to create bank objects. However, this is purely convention; Operators may choose more open permissions if they wish."),(0,o.kt)("h3",{id:"model"},"Model"),(0,o.kt)(r.Z,{code:"\nmessage Bank {\n  bytes id = 1;\n  bytes owner = 2;\n  string short_name = 3;\n  string display_name = 4;\n  repeated BankAccountRef accounts = 5;\n}\n\nmessage BankAccountRef {\n  enum BankAccountType {\n    CBDC = 0;\n    DRM = 1;\n  }\n  bytes account_id = 1;\n  BankAccountType account_type = 2;\n}\n",lang:"protobuf",mdxType:"Highlight"}),(0,o.kt)("h2",{id:"api-calls"},"API Calls"),(0,o.kt)("h3",{id:"create"},"Create"),(0,o.kt)("p",null,"Creating bank metadata requires filling out all fields. "),(0,o.kt)("p",null,"Note: ",(0,o.kt)("inlineCode",{parentName:"p"},"id")," is generated client-side (when not specified in the example)."),(0,o.kt)(i.ZP,{code:{rust:'\nlet bank_id = uuid::Uuid::new_v4();\n\nclient.documents(\n    DocumentBuilder::default().insert(sdk::Bank {\n        id: bank_id.as_bytes().to_vec(),\n        owner: client.signer().public_key().to_vec(),\n        short_name: "Bob\'s Bank".to_string(),\n        display_name: "BB".to_string(),\n        accounts: vec![sdk::BankAccountRef {\n            account_id: hex::decode("03800002000000000000000000000001").unwrap(),\n            // Cbdc is also an option here\n            account_type: sdk::bank_account_ref::BankAccountType::Drm.into(),\n        }],\n    })\n).await?;\n',ts:'\nawait ledgerClient.documents(\n  new sdk.DocumentBuilder().insert(sdk.collections.Collection.Bank, new m10.sdk.model.Bank({\n    id: new TextEncoder().encode("bb-bank"),\n    displayName: "Bob\'s Bank",\n    shortName: "BB",\n    accounts: [\n      new m10.sdk.model.BankAccountRef({\n        accountId: new sdk.AccountId("07800002000000000600000000000003").toUint8Array(),\n        accountType: m10.sdk.model.BankAccountRef.BankAccountType.CBDC\n      })\n    ]\n  }))\n);\n',cli:'\n    m10 create bank \\\n    --accounts "accounts --account-type Cbdc --id 06800002000000000000000000000002" \\\n    --accounts "accounts --account-type Drm --id 06800002000000000000000000000003" \\\n    --owner "U1b1OjTZZRih7Z6CrwM3//VkmSV3ZjJ5B1ZNPpwV79E=" \\\n    --short-name "BB" \\\n    --display-name "Bob\'s Bank"\n'},mdxType:"Code"}),(0,o.kt)("h3",{id:"update"},"Update"),(0,o.kt)("p",null,"Updating a bank can be done by specifying what fields you want to update."),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"id")," must be specified as the bank metadata item to be updated.\nField mask is case sensitive, see protobuf structures."),(0,o.kt)(i.ZP,{code:{rust:'\nlet bank_id = uuid::Uuid::parse_str("a72b5c13-92ee-406e-a740-800815540dbe")?;\n\tclient.documents(DocumentBuilder::<>::default().update(\n\t\tm10_sdk::DocumentUpdate::new(bank_id) \n\t\t\t.display_name("Charlie\'s Bank".to_string())\n\t\t\t.short_name("CB".to_string())\n\t\t\t.accounts(vec![sdk::BankAccountRef {\n\t\t\t\taccount_id: hex::decode("03800002000000000000000000000002").unwrap(),\n\t\t\t\taccount_type: sdk::bank_account_ref::BankAccountType::Cbdc.into(),\n\t\t\t}])\n\t)).await?;\n',ts:"\nawait ledgerClient.documents(\n  new sdk.DocumentBuilder().update(\n    new sdk.collections.DocumentUpdate(\n      sdk.collections.Collection.Bank,\n      new m10.sdk.model.Bank({\n        id: new TextEncoder().encode(\"bb-bank\"),\n        displayName: 'B Bank'\n      }),\n      ['display_name']\n    )\n  )\n);\n",cli:'m10 update bank \\\n    --short-name "CC" \\\n    --display-name "Charlie\'s Bank" \\\n    --accounts "accounts --account-type Cbdc --id 06800002000000000000000000000002" \\\n    --owner "wPf1jiymlaF6vdpTko5aBMcy1wnUc/KFvU8HlRgBqmY=" \\\n    d1ff50f87c944ca799b9acca988cb529\n'},mdxType:"Code"}),(0,o.kt)("h3",{id:"get-bank-by-id"},"Get Bank By Id"),(0,o.kt)("p",null,"Retrieving a bank requires an ",(0,o.kt)("inlineCode",{parentName:"p"},"id")," to be passed, usually this is ",(0,o.kt)("inlineCode",{parentName:"p"},"base64")," encoded."),(0,o.kt)(i.ZP,{code:{rust:"\nlet bank = client\n    .get_bank(bank_id)\n    .await\n    .unwrap();",ts:'\nconst bank = await ledgerClient.getBank(\n    sdk.DocumentId.fromUint8Array("bank", new TextEncoder().encode("bb-bank")));\nconsole.log(bank);\n',cli:"\nm10 get bank d1ff50f87c944ca799b9acca988cb529\n"},mdxType:"Code"}),(0,o.kt)("h3",{id:"listing-all-banks"},"Listing All Banks"),(0,o.kt)("p",null,"Listing all banks has an optional paging parameter in most APIs, so that you can step through a ledger with many.\nIt is recommended to use zero as a limit page parameter and null for ",(0,o.kt)("inlineCode",{parentName:"p"},"lastId"),"."),(0,o.kt)(i.ZP,{code:{rust:"\nlet banks = client\n  .list_banks(m10_sdk::PageBuilder::default())\n  .await\n  .unwrap();\n",ts:"\nconst banks = await ledgerClient.listBanks(new sdk.PageBuilder({\n    limit: 0,\n    lastId: null,\n    filter: {},\n}));\nconsole.log(banks);\n",cli:"m10 find bank"},mdxType:"Code"}))}m.isMDXComponent=!0}}]);