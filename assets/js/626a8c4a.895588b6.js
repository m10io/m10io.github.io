"use strict";(self.webpackChunkproduct=self.webpackChunkproduct||[]).push([[433,2666],{788:(e,n,i)=>{i.d(n,{A:()=>a});i(6540);var s=i(8186),t=i(7430),o=i(4612),r=i(4767),l=i(4848);function a(e){let n=e.code.trim();return(0,l.jsx)("div",{className:"code",children:(0,l.jsxs)("div",{className:"code-inner",children:[(0,l.jsx)(s.Ay,{value:n,height:e.height||"auto",theme:t.IR,extensions:[r.gq[e.lang]],readOnly:"true"}),(0,l.jsx)(o.A,{code:n,className:"buttonGroup"})]})})}},4753:(e,n,i)=>{i.r(n),i.d(n,{ProductName:()=>d,assets:()=>a,contentTitle:()=>l,default:()=>h,frontMatter:()=>r,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"components/variables","title":"variables","description":"","source":"@site/docs/components/variables.mdx","sourceDirName":"components","slug":"/components/variables","permalink":"/components/variables","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{}}');var t=i(4848),o=i(8453);const r={},l=void 0,a={},d=()=>(0,t.jsx)("span",{children:"DRM"}),c=[];function u(e){return(0,t.jsx)(t.Fragment,{})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(u,{...e})}):u()}},8453:(e,n,i)=>{i.d(n,{R:()=>r,x:()=>l});var s=i(6540);const t={},o=s.createContext(t);function r(e){const n=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),s.createElement(o.Provider,{value:n},e.children)}},9386:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>u,contentTitle:()=>c,default:()=>b,frontMatter:()=>d,metadata:()=>s,toc:()=>h});const s=JSON.parse('{"id":"api/role-bindings","title":"Role Bindings","description":"Role bindings connect roles with public keys.","source":"@site/docs/api/role-bindings.mdx","sourceDirName":"api","slug":"/api/role-bindings","permalink":"/api/role-bindings","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"sidebar","previous":{"title":"Roles","permalink":"/api/roles"},"next":{"title":"Transfers","permalink":"/api/transfers"}}');var t=i(4848),o=i(8453),r=i(788),l=i(4767),a=i(4753);const d={},c="Role Bindings",u={},h=[{value:"Expressions",id:"expressions",level:3},{value:"Permission to create role bindings",id:"permission-to-create-role-bindings",level:3},{value:"Model",id:"model",level:2},{value:"API Requests",id:"api-requests",level:2},{value:"Create",id:"create",level:3},{value:"Update",id:"update",level:3},{value:"Delete",id:"delete",level:3},{value:"List (Find)",id:"list-find",level:3},{value:"Get",id:"get",level:3}];function p(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"role-bindings",children:"Role Bindings"})}),"\n",(0,t.jsxs)(n.p,{children:["Role bindings connect ",(0,t.jsx)(n.a,{href:"./roles",children:"roles"})," with public keys."]}),"\n",(0,t.jsxs)(n.p,{children:["For example, to grant a user permission to access a resource, you must first ensure that you have a ",(0,t.jsx)(n.a,{href:"roles",children:"role"})," that defines the permissions. Then, you bind that role to the user's public key."]}),"\n",(0,t.jsxs)(n.p,{children:["A ",(0,t.jsx)(n.em,{children:"role binding"})," contains the following fields:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["a unique ID - We recommend using ",(0,t.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/Universally_unique_identifier",children:"UUIDs"})," as IDs."]}),"\n",(0,t.jsx)(n.li,{children:"a name - This is used for easy identification in queries."}),"\n",(0,t.jsx)(n.li,{children:"a role - This is the ID of the role you wish to bind."}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"expressions",children:"Expressions"}),"\n",(0,t.jsx)(n.p,{children:"Expressions are a way of conditionally applying role bindings and provide a flexible way to restrict access to resources. An expression is evaluated at runtime against the properties of the resource being accessed. This allows you to grant permissions based on criteria instead of a fixed list of instance IDs."}),"\n",(0,t.jsxs)(n.p,{children:["Example: ",(0,t.jsx)(n.code,{children:"document.owner == public_key"})," - This expression grants access only if the owner field of the resource matches the ",(0,t.jsx)(n.code,{children:"public_key"})," of the subject attempting to access it."]}),"\n",(0,t.jsxs)(n.p,{children:["Expressions are handy when combined with ",(0,t.jsx)(n.code,{children:"is_universal"}),". It allows a role binding to be used by any public key. You may have noticed that most ",(0,t.jsx)(a.ProductName,{})," API requests have a field called owner. The owner field does not give any permissions. Instead, we often create role bindings with an expression like ",(0,t.jsx)(n.code,{children:"document.owner == public_key"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["A role binding supports a list of expressions. Each collection in a role can be assigned its own expression. We use MQL to write Expressions, which has a syntax similar to Rust, and is detailed in the ",(0,t.jsx)(n.a,{href:"https://docs.mql4.com/basis",children:"MQL documentation"}),"."]}),"\n",(0,t.jsx)(n.p,{children:"Expressions in role-bindings work for all collections that are \u201cregistered\u201d (i.e. that provide a type environment) in the system. For collections that are not set up that way, expressions will not work."}),"\n",(0,t.jsx)(n.p,{children:"Currently supported collections:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"account-metadata"}),"\n",(0,t.jsx)(n.li,{children:"account-set"}),"\n",(0,t.jsx)(n.li,{children:"banks"}),"\n",(0,t.jsx)(n.li,{children:"ledger-account"}),"\n",(0,t.jsx)(n.li,{children:"role-binding"}),"\n",(0,t.jsx)(n.li,{children:"roles"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"The expression compiler supports the following operations:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Literals:"})," Numbers, strings, booleans, and bytes."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Infix operations:"})," Boolean \u201cand\u201d/\u201cor\u201d and equality checks are allowed. (Other infix operators like arithmetic, union/intersect, etc. are not supported.)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Field access:"})," If the object's type is known (e.g. a document with an \u201cowner\u201d field), then you can access its fields."]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"The following expressions are allowed:"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Field"}),(0,t.jsx)(n.th,{children:"Description"})]})}),(0,t.jsx)(n.tbody,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"owner"})}),(0,t.jsxs)(n.td,{children:["The owner field does not provide any permissions. Instead, we often create role bindings with an expression like ",(0,t.jsx)(n.code,{children:"document.owner == public_key"}),"."]})]})})]}),"\n",(0,t.jsx)(n.h3,{id:"permission-to-create-role-bindings",children:"Permission to create role bindings"}),"\n",(0,t.jsxs)(n.p,{children:["To grant permission to create role bindings, we use the ",(0,t.jsx)(n.code,{children:"Create"})," verb on the ",(0,t.jsx)(n.code,{children:"role-bindings"})," collection. If you have full access (permissions) to your account, you can create a new role-binding and bind it to someone else to provide them access to your account. This empowers users to grant permissions to accounts they own or already have access to."]}),"\n",(0,t.jsx)(n.p,{children:"For example, to add a new public key (from a second mobile device) to your account, create a new role-binding with the new key:"}),"\n","\n",(0,t.jsx)(n.admonition,{type:"note",children:(0,t.jsx)(n.p,{children:"You can not grant someone more permissions than you have. That is true whether you create a new role-binding or update an existing one."})}),"\n",(0,t.jsx)(n.h2,{id:"model",children:"Model"}),"\n",(0,t.jsxs)(n.p,{children:["The data model for an ",(0,t.jsx)(a.ProductName,{})," hierarchical ledger account is defined in ",(0,t.jsx)(n.code,{children:"rbac.proto"}),":"]}),"\n",(0,t.jsx)(r.A,{code:"\nmessage RoleBinding {\n  bytes id = 1;\n  string name = 2;                      // Name of the role-binding\n  bytes role = 3;                       // Role to be binded\n  repeated bytes subjects = 4;          // Who the role should be binded to\n  repeated Expression expressions = 5;  // Conditions\n  bool is_universal = 6;                // If set, applies to all public keys.\n  bytes owner = 7;\n}\n\nmessage Expression {\n  string collection = 1;\n  string expression = 2;\n}\n",lang:"protobuf"}),"\n",(0,t.jsx)(n.h2,{id:"api-requests",children:"API Requests"}),"\n",(0,t.jsx)(n.h3,{id:"create",children:"Create"}),"\n",(0,t.jsx)(n.p,{children:"To create a role-binding:"}),"\n",(0,t.jsx)(l.Ay,{code:{rust:'\nclient.documents(\n  DocumentBuilder::default().insert(sdk::RoleBinding {\n    id: uuid::Uuid::new_v4().as_bytes().to_vec().into(),\n    name: "test-role-binding".to_string(),\n    role: uuid::Uuid::parse_str("72b79b75-5736-412d-a391-e7a190a36b15")?\n      .as_bytes()\n      .to_vec()\n      .into(), // The id of an already created role\n    subjects: vec![],\n    expressions: vec![sdk::Expression {\n        collection: "banks".to_string(),\n        expression: "document.owner == public_key".to_string() // make a role-binding that applies to owners of banks\n    }],\n    owner: client.signer().public_key().to_vec().into(),\n    is_universal: false\n  })\n).await?;\n',ts:"\n// assume you already have a role created\nconst roleId = ResourceId.fromString('..........)\n\nconst roleBinding = RoleBinding.create({\n  id: ResourceId.generate().bytes,\n  name: 'role-binding',\n  isUniversal: false,\n  subjects: [accountSigner.getPublicKey().toUint8Array()],\n  expressions: [],\n  owner: bankSigner.getPublicKey().toUint8Array(),\n  role: roleId.id,\n});\n\n\nconst txId = await bankClient.documents([{\n  oneofKind: \"insertDocument\",\n  insertDocument: Operation_InsertDocument.create({\n      collection: Collection.RoleBinding,\n      document: RoleBinding.toBinary(roleBinding),\n  }),\n}]);\nconsole.log(`Created role-binding ${roleBinding.id} in transaction ${txId}`)\n",dart:"\nfinal roleBindingId = await client.createRoleBinding(\n name: 'test-role-binding',\n role: '72b79b755736412da391e7a190a36b15',\n subjects: ['wPf1jiymlaF6vdpTko5aBMcy1wnUc/KFvU8HlRgBqmY=']\n operator: 'fis.m10.net',\n);\n",cli:'m10 create role-binding \\\n  --name "test-role-binding" \\\n  --role "72b79b75-5736-412d-a391-e7a190a36b15" \\\n  --owner "wPf1jiymlaF6vdpTko5aBMcy1wnUc/KFvU8HlRgBqmY=" \\\n  --subject "wPf1jiymlaF6vdpTko5aBMcy1wnUc/KFvU8HlRgBqmY="\n'}}),"\n",(0,t.jsx)(n.h1,{id:""}),"\n",(0,t.jsx)(n.h3,{id:"update",children:"Update"}),"\n",(0,t.jsx)(n.p,{children:"To update a role binding:"}),"\n",(0,t.jsx)(l.Ay,{code:{rust:'\nclient.documents(DocumentBuilder::default().update(\nm10_sdk::DocumentUpdate::new(uuid::Uuid::parse_str("72b79b75-5736-412d-a391-e7a190a36b15")?) \n.subject(client.signer().public_key().to_vec())\n)).await?;\n',ts:'\nawait bankAdminClient.documents([{\n  oneofKind: "updateDocument",\n  updateDocument: Operation_UpdateDocument.create({\n      collection: Collection.RoleBinding,\n      primaryKey: Value.create({\n          value: {\n              oneofKind: "bytesValue",\n              bytesValue: roleBinding.id,\n          },\n      }),\n      document: RoleBinding.toBinary(\n          RoleBinding.create({\n              id: roleBinding.id,\n              name: \'new-name\',\n          }),\n      ),\n      fieldMask: FieldMask.create({ paths: ["name"] }),\n      mergeRepeated: false,\n  }),\n}]);\n',dart:"\nfinal roleBindingId = await client.updateRoleBinding(\n id: '72b79b75-5736-412d-a391-e7a190a36b15',\n subjects: ['wPf1jiymlaF6vdpTko5aBMcy1wnUc/KFvU8HlRgBqmY='],\n operator: 'fis.m10.net',\n)\n",cli:'m10 update role-binding "72b79b75-5736-412d-a391-e7a190a36b15" \\\n  --subject "wPf1jiymlaF6vdpTko5aBMcy1wnUc/KFvU8HlRgBqmY="\n'}}),"\n",(0,t.jsx)(n.h1,{id:"-1"}),"\n",(0,t.jsx)(n.h3,{id:"delete",children:"Delete"}),"\n",(0,t.jsx)(n.p,{children:"To delete a role binding:"}),"\n",(0,t.jsx)(l.Ay,{code:{rust:'\nlet id = uuid::Uuid::parse_str("72b79b75-5736-412d-a391-e7a190a36b15")?.as_bytes().to_vec();\nclient.documents(DocumentBuilder::default().delete_custom(\n  m10_sdk::Collection::RoleBindings, id)).await?;\n',ts:'\nawait ledgerClient.documents([\n  {\n      oneofKind: "deleteDocument",\n      deleteDocument: Operation_DeleteDocument.create({\n          collection: Collection.RoleBinding,\n          primaryKey: Value.create({\n              value: {\n                  oneofKind: "bytesValue",\n                  bytesValue: roleBinding.id,\n              },\n          }),\n      }),\n  },\n]);\n',dart:"\n// not supported\n",cli:'\nm10 delete role-binding "6aa51062-452b-482a-aff0-3e7df1a1aae9"\n'}}),"\n",(0,t.jsx)(n.h1,{id:"-2"}),"\n",(0,t.jsx)("br",{}),"\n",(0,t.jsx)(n.h3,{id:"list-find",children:"List (Find)"}),"\n",(0,t.jsx)(n.p,{children:"To list role bindings by name:"}),"\n",(0,t.jsx)(l.Ay,{code:{rust:'\nclient.list_role_bindings(\n  m10_sdk::PageBuilder::<uuid::Uuid, m10_sdk::NameFilter>::name("test-role-binding")\n).await?;\n',ts:'\nconst { roleBindings } = await ledgerClient.listRoleBindings({\n  filter: {\n      oneofKind: "name",\n      name: "node-test-customer",\n  },\n});\nconsole.log(`RoleBinding ${JSON.stringify(roleBindings, null, 2)}`)\n',dart:"final roleBindings = await client.listRoleBindings(\nname: '72b79b75-5736-412d-a391-e7a190a36b15',\noperator: 'fis.m10.net',\n);",cli:'m10 find role-bindings --name "test-role-binding"'}}),"\n",(0,t.jsx)(n.h1,{id:"-3"}),"\n",(0,t.jsx)(n.h3,{id:"get",children:"Get"}),"\n",(0,t.jsx)(n.p,{children:"To get a role binding:"}),"\n",(0,t.jsx)(l.Ay,{code:{rust:'\nclient.get_role_binding(uuid::Uuid::parse_str("72b79b75-5736-412d-a391-e7a190a36b15")?).await?;\n',ts:"\nconst roleBinding = await bankAdminClient.getRoleBindings(roleBindingId.id);\n\nconsole.log(`RoleBinding ${JSON.stringify(roleBinding, null, 2)}`)\n",dart:"final roleBinding = await client.getRoleBinding(\nid: '72b79b75-5736-412d-a391-e7a190a36b15'\noperator: 'fis.m10.net',\n);",cli:'m10 get role-binding 72b79b75-5736-412d-a391-e7a190a36b15"'}}),"\n",(0,t.jsx)(n.h1,{id:"-4"}),"\n",(0,t.jsx)(n.admonition,{title:"HTTP/1",type:"info",children:(0,t.jsx)(n.p,{children:"To submit requests over HTTP/1 instead of HTTP/2 with the SDKs, use the http option."})})]})}function b(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(p,{...e})}):p(e)}}}]);