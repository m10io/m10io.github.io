"use strict";(self.webpackChunkproduct=self.webpackChunkproduct||[]).push([[523],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>b});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=a.createContext({}),d=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},c=function(e){var n=d(e.components);return a.createElement(s.Provider,{value:n},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},p=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),u=d(t),p=r,b=u["".concat(s,".").concat(p)]||u[p]||m[p]||i;return t?a.createElement(b,l(l({ref:n},c),{},{components:t})):a.createElement(b,l({ref:n},c))}));function b(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,l=new Array(i);l[0]=p;var o={};for(var s in n)hasOwnProperty.call(n,s)&&(o[s]=n[s]);o.originalType=e,o[u]="string"==typeof e?e:r,l[1]=o;for(var d=2;d<i;d++)l[d]=t[d];return a.createElement.apply(null,l)}return a.createElement.apply(null,t)}p.displayName="MDXCreateElement"},5624:(e,n,t)=>{t.d(n,{Z:()=>s});var a=t(7294),r=t(7685),i=t(7316),l=t(5291),o=t(3894);function s(e){let n=e.code.trim();return a.createElement("div",{className:"code"},a.createElement("div",{className:"code-inner"},a.createElement(r.ZP,{value:n,height:e.height||"auto",theme:i.C,extensions:[o.ih[e.lang]],readOnly:"true"}),a.createElement(l.Z,{code:n,className:"buttonGroup"})))}},1025:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>p,frontMatter:()=>o,metadata:()=>d,toc:()=>u});var a=t(7462),r=(t(7294),t(3905)),i=t(3894),l=t(5624);const o={},s="Roles",d={unversionedId:"api/roles",id:"api/roles",title:"Roles",description:'Roles (along with their partner Role Bindings) are the two core elements of M10\'s permissions system. They group together a set of permissions on resources into a single object. For instance you might have a Role called bank-admin that allows a user to create or read accounts. Or you might have a role called "viewer" which allows a user to view all resources. Roles are only useful once they are "bound" to a specific key using a Role Binding.',source:"@site/docs/api/roles.mdx",sourceDirName:"api",slug:"/api/roles",permalink:"/api/roles",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"sidebar",previous:{title:"Role Bindings",permalink:"/api/role-bindings"},next:{title:"Transfers",permalink:"/api/transfers"}},c={},u=[{value:"Rules",id:"rules",level:3},{value:"Model",id:"model",level:2},{value:"API Calls",id:"api-calls",level:2},{value:"Create",id:"create",level:3},{value:"Get",id:"get",level:3},{value:"List",id:"list",level:3},{value:"Update",id:"update",level:3},{value:"Delete",id:"delete",level:3}],m={toc:u};function p(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,a.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"roles"},"Roles"),(0,r.kt)("p",null,"Roles (along with their partner Role Bindings) are the two core elements of M10's permissions system. They group together a set of permissions on resources into a single object. For instance you might have a Role called ",(0,r.kt)("inlineCode",{parentName:"p"},"bank-admin"),' that allows a user to create or read accounts. Or you might have a role called "viewer" which allows a user to view all resources. Roles are only useful once they are "bound" to a specific key using a ',(0,r.kt)("a",{parentName:"p",href:"./role-bindings"},"Role Binding"),"."),(0,r.kt)("h3",{id:"rules"},"Rules"),(0,r.kt)("p",null,'Each Role is made up of a number of "Rules". A rule contains a ',(0,r.kt)("inlineCode",{parentName:"p"},"collection"),", a list of ",(0,r.kt)("inlineCode",{parentName:"p"},"instance_keys"),", and a list of ",(0,r.kt)("inlineCode",{parentName:"p"},"verbs"),". The collection is the type of object you are granting permissions to, for instance if you wanted to grant permissions for a user to access an account, the collection would be ",(0,r.kt)("inlineCode",{parentName:"p"},"accounts"),'. "Verbs" are actions that can take place on an instance. There are 7 verbs:'),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Read"),(0,r.kt)("li",{parentName:"ul"},"Create"),(0,r.kt)("li",{parentName:"ul"},"Update"),(0,r.kt)("li",{parentName:"ul"},"Delete"),(0,r.kt)("li",{parentName:"ul"},"Transact"),(0,r.kt)("li",{parentName:"ul"},"Initiate"),(0,r.kt)("li",{parentName:"ul"},"Commit")),(0,r.kt)("p",null,"Each rule can take an optional set of ",(0,r.kt)("inlineCode",{parentName:"p"},"instance_keys"),". If one or more instance keys is specified, the rule only applies to those instances. Imagine you are trying to give a user access to just their own account. You could create a Rule that contains only the id for that account in ",(0,r.kt)("inlineCode",{parentName:"p"},"instance_keys"),"."),(0,r.kt)("h2",{id:"model"},"Model"),(0,r.kt)(l.Z,{code:"\nmessage Role {\n  bytes id = 1;\n  bytes owner = 2;\n  string name = 3;\n  repeated Rule rules = 4;\n} \n\nmessage Rule {\n  string collection = 2;\n  repeated Value instance_keys = 3;\n  repeated Verb verbs = 4; \n\n  enum Verb {\n    READ = 0;\n    CREATE = 1;\n    UPDATE = 2;\n    DELETE = 3;\n    TRANSACT = 4;\n    INITIATE = 5;\n    COMMIT = 6;\n  }\n}\n",lang:"protobuf",mdxType:"Highlight"}),(0,r.kt)("h2",{id:"api-calls"},"API Calls"),(0,r.kt)("h3",{id:"create"},"Create"),(0,r.kt)(i.ZP,{code:{rust:'\nuse m10_sdk::KeyPair;\nuse m10_sdk::{prost::bytes::Bytes, sdk, DocumentBuilder, M10Client, Signer};\nlet admin = KeyPair::Ed25519("...");\nlet client = M10Client::new(admin, channel);\nlet account_id =\nBytes::copy_from_slice(&hex::decode("00800005000000000000000000000002")?).into();\nclient\n.documents(\n    DocumentBuilder::default().insert(sdk::Role {\n        id: uuid::Uuid::parse_str("6aa51062-452b-482a-aff0-3e7df1a1aae9")?\n            .as_bytes()\n            .to_vec()\n            .into(),\n        name: "bank-admin".to_string(),\n        rules: vec![\n            sdk::Rule {\n                collection: Collection::Banks.to_string(),\n                instance_keys: vec![Bytes::copy_from_slice(\n                    uuid::Uuid::parse_str("bc3b532d-6be0-45e1-b98c-5ddc6e8e239a")?\n                        .as_bytes(),\n                )\n                .into()],\n                verbs: vec![sdk::rule::Verb::Read as i32],\n            },\n            sdk::Rule {\n                collection: "ledger-accounts".to_string(),\n                instance_keys: vec![account_id.to_vec()],\n                verbs: vec![sdk::rule::Verb::Create as i32],\n            },\n            sdk::Rule {\n                collection: Collection::Accounts.to_string(),\n                instance_keys: vec![account_id.into()],\n                verbs: vec![\n                    sdk::rule::Verb::Create as i32,\n                    sdk::rule::Verb::Read as i32,\n                ],\n            },\n        ],\n        owner: admin.public_key().to_vec().into(),\n    }),\n)\n.await?;\n',ts:'\nimport { client, helpers, signer, utils } from "m10-sdk";\nimport { m10 } from "m10-sdk/protobufs";\nconst adminSigner = signer.CryptoSigner.getSignerFromPkcs8V1("...");\nconst ledgerClient = new client.LedgerClient("fist.m10.net", true);\nconst accountId = utils.getUint8ArrayFromAccountId(\n  "00800005000000000000000000000002"\n);\nconst role = new m10.sdk.Role({\n  name: "bank-admin",\n  owner: adminSigner.getPublicKey(),\n  rules: [\n    new m10.sdk.Rule({\n      collection: "banks",\n      instanceKeys: ["bc3b532d-6be0-45e1-b98c-5ddc6e8e239a"],\n      verbs: [m10.sdk.Rule.Verb.READ],\n    }),\n    new m10.sdk.Rule({\n      collection: "ledger-accounts",\n      instanceKeys: [accountId],\n      verbs: [m10.sdk.Rule.Verb.CREATE],\n    }),\n    new m10.sdk.Rule({\n      collection: "accounts",\n      instanceKeys: [accountId],\n      verbs: [m10.sdk.Rule.Verb.CREATE, m10.sdk.Rule.Verb.READ],\n    }),\n  ],\n});\nconst roleId = await helpers.roles.createRole(ledgerClient, adminSigner, role);\n',dart:'\ncreateRole(\n  name: "bank-admin",\n  rules: [\n    RuleDoc.fromStrings(\n        "banks", ["READ"], ["bc3b532d-6be0-45e1-b98c-5ddc6e8e239a"]),\n    RuleDoc.fromStrings(\n      "accounts",\n      ["CREATE", "READ"],\n      ["00800005000000000000000000000002"],\n    ),\n    RuleDoc.fromStrings(\n        "ledger-accounts", ["CREATE"], ["00800005000000000000000000000002"])\n  ],\n  operator: "fis.m10.net",\n);\n',cli:'\nm10 create role \\\n--id 6aa51062-452b-482a-aff0-3e7df1a1aae9 \\\n--name bank-admin \\\n--rule "rule --collection banks --verbs Read --instances bc3b532d-6be0-45e1-b98c-5ddc6e8e239a" \\\n--rule "rule --collection accounts --verbs Create Read --instances 00800005000000000000000000000002" \\\n--rule "rule --collection ledger-accounts --verbs Create --instances 00800005000000000000000000000002"\n'},mdxType:"Code"}),(0,r.kt)("h3",{id:"get"},"Get"),(0,r.kt)(i.ZP,{code:{rust:'\nuse m10_sdk::KeyPair;\nuse m10_sdk::M10Client;\nlet admin = KeyPair::Ed25519("...");\nlet client = M10Client::new(admin, channel);\nlet role = client\n    .get_role(uuid::Uuid::parse_str(\n        "6aa51062-452b-482a-aff0-3e7df1a1aae9",\n    )?)\n    .await?;\n',ts:'\nimport { client, signer } from "m10-sdk";\nimport { m10 } from "m10-sdk/protobufs";\nconst adminSigner = signer.CryptoSigner.getSignerFromPkcs8V1("...");\nconst ledgerClient = new client.LedgerClient("fis.m10.net", true);\nconst response = await ledgerClient.getRole(adminSigner, {\n  id: m10.sdk.utils.getUint8ArrayFromDocumentId(\n    "6aa51062-452b-482a-aff0-3e7df1a1aae9"\n  ),\n});\n',dart:'\nfinal transfer = await client.getRole(\n  id: "72b79b75-5736-412d-a391-e7a190a36b15"\n  operator: "fis.m10.net",\n);\n',cli:"\nm10 get role 6aa51062-452b-482a-aff0-3e7df1a1aae9\n"},mdxType:"Code"}),(0,r.kt)("h3",{id:"list"},"List"),(0,r.kt)(i.ZP,{code:{rust:'\nuse m10_sdk::M10Client;\nuse m10_sdk::{KeyPair, NameFilter, PageBuilder};\nlet admin = KeyPair::Ed25519("...");\nlet client = M10Client::new(admin, channel);\nlet builder = PageBuilder::<uuid::Uuid, NameFilter>::name("bank-admin");\nlet roles = client.list_roles(builder).await?;\n',ts:'\nimport { client, signer, utils } from "m10-sdk";\nimport { m10 } from "m10-sdk/protobufs";\nconst adminSigner = signer.CryptoSigner.getSignerFromPkcs8V1("...");\nconst ledgerClient = new client.LedgerClient("fis.m10.net", true);\nledgerClient.listRoles(signer, {\n  name: "bank-admin",\n});\n',dart:'\nawait client.listRoles(\n  name: "bank-admin", \n  operator: "fis.m10.net",\n)\n',cli:"\nm10 list role --name bank-admin\n"},mdxType:"Code"}),(0,r.kt)("h3",{id:"update"},"Update"),(0,r.kt)(i.ZP,{code:{rust:'\nuse m10_sdk::KeyPair;\nuse m10_sdk::{prost::bytes::Bytes, sdk, DocumentBuilder, DocumentUpdate, M10Client};\nlet admin = KeyPair::Ed25519("...");\nlet client = M10Client::new(admin, channel);\nclient\n    .documents(\n        DocumentBuilder::default().update(\n            DocumentUpdate::<sdk::Role>::new(uuid::Uuid::parse_str(\n                "6aa51062-452b-482a-aff0-3e7df1a1aae9",\n            )?)\n            .name("ext-bank-admin".to_string())\n            .rules(vec![sdk::Rule {\n                collection: Collection::Roles.to_string(),\n                instance_keys: vec![Bytes::copy_from_slice(\n                    uuid::Uuid::parse_str("6df7043d-d2d0-4d7e-b5ca-bdb9b68b4548")?\n                        .as_bytes(),\n                )\n                .into()],\n                verbs: vec![\n                    sdk::rule::Verb::Create as i32,\n                    sdk::rule::Verb::Read as i32,\n                    sdk::rule::Verb::Update as i32,\n                ],\n            }]),\n        ),\n    )\n    .await?;\n',ts:'\nimport { client, helpers, signer, utils } from "m10-sdk";\nimport { m10 } from "m10-sdk/protobufs";\nconst adminSigner = signer.CryptoSigner.getSignerFromPkcs8V1("...");\nconst ledgerClient = new client.LedgerClient("fis.m10.net", true);\nconst rules = [\n  new m10.sdk.Rule({\n    collection: "role-bindings",\n    instanceKeys: [\n      m10.sdk.utils.getUint8ArrayFromDocumentId(\n        "6df7043d-d2d0-4d7e-b5ca-bdb9b68b4548"\n      ),\n    ],\n    verbs: [\n      m10.sdk.Rule.Verb.CREATE,\n      m10.sdk.Rule.Verb.READ,\n      m10.sdk.Rule.Verb.UPDATE,\n    ],\n  }),\n];\nconst response = await helpers.roles.updateRole(\n  ledgerClient,\n  adminSigner,\n  "6aa51062-452b-482a-aff0-3e7df1a1aae9",\n  "ext-bank-admin",\n  undefined,\n  rules\n);\n',dart:'\nupdateRole(\n  name: "ext-bank-admin",\n  rules: [\n    RuleDoc.fromStrings(\n      "roles",\n      ["CREATE", "READ", "UPDATE"],\n      ["6df7043d-d2d0-4d7e-b5ca-bdb9b68b4548"],\n    )\n  ],\n  operator: "fis.m10.net",\n);\n',cli:'\nm10 update role \\\n--id 6aa51062-452b-482a-aff0-3e7df1a1aae9 \\\n--name ext-bank-admin \\\n--rule "rule --collection roles --verbs Create Read Update --instances 6df7043d-d2d0-4d7e-b5ca-bdb9b68b4548"\n'},mdxType:"Code"}),(0,r.kt)("h3",{id:"delete"},"Delete"),(0,r.kt)(i.ZP,{code:{rust:'\nuse m10_sdk::M10Client;\nuse m10_sdk::{DocumentBuilder, KeyPair};\nlet admin = KeyPair::Ed25519("...");\nlet client = M10Client::new(admin, channel);\nlet role = client\n    .get_role(uuid::Uuid::parse_str(\n        "6aa51062-452b-482a-aff0-3e7df1a1aae9",\n    )?)\n    .await?;\nlet document_builder = DocumentBuilder::default().delete(role);\nlet response = client.documents(document_builder).await?;\n',ts:'\nimport { client, helpers, signer } from "m10-sdk";\nimport { m10 } from "m10-sdk/protobufs";\nconst adminSigner = signer.CryptoSigner.getSignerFromPkcs8V1("...");\nconst ledgerClient = new client.LedgerClient("fis.m10.net", true);\nconst response = await helpers.roles.deleteRole(\n  ledgerClient,\n  adminSigner,\n  "6aa51062-452b-482a-aff0-3e7df1a1aae9"\n});\n',dart:'\nfinal transfer = await client.deleteRole(\n  id: "6aa51062-452b-482a-aff0-3e7df1a1aae9",\n  operator: "fis.m10.net",\n);\n',cli:"\nm10 delete role 6aa51062-452b-482a-aff0-3e7df1a1aae9\n"},mdxType:"Code"}))}p.isMDXComponent=!0}}]);